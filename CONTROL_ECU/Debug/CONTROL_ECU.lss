
CONTROL_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003f6a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000124  00800060  00003f6a  00003ffe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001c  00800184  00800184  00004122  2**0
                  ALLOC
  3 .stab         00003a5c  00000000  00000000  00004124  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000014ae  00000000  00000000  00007b80  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000902e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  000091ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  000093c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000b7cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000cb51  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000dd28  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000dee8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000e1de  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000eb4c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 4c 1c 	jmp	0x3898	; 0x3898 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 7f 1c 	jmp	0x38fe	; 0x38fe <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e6       	ldi	r30, 0x6A	; 106
      68:	ff e3       	ldi	r31, 0x3F	; 63
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 38       	cpi	r26, 0x84	; 132
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 e8       	ldi	r26, 0x84	; 132
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 3a       	cpi	r26, 0xA0	; 160
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <main>
      8a:	0c 94 b3 1f 	jmp	0x3f66	; 0x3f66 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 37 1f 	jmp	0x3e6e	; 0x3e6e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ab e6       	ldi	r26, 0x6B	; 107
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 53 1f 	jmp	0x3ea6	; 0x3ea6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 43 1f 	jmp	0x3e86	; 0x3e86 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 5f 1f 	jmp	0x3ebe	; 0x3ebe <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 43 1f 	jmp	0x3e86	; 0x3e86 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 5f 1f 	jmp	0x3ebe	; 0x3ebe <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 37 1f 	jmp	0x3e6e	; 0x3e6e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8b e6       	ldi	r24, 0x6B	; 107
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 53 1f 	jmp	0x3ea6	; 0x3ea6 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 3f 1f 	jmp	0x3e7e	; 0x3e7e <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6b e6       	ldi	r22, 0x6B	; 107
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 5b 1f 	jmp	0x3eb6	; 0x3eb6 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 43 1f 	jmp	0x3e86	; 0x3e86 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 5f 1f 	jmp	0x3ebe	; 0x3ebe <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 43 1f 	jmp	0x3e86	; 0x3e86 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 5f 1f 	jmp	0x3ebe	; 0x3ebe <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 43 1f 	jmp	0x3e86	; 0x3e86 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 5f 1f 	jmp	0x3ebe	; 0x3ebe <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 47 1f 	jmp	0x3e8e	; 0x3e8e <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 63 1f 	jmp	0x3ec6	; 0x3ec6 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 3f 1f 	jmp	0x3e7e	; 0x3e7e <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 5b 1f 	jmp	0x3eb6	; 0x3eb6 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	ed 58       	subi	r30, 0x8D	; 141
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <receiveFirstPass>:

/*Function used to receive the first pass from the user
and displaying every button the user pressed and doesn't leave the function
before leaving the function
 */
void receiveFirstPass(void){
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
     e36:	2f 97       	sbiw	r28, 0x0f	; 15
     e38:	0f b6       	in	r0, 0x3f	; 63
     e3a:	f8 94       	cli
     e3c:	de bf       	out	0x3e, r29	; 62
     e3e:	0f be       	out	0x3f, r0	; 63
     e40:	cd bf       	out	0x3d, r28	; 61
	uint8 pass1;
	LCD_clearScreen();
     e42:	0e 94 fd 1b 	call	0x37fa	; 0x37fa <LCD_clearScreen>

	/*
	 * receiving first pass byte by byte and saving every byte received from MC1
	 * in a variable called pass1 then saving the value of pass1 in the array
	 */
	for(i=0;i<PASS_SIZE;i++){
     e46:	10 92 9e 01 	sts	0x019E, r1
     e4a:	88 c0       	rjmp	.+272    	; 0xf5c <receiveFirstPass+0x12e>
		pass1=UART_recieveByte();
     e4c:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <UART_recieveByte>
     e50:	8f 87       	std	Y+15, r24	; 0x0f
     e52:	80 e0       	ldi	r24, 0x00	; 0
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	a0 e2       	ldi	r26, 0x20	; 32
     e58:	b1 e4       	ldi	r27, 0x41	; 65
     e5a:	8b 87       	std	Y+11, r24	; 0x0b
     e5c:	9c 87       	std	Y+12, r25	; 0x0c
     e5e:	ad 87       	std	Y+13, r26	; 0x0d
     e60:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e62:	6b 85       	ldd	r22, Y+11	; 0x0b
     e64:	7c 85       	ldd	r23, Y+12	; 0x0c
     e66:	8d 85       	ldd	r24, Y+13	; 0x0d
     e68:	9e 85       	ldd	r25, Y+14	; 0x0e
     e6a:	20 e0       	ldi	r18, 0x00	; 0
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	4a ef       	ldi	r20, 0xFA	; 250
     e70:	54 e4       	ldi	r21, 0x44	; 68
     e72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e76:	dc 01       	movw	r26, r24
     e78:	cb 01       	movw	r24, r22
     e7a:	8f 83       	std	Y+7, r24	; 0x07
     e7c:	98 87       	std	Y+8, r25	; 0x08
     e7e:	a9 87       	std	Y+9, r26	; 0x09
     e80:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e82:	6f 81       	ldd	r22, Y+7	; 0x07
     e84:	78 85       	ldd	r23, Y+8	; 0x08
     e86:	89 85       	ldd	r24, Y+9	; 0x09
     e88:	9a 85       	ldd	r25, Y+10	; 0x0a
     e8a:	20 e0       	ldi	r18, 0x00	; 0
     e8c:	30 e0       	ldi	r19, 0x00	; 0
     e8e:	40 e8       	ldi	r20, 0x80	; 128
     e90:	5f e3       	ldi	r21, 0x3F	; 63
     e92:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     e96:	88 23       	and	r24, r24
     e98:	2c f4       	brge	.+10     	; 0xea4 <receiveFirstPass+0x76>
		__ticks = 1;
     e9a:	81 e0       	ldi	r24, 0x01	; 1
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	9e 83       	std	Y+6, r25	; 0x06
     ea0:	8d 83       	std	Y+5, r24	; 0x05
     ea2:	3f c0       	rjmp	.+126    	; 0xf22 <receiveFirstPass+0xf4>
	else if (__tmp > 65535)
     ea4:	6f 81       	ldd	r22, Y+7	; 0x07
     ea6:	78 85       	ldd	r23, Y+8	; 0x08
     ea8:	89 85       	ldd	r24, Y+9	; 0x09
     eaa:	9a 85       	ldd	r25, Y+10	; 0x0a
     eac:	20 e0       	ldi	r18, 0x00	; 0
     eae:	3f ef       	ldi	r19, 0xFF	; 255
     eb0:	4f e7       	ldi	r20, 0x7F	; 127
     eb2:	57 e4       	ldi	r21, 0x47	; 71
     eb4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     eb8:	18 16       	cp	r1, r24
     eba:	4c f5       	brge	.+82     	; 0xf0e <receiveFirstPass+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ebc:	6b 85       	ldd	r22, Y+11	; 0x0b
     ebe:	7c 85       	ldd	r23, Y+12	; 0x0c
     ec0:	8d 85       	ldd	r24, Y+13	; 0x0d
     ec2:	9e 85       	ldd	r25, Y+14	; 0x0e
     ec4:	20 e0       	ldi	r18, 0x00	; 0
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	40 e2       	ldi	r20, 0x20	; 32
     eca:	51 e4       	ldi	r21, 0x41	; 65
     ecc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ed0:	dc 01       	movw	r26, r24
     ed2:	cb 01       	movw	r24, r22
     ed4:	bc 01       	movw	r22, r24
     ed6:	cd 01       	movw	r24, r26
     ed8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     edc:	dc 01       	movw	r26, r24
     ede:	cb 01       	movw	r24, r22
     ee0:	9e 83       	std	Y+6, r25	; 0x06
     ee2:	8d 83       	std	Y+5, r24	; 0x05
     ee4:	0f c0       	rjmp	.+30     	; 0xf04 <receiveFirstPass+0xd6>
     ee6:	88 ec       	ldi	r24, 0xC8	; 200
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	9c 83       	std	Y+4, r25	; 0x04
     eec:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     eee:	8b 81       	ldd	r24, Y+3	; 0x03
     ef0:	9c 81       	ldd	r25, Y+4	; 0x04
     ef2:	01 97       	sbiw	r24, 0x01	; 1
     ef4:	f1 f7       	brne	.-4      	; 0xef2 <receiveFirstPass+0xc4>
     ef6:	9c 83       	std	Y+4, r25	; 0x04
     ef8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     efa:	8d 81       	ldd	r24, Y+5	; 0x05
     efc:	9e 81       	ldd	r25, Y+6	; 0x06
     efe:	01 97       	sbiw	r24, 0x01	; 1
     f00:	9e 83       	std	Y+6, r25	; 0x06
     f02:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f04:	8d 81       	ldd	r24, Y+5	; 0x05
     f06:	9e 81       	ldd	r25, Y+6	; 0x06
     f08:	00 97       	sbiw	r24, 0x00	; 0
     f0a:	69 f7       	brne	.-38     	; 0xee6 <receiveFirstPass+0xb8>
     f0c:	14 c0       	rjmp	.+40     	; 0xf36 <receiveFirstPass+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f0e:	6f 81       	ldd	r22, Y+7	; 0x07
     f10:	78 85       	ldd	r23, Y+8	; 0x08
     f12:	89 85       	ldd	r24, Y+9	; 0x09
     f14:	9a 85       	ldd	r25, Y+10	; 0x0a
     f16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f1a:	dc 01       	movw	r26, r24
     f1c:	cb 01       	movw	r24, r22
     f1e:	9e 83       	std	Y+6, r25	; 0x06
     f20:	8d 83       	std	Y+5, r24	; 0x05
     f22:	8d 81       	ldd	r24, Y+5	; 0x05
     f24:	9e 81       	ldd	r25, Y+6	; 0x06
     f26:	9a 83       	std	Y+2, r25	; 0x02
     f28:	89 83       	std	Y+1, r24	; 0x01
     f2a:	89 81       	ldd	r24, Y+1	; 0x01
     f2c:	9a 81       	ldd	r25, Y+2	; 0x02
     f2e:	01 97       	sbiw	r24, 0x01	; 1
     f30:	f1 f7       	brne	.-4      	; 0xf2e <receiveFirstPass+0x100>
     f32:	9a 83       	std	Y+2, r25	; 0x02
     f34:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);
		p1[i]=pass1;
     f36:	80 91 9e 01 	lds	r24, 0x019E
     f3a:	88 2f       	mov	r24, r24
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	fc 01       	movw	r30, r24
     f40:	e7 56       	subi	r30, 0x67	; 103
     f42:	fe 4f       	sbci	r31, 0xFE	; 254
     f44:	8f 85       	ldd	r24, Y+15	; 0x0f
     f46:	80 83       	st	Z, r24
		LCD_intgerToString(pass1);
     f48:	8f 85       	ldd	r24, Y+15	; 0x0f
     f4a:	88 2f       	mov	r24, r24
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <LCD_intgerToString>

	/*
	 * receiving first pass byte by byte and saving every byte received from MC1
	 * in a variable called pass1 then saving the value of pass1 in the array
	 */
	for(i=0;i<PASS_SIZE;i++){
     f52:	80 91 9e 01 	lds	r24, 0x019E
     f56:	8f 5f       	subi	r24, 0xFF	; 255
     f58:	80 93 9e 01 	sts	0x019E, r24
     f5c:	80 91 9e 01 	lds	r24, 0x019E
     f60:	85 30       	cpi	r24, 0x05	; 5
     f62:	08 f4       	brcc	.+2      	; 0xf66 <receiveFirstPass+0x138>
     f64:	73 cf       	rjmp	.-282    	; 0xe4c <receiveFirstPass+0x1e>
		LCD_intgerToString(pass1);
	}
	/*
	 * making sure the user pressed = button before proceeding in the code
	 */
	g_equalPressed=UART_recieveByte();
     f66:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <UART_recieveByte>
     f6a:	80 93 85 01 	sts	0x0185, r24
}
     f6e:	2f 96       	adiw	r28, 0x0f	; 15
     f70:	0f b6       	in	r0, 0x3f	; 63
     f72:	f8 94       	cli
     f74:	de bf       	out	0x3e, r29	; 62
     f76:	0f be       	out	0x3f, r0	; 63
     f78:	cd bf       	out	0x3d, r28	; 61
     f7a:	cf 91       	pop	r28
     f7c:	df 91       	pop	r29
     f7e:	08 95       	ret

00000f80 <receiveSecondPass>:

void receiveSecondPass(void){
     f80:	df 93       	push	r29
     f82:	cf 93       	push	r28
     f84:	cd b7       	in	r28, 0x3d	; 61
     f86:	de b7       	in	r29, 0x3e	; 62
     f88:	2f 97       	sbiw	r28, 0x0f	; 15
     f8a:	0f b6       	in	r0, 0x3f	; 63
     f8c:	f8 94       	cli
     f8e:	de bf       	out	0x3e, r29	; 62
     f90:	0f be       	out	0x3f, r0	; 63
     f92:	cd bf       	out	0x3d, r28	; 61

	uint8 pass2;
	LCD_clearScreen();
     f94:	0e 94 fd 1b 	call	0x37fa	; 0x37fa <LCD_clearScreen>

	/*
	 * receiving second pass byte by byte and saving every byte received from MC1
	 * in a variable called pass2 then saving the value of pass2 in the array
	 */
	for(i=0;i<PASS_SIZE;i++){
     f98:	10 92 9e 01 	sts	0x019E, r1
     f9c:	88 c0       	rjmp	.+272    	; 0x10ae <receiveSecondPass+0x12e>
		pass2=UART_recieveByte();
     f9e:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <UART_recieveByte>
     fa2:	8f 87       	std	Y+15, r24	; 0x0f
     fa4:	80 e0       	ldi	r24, 0x00	; 0
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	a0 e2       	ldi	r26, 0x20	; 32
     faa:	b1 e4       	ldi	r27, 0x41	; 65
     fac:	8b 87       	std	Y+11, r24	; 0x0b
     fae:	9c 87       	std	Y+12, r25	; 0x0c
     fb0:	ad 87       	std	Y+13, r26	; 0x0d
     fb2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fb4:	6b 85       	ldd	r22, Y+11	; 0x0b
     fb6:	7c 85       	ldd	r23, Y+12	; 0x0c
     fb8:	8d 85       	ldd	r24, Y+13	; 0x0d
     fba:	9e 85       	ldd	r25, Y+14	; 0x0e
     fbc:	20 e0       	ldi	r18, 0x00	; 0
     fbe:	30 e0       	ldi	r19, 0x00	; 0
     fc0:	4a ef       	ldi	r20, 0xFA	; 250
     fc2:	54 e4       	ldi	r21, 0x44	; 68
     fc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fc8:	dc 01       	movw	r26, r24
     fca:	cb 01       	movw	r24, r22
     fcc:	8f 83       	std	Y+7, r24	; 0x07
     fce:	98 87       	std	Y+8, r25	; 0x08
     fd0:	a9 87       	std	Y+9, r26	; 0x09
     fd2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     fd4:	6f 81       	ldd	r22, Y+7	; 0x07
     fd6:	78 85       	ldd	r23, Y+8	; 0x08
     fd8:	89 85       	ldd	r24, Y+9	; 0x09
     fda:	9a 85       	ldd	r25, Y+10	; 0x0a
     fdc:	20 e0       	ldi	r18, 0x00	; 0
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	40 e8       	ldi	r20, 0x80	; 128
     fe2:	5f e3       	ldi	r21, 0x3F	; 63
     fe4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     fe8:	88 23       	and	r24, r24
     fea:	2c f4       	brge	.+10     	; 0xff6 <receiveSecondPass+0x76>
		__ticks = 1;
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	9e 83       	std	Y+6, r25	; 0x06
     ff2:	8d 83       	std	Y+5, r24	; 0x05
     ff4:	3f c0       	rjmp	.+126    	; 0x1074 <receiveSecondPass+0xf4>
	else if (__tmp > 65535)
     ff6:	6f 81       	ldd	r22, Y+7	; 0x07
     ff8:	78 85       	ldd	r23, Y+8	; 0x08
     ffa:	89 85       	ldd	r24, Y+9	; 0x09
     ffc:	9a 85       	ldd	r25, Y+10	; 0x0a
     ffe:	20 e0       	ldi	r18, 0x00	; 0
    1000:	3f ef       	ldi	r19, 0xFF	; 255
    1002:	4f e7       	ldi	r20, 0x7F	; 127
    1004:	57 e4       	ldi	r21, 0x47	; 71
    1006:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    100a:	18 16       	cp	r1, r24
    100c:	4c f5       	brge	.+82     	; 0x1060 <receiveSecondPass+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    100e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1010:	7c 85       	ldd	r23, Y+12	; 0x0c
    1012:	8d 85       	ldd	r24, Y+13	; 0x0d
    1014:	9e 85       	ldd	r25, Y+14	; 0x0e
    1016:	20 e0       	ldi	r18, 0x00	; 0
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	40 e2       	ldi	r20, 0x20	; 32
    101c:	51 e4       	ldi	r21, 0x41	; 65
    101e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1022:	dc 01       	movw	r26, r24
    1024:	cb 01       	movw	r24, r22
    1026:	bc 01       	movw	r22, r24
    1028:	cd 01       	movw	r24, r26
    102a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    102e:	dc 01       	movw	r26, r24
    1030:	cb 01       	movw	r24, r22
    1032:	9e 83       	std	Y+6, r25	; 0x06
    1034:	8d 83       	std	Y+5, r24	; 0x05
    1036:	0f c0       	rjmp	.+30     	; 0x1056 <receiveSecondPass+0xd6>
    1038:	88 ec       	ldi	r24, 0xC8	; 200
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	9c 83       	std	Y+4, r25	; 0x04
    103e:	8b 83       	std	Y+3, r24	; 0x03
    1040:	8b 81       	ldd	r24, Y+3	; 0x03
    1042:	9c 81       	ldd	r25, Y+4	; 0x04
    1044:	01 97       	sbiw	r24, 0x01	; 1
    1046:	f1 f7       	brne	.-4      	; 0x1044 <receiveSecondPass+0xc4>
    1048:	9c 83       	std	Y+4, r25	; 0x04
    104a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    104c:	8d 81       	ldd	r24, Y+5	; 0x05
    104e:	9e 81       	ldd	r25, Y+6	; 0x06
    1050:	01 97       	sbiw	r24, 0x01	; 1
    1052:	9e 83       	std	Y+6, r25	; 0x06
    1054:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1056:	8d 81       	ldd	r24, Y+5	; 0x05
    1058:	9e 81       	ldd	r25, Y+6	; 0x06
    105a:	00 97       	sbiw	r24, 0x00	; 0
    105c:	69 f7       	brne	.-38     	; 0x1038 <receiveSecondPass+0xb8>
    105e:	14 c0       	rjmp	.+40     	; 0x1088 <receiveSecondPass+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1060:	6f 81       	ldd	r22, Y+7	; 0x07
    1062:	78 85       	ldd	r23, Y+8	; 0x08
    1064:	89 85       	ldd	r24, Y+9	; 0x09
    1066:	9a 85       	ldd	r25, Y+10	; 0x0a
    1068:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    106c:	dc 01       	movw	r26, r24
    106e:	cb 01       	movw	r24, r22
    1070:	9e 83       	std	Y+6, r25	; 0x06
    1072:	8d 83       	std	Y+5, r24	; 0x05
    1074:	8d 81       	ldd	r24, Y+5	; 0x05
    1076:	9e 81       	ldd	r25, Y+6	; 0x06
    1078:	9a 83       	std	Y+2, r25	; 0x02
    107a:	89 83       	std	Y+1, r24	; 0x01
    107c:	89 81       	ldd	r24, Y+1	; 0x01
    107e:	9a 81       	ldd	r25, Y+2	; 0x02
    1080:	01 97       	sbiw	r24, 0x01	; 1
    1082:	f1 f7       	brne	.-4      	; 0x1080 <receiveSecondPass+0x100>
    1084:	9a 83       	std	Y+2, r25	; 0x02
    1086:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);
		p2[i]=pass2;
    1088:	80 91 9e 01 	lds	r24, 0x019E
    108c:	88 2f       	mov	r24, r24
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	fc 01       	movw	r30, r24
    1092:	ee 56       	subi	r30, 0x6E	; 110
    1094:	fe 4f       	sbci	r31, 0xFE	; 254
    1096:	8f 85       	ldd	r24, Y+15	; 0x0f
    1098:	80 83       	st	Z, r24
		LCD_intgerToString(pass2);
    109a:	8f 85       	ldd	r24, Y+15	; 0x0f
    109c:	88 2f       	mov	r24, r24
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <LCD_intgerToString>

	/*
	 * receiving second pass byte by byte and saving every byte received from MC1
	 * in a variable called pass2 then saving the value of pass2 in the array
	 */
	for(i=0;i<PASS_SIZE;i++){
    10a4:	80 91 9e 01 	lds	r24, 0x019E
    10a8:	8f 5f       	subi	r24, 0xFF	; 255
    10aa:	80 93 9e 01 	sts	0x019E, r24
    10ae:	80 91 9e 01 	lds	r24, 0x019E
    10b2:	85 30       	cpi	r24, 0x05	; 5
    10b4:	08 f4       	brcc	.+2      	; 0x10b8 <receiveSecondPass+0x138>
    10b6:	73 cf       	rjmp	.-282    	; 0xf9e <receiveSecondPass+0x1e>
		LCD_intgerToString(pass2);
	}
	/*
	 * making sure the user pressed = button before proceeding in the code
	 */
	g_equalPressed=UART_recieveByte();
    10b8:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <UART_recieveByte>
    10bc:	80 93 85 01 	sts	0x0185, r24

}
    10c0:	2f 96       	adiw	r28, 0x0f	; 15
    10c2:	0f b6       	in	r0, 0x3f	; 63
    10c4:	f8 94       	cli
    10c6:	de bf       	out	0x3e, r29	; 62
    10c8:	0f be       	out	0x3f, r0	; 63
    10ca:	cd bf       	out	0x3d, r28	; 61
    10cc:	cf 91       	pop	r28
    10ce:	df 91       	pop	r29
    10d0:	08 95       	ret

000010d2 <authenticatePass>:

/*
 * function used to verify that the two entered password from the user at the beginning
 * are identical and sends success if they are identical, ERROR if not
 */
void authenticatePass(void){
    10d2:	df 93       	push	r29
    10d4:	cf 93       	push	r28
    10d6:	cd b7       	in	r28, 0x3d	; 61
    10d8:	de b7       	in	r29, 0x3e	; 62
    10da:	6c 97       	sbiw	r28, 0x1c	; 28
    10dc:	0f b6       	in	r0, 0x3f	; 63
    10de:	f8 94       	cli
    10e0:	de bf       	out	0x3e, r29	; 62
    10e2:	0f be       	out	0x3f, r0	; 63
    10e4:	cd bf       	out	0x3d, r28	; 61
	flag=0;
    10e6:	10 92 84 01 	sts	0x0184, r1

	//verify that the two entered password from the user at the beginning are identical
	for(i=0;i<PASS_SIZE;i++){
    10ea:	10 92 9e 01 	sts	0x019E, r1
    10ee:	1c c0       	rjmp	.+56     	; 0x1128 <authenticatePass+0x56>
		if(p1[i]==p2[i]){
    10f0:	80 91 9e 01 	lds	r24, 0x019E
    10f4:	88 2f       	mov	r24, r24
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	fc 01       	movw	r30, r24
    10fa:	e7 56       	subi	r30, 0x67	; 103
    10fc:	fe 4f       	sbci	r31, 0xFE	; 254
    10fe:	20 81       	ld	r18, Z
    1100:	80 91 9e 01 	lds	r24, 0x019E
    1104:	88 2f       	mov	r24, r24
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	fc 01       	movw	r30, r24
    110a:	ee 56       	subi	r30, 0x6E	; 110
    110c:	fe 4f       	sbci	r31, 0xFE	; 254
    110e:	80 81       	ld	r24, Z
    1110:	28 17       	cp	r18, r24
    1112:	29 f4       	brne	.+10     	; 0x111e <authenticatePass+0x4c>
			flag++;
    1114:	80 91 84 01 	lds	r24, 0x0184
    1118:	8f 5f       	subi	r24, 0xFF	; 255
    111a:	80 93 84 01 	sts	0x0184, r24
 */
void authenticatePass(void){
	flag=0;

	//verify that the two entered password from the user at the beginning are identical
	for(i=0;i<PASS_SIZE;i++){
    111e:	80 91 9e 01 	lds	r24, 0x019E
    1122:	8f 5f       	subi	r24, 0xFF	; 255
    1124:	80 93 9e 01 	sts	0x019E, r24
    1128:	80 91 9e 01 	lds	r24, 0x019E
    112c:	85 30       	cpi	r24, 0x05	; 5
    112e:	00 f3       	brcs	.-64     	; 0x10f0 <authenticatePass+0x1e>
		if(p1[i]==p2[i]){
			flag++;
		}
	}
	//sending Success if passwords are identical
	if(flag==PASS_CONFIRMED){
    1130:	80 91 84 01 	lds	r24, 0x0184
    1134:	85 30       	cpi	r24, 0x05	; 5
    1136:	09 f0       	breq	.+2      	; 0x113a <authenticatePass+0x68>
    1138:	7c c0       	rjmp	.+248    	; 0x1232 <authenticatePass+0x160>
		LCD_clearScreen();
    113a:	0e 94 fd 1b 	call	0x37fa	; 0x37fa <LCD_clearScreen>
		bool = SUCCESS;
    113e:	81 e0       	ldi	r24, 0x01	; 1
    1140:	80 93 98 01 	sts	0x0198, r24
		UART_sendByte(bool);
    1144:	80 91 98 01 	lds	r24, 0x0198
    1148:	0e 94 83 1e 	call	0x3d06	; 0x3d06 <UART_sendByte>
    114c:	80 e0       	ldi	r24, 0x00	; 0
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	a0 e2       	ldi	r26, 0x20	; 32
    1152:	b1 e4       	ldi	r27, 0x41	; 65
    1154:	89 8f       	std	Y+25, r24	; 0x19
    1156:	9a 8f       	std	Y+26, r25	; 0x1a
    1158:	ab 8f       	std	Y+27, r26	; 0x1b
    115a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    115c:	69 8d       	ldd	r22, Y+25	; 0x19
    115e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1160:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1162:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1164:	20 e0       	ldi	r18, 0x00	; 0
    1166:	30 e0       	ldi	r19, 0x00	; 0
    1168:	4a ef       	ldi	r20, 0xFA	; 250
    116a:	54 e4       	ldi	r21, 0x44	; 68
    116c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1170:	dc 01       	movw	r26, r24
    1172:	cb 01       	movw	r24, r22
    1174:	8d 8b       	std	Y+21, r24	; 0x15
    1176:	9e 8b       	std	Y+22, r25	; 0x16
    1178:	af 8b       	std	Y+23, r26	; 0x17
    117a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    117c:	6d 89       	ldd	r22, Y+21	; 0x15
    117e:	7e 89       	ldd	r23, Y+22	; 0x16
    1180:	8f 89       	ldd	r24, Y+23	; 0x17
    1182:	98 8d       	ldd	r25, Y+24	; 0x18
    1184:	20 e0       	ldi	r18, 0x00	; 0
    1186:	30 e0       	ldi	r19, 0x00	; 0
    1188:	40 e8       	ldi	r20, 0x80	; 128
    118a:	5f e3       	ldi	r21, 0x3F	; 63
    118c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1190:	88 23       	and	r24, r24
    1192:	2c f4       	brge	.+10     	; 0x119e <authenticatePass+0xcc>
		__ticks = 1;
    1194:	81 e0       	ldi	r24, 0x01	; 1
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	9c 8b       	std	Y+20, r25	; 0x14
    119a:	8b 8b       	std	Y+19, r24	; 0x13
    119c:	3f c0       	rjmp	.+126    	; 0x121c <authenticatePass+0x14a>
	else if (__tmp > 65535)
    119e:	6d 89       	ldd	r22, Y+21	; 0x15
    11a0:	7e 89       	ldd	r23, Y+22	; 0x16
    11a2:	8f 89       	ldd	r24, Y+23	; 0x17
    11a4:	98 8d       	ldd	r25, Y+24	; 0x18
    11a6:	20 e0       	ldi	r18, 0x00	; 0
    11a8:	3f ef       	ldi	r19, 0xFF	; 255
    11aa:	4f e7       	ldi	r20, 0x7F	; 127
    11ac:	57 e4       	ldi	r21, 0x47	; 71
    11ae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    11b2:	18 16       	cp	r1, r24
    11b4:	4c f5       	brge	.+82     	; 0x1208 <authenticatePass+0x136>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11b6:	69 8d       	ldd	r22, Y+25	; 0x19
    11b8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    11ba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    11bc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    11be:	20 e0       	ldi	r18, 0x00	; 0
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	40 e2       	ldi	r20, 0x20	; 32
    11c4:	51 e4       	ldi	r21, 0x41	; 65
    11c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11ca:	dc 01       	movw	r26, r24
    11cc:	cb 01       	movw	r24, r22
    11ce:	bc 01       	movw	r22, r24
    11d0:	cd 01       	movw	r24, r26
    11d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11d6:	dc 01       	movw	r26, r24
    11d8:	cb 01       	movw	r24, r22
    11da:	9c 8b       	std	Y+20, r25	; 0x14
    11dc:	8b 8b       	std	Y+19, r24	; 0x13
    11de:	0f c0       	rjmp	.+30     	; 0x11fe <authenticatePass+0x12c>
    11e0:	88 ec       	ldi	r24, 0xC8	; 200
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	9a 8b       	std	Y+18, r25	; 0x12
    11e6:	89 8b       	std	Y+17, r24	; 0x11
    11e8:	89 89       	ldd	r24, Y+17	; 0x11
    11ea:	9a 89       	ldd	r25, Y+18	; 0x12
    11ec:	01 97       	sbiw	r24, 0x01	; 1
    11ee:	f1 f7       	brne	.-4      	; 0x11ec <authenticatePass+0x11a>
    11f0:	9a 8b       	std	Y+18, r25	; 0x12
    11f2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11f4:	8b 89       	ldd	r24, Y+19	; 0x13
    11f6:	9c 89       	ldd	r25, Y+20	; 0x14
    11f8:	01 97       	sbiw	r24, 0x01	; 1
    11fa:	9c 8b       	std	Y+20, r25	; 0x14
    11fc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11fe:	8b 89       	ldd	r24, Y+19	; 0x13
    1200:	9c 89       	ldd	r25, Y+20	; 0x14
    1202:	00 97       	sbiw	r24, 0x00	; 0
    1204:	69 f7       	brne	.-38     	; 0x11e0 <authenticatePass+0x10e>
    1206:	8f c0       	rjmp	.+286    	; 0x1326 <authenticatePass+0x254>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1208:	6d 89       	ldd	r22, Y+21	; 0x15
    120a:	7e 89       	ldd	r23, Y+22	; 0x16
    120c:	8f 89       	ldd	r24, Y+23	; 0x17
    120e:	98 8d       	ldd	r25, Y+24	; 0x18
    1210:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1214:	dc 01       	movw	r26, r24
    1216:	cb 01       	movw	r24, r22
    1218:	9c 8b       	std	Y+20, r25	; 0x14
    121a:	8b 8b       	std	Y+19, r24	; 0x13
    121c:	8b 89       	ldd	r24, Y+19	; 0x13
    121e:	9c 89       	ldd	r25, Y+20	; 0x14
    1220:	98 8b       	std	Y+16, r25	; 0x10
    1222:	8f 87       	std	Y+15, r24	; 0x0f
    1224:	8f 85       	ldd	r24, Y+15	; 0x0f
    1226:	98 89       	ldd	r25, Y+16	; 0x10
    1228:	01 97       	sbiw	r24, 0x01	; 1
    122a:	f1 f7       	brne	.-4      	; 0x1228 <authenticatePass+0x156>
    122c:	98 8b       	std	Y+16, r25	; 0x10
    122e:	8f 87       	std	Y+15, r24	; 0x0f
    1230:	7a c0       	rjmp	.+244    	; 0x1326 <authenticatePass+0x254>
		_delay_ms(10);
	}
	//sending Error if passwords are not identical
	else{
		LCD_clearScreen();
    1232:	0e 94 fd 1b 	call	0x37fa	; 0x37fa <LCD_clearScreen>
		bool = ERROR;
    1236:	10 92 98 01 	sts	0x0198, r1
		UART_sendByte(bool);
    123a:	80 91 98 01 	lds	r24, 0x0198
    123e:	0e 94 83 1e 	call	0x3d06	; 0x3d06 <UART_sendByte>
    1242:	80 e0       	ldi	r24, 0x00	; 0
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	a0 e2       	ldi	r26, 0x20	; 32
    1248:	b1 e4       	ldi	r27, 0x41	; 65
    124a:	8b 87       	std	Y+11, r24	; 0x0b
    124c:	9c 87       	std	Y+12, r25	; 0x0c
    124e:	ad 87       	std	Y+13, r26	; 0x0d
    1250:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1252:	6b 85       	ldd	r22, Y+11	; 0x0b
    1254:	7c 85       	ldd	r23, Y+12	; 0x0c
    1256:	8d 85       	ldd	r24, Y+13	; 0x0d
    1258:	9e 85       	ldd	r25, Y+14	; 0x0e
    125a:	20 e0       	ldi	r18, 0x00	; 0
    125c:	30 e0       	ldi	r19, 0x00	; 0
    125e:	4a ef       	ldi	r20, 0xFA	; 250
    1260:	54 e4       	ldi	r21, 0x44	; 68
    1262:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1266:	dc 01       	movw	r26, r24
    1268:	cb 01       	movw	r24, r22
    126a:	8f 83       	std	Y+7, r24	; 0x07
    126c:	98 87       	std	Y+8, r25	; 0x08
    126e:	a9 87       	std	Y+9, r26	; 0x09
    1270:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1272:	6f 81       	ldd	r22, Y+7	; 0x07
    1274:	78 85       	ldd	r23, Y+8	; 0x08
    1276:	89 85       	ldd	r24, Y+9	; 0x09
    1278:	9a 85       	ldd	r25, Y+10	; 0x0a
    127a:	20 e0       	ldi	r18, 0x00	; 0
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	40 e8       	ldi	r20, 0x80	; 128
    1280:	5f e3       	ldi	r21, 0x3F	; 63
    1282:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1286:	88 23       	and	r24, r24
    1288:	2c f4       	brge	.+10     	; 0x1294 <authenticatePass+0x1c2>
		__ticks = 1;
    128a:	81 e0       	ldi	r24, 0x01	; 1
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	9e 83       	std	Y+6, r25	; 0x06
    1290:	8d 83       	std	Y+5, r24	; 0x05
    1292:	3f c0       	rjmp	.+126    	; 0x1312 <authenticatePass+0x240>
	else if (__tmp > 65535)
    1294:	6f 81       	ldd	r22, Y+7	; 0x07
    1296:	78 85       	ldd	r23, Y+8	; 0x08
    1298:	89 85       	ldd	r24, Y+9	; 0x09
    129a:	9a 85       	ldd	r25, Y+10	; 0x0a
    129c:	20 e0       	ldi	r18, 0x00	; 0
    129e:	3f ef       	ldi	r19, 0xFF	; 255
    12a0:	4f e7       	ldi	r20, 0x7F	; 127
    12a2:	57 e4       	ldi	r21, 0x47	; 71
    12a4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    12a8:	18 16       	cp	r1, r24
    12aa:	4c f5       	brge	.+82     	; 0x12fe <authenticatePass+0x22c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    12ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    12b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    12b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    12b4:	20 e0       	ldi	r18, 0x00	; 0
    12b6:	30 e0       	ldi	r19, 0x00	; 0
    12b8:	40 e2       	ldi	r20, 0x20	; 32
    12ba:	51 e4       	ldi	r21, 0x41	; 65
    12bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12c0:	dc 01       	movw	r26, r24
    12c2:	cb 01       	movw	r24, r22
    12c4:	bc 01       	movw	r22, r24
    12c6:	cd 01       	movw	r24, r26
    12c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12cc:	dc 01       	movw	r26, r24
    12ce:	cb 01       	movw	r24, r22
    12d0:	9e 83       	std	Y+6, r25	; 0x06
    12d2:	8d 83       	std	Y+5, r24	; 0x05
    12d4:	0f c0       	rjmp	.+30     	; 0x12f4 <authenticatePass+0x222>
    12d6:	88 ec       	ldi	r24, 0xC8	; 200
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	9c 83       	std	Y+4, r25	; 0x04
    12dc:	8b 83       	std	Y+3, r24	; 0x03
    12de:	8b 81       	ldd	r24, Y+3	; 0x03
    12e0:	9c 81       	ldd	r25, Y+4	; 0x04
    12e2:	01 97       	sbiw	r24, 0x01	; 1
    12e4:	f1 f7       	brne	.-4      	; 0x12e2 <authenticatePass+0x210>
    12e6:	9c 83       	std	Y+4, r25	; 0x04
    12e8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12ea:	8d 81       	ldd	r24, Y+5	; 0x05
    12ec:	9e 81       	ldd	r25, Y+6	; 0x06
    12ee:	01 97       	sbiw	r24, 0x01	; 1
    12f0:	9e 83       	std	Y+6, r25	; 0x06
    12f2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12f4:	8d 81       	ldd	r24, Y+5	; 0x05
    12f6:	9e 81       	ldd	r25, Y+6	; 0x06
    12f8:	00 97       	sbiw	r24, 0x00	; 0
    12fa:	69 f7       	brne	.-38     	; 0x12d6 <authenticatePass+0x204>
    12fc:	14 c0       	rjmp	.+40     	; 0x1326 <authenticatePass+0x254>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12fe:	6f 81       	ldd	r22, Y+7	; 0x07
    1300:	78 85       	ldd	r23, Y+8	; 0x08
    1302:	89 85       	ldd	r24, Y+9	; 0x09
    1304:	9a 85       	ldd	r25, Y+10	; 0x0a
    1306:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    130a:	dc 01       	movw	r26, r24
    130c:	cb 01       	movw	r24, r22
    130e:	9e 83       	std	Y+6, r25	; 0x06
    1310:	8d 83       	std	Y+5, r24	; 0x05
    1312:	8d 81       	ldd	r24, Y+5	; 0x05
    1314:	9e 81       	ldd	r25, Y+6	; 0x06
    1316:	9a 83       	std	Y+2, r25	; 0x02
    1318:	89 83       	std	Y+1, r24	; 0x01
    131a:	89 81       	ldd	r24, Y+1	; 0x01
    131c:	9a 81       	ldd	r25, Y+2	; 0x02
    131e:	01 97       	sbiw	r24, 0x01	; 1
    1320:	f1 f7       	brne	.-4      	; 0x131e <authenticatePass+0x24c>
    1322:	9a 83       	std	Y+2, r25	; 0x02
    1324:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);
	}
}
    1326:	6c 96       	adiw	r28, 0x1c	; 28
    1328:	0f b6       	in	r0, 0x3f	; 63
    132a:	f8 94       	cli
    132c:	de bf       	out	0x3e, r29	; 62
    132e:	0f be       	out	0x3f, r0	; 63
    1330:	cd bf       	out	0x3d, r28	; 61
    1332:	cf 91       	pop	r28
    1334:	df 91       	pop	r29
    1336:	08 95       	ret

00001338 <EEPROM_savePass>:

/*
 * function used to save password in the EEPROM Memory byte by byte
 */
void EEPROM_savePass(void){
    1338:	df 93       	push	r29
    133a:	cf 93       	push	r28
    133c:	cd b7       	in	r28, 0x3d	; 61
    133e:	de b7       	in	r29, 0x3e	; 62
    1340:	2e 97       	sbiw	r28, 0x0e	; 14
    1342:	0f b6       	in	r0, 0x3f	; 63
    1344:	f8 94       	cli
    1346:	de bf       	out	0x3e, r29	; 62
    1348:	0f be       	out	0x3f, r0	; 63
    134a:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    134c:	0e 94 fd 1b 	call	0x37fa	; 0x37fa <LCD_clearScreen>
	for(i=0;i<PASS_SIZE;i++){
    1350:	10 92 9e 01 	sts	0x019E, r1
    1354:	8e c0       	rjmp	.+284    	; 0x1472 <EEPROM_savePass+0x13a>
		//writing the password in EEPROM Memory byte by byte
		EEPROM_writeByte(g_address + i, p1[i]);
    1356:	80 91 9e 01 	lds	r24, 0x019E
    135a:	28 2f       	mov	r18, r24
    135c:	30 e0       	ldi	r19, 0x00	; 0
    135e:	80 91 73 01 	lds	r24, 0x0173
    1362:	90 91 74 01 	lds	r25, 0x0174
    1366:	a9 01       	movw	r20, r18
    1368:	48 0f       	add	r20, r24
    136a:	59 1f       	adc	r21, r25
    136c:	80 91 9e 01 	lds	r24, 0x019E
    1370:	88 2f       	mov	r24, r24
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	fc 01       	movw	r30, r24
    1376:	e7 56       	subi	r30, 0x67	; 103
    1378:	fe 4f       	sbci	r31, 0xFE	; 254
    137a:	20 81       	ld	r18, Z
    137c:	ca 01       	movw	r24, r20
    137e:	62 2f       	mov	r22, r18
    1380:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <EEPROM_writeByte>
    1384:	80 e0       	ldi	r24, 0x00	; 0
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	a0 e2       	ldi	r26, 0x20	; 32
    138a:	b1 e4       	ldi	r27, 0x41	; 65
    138c:	8b 87       	std	Y+11, r24	; 0x0b
    138e:	9c 87       	std	Y+12, r25	; 0x0c
    1390:	ad 87       	std	Y+13, r26	; 0x0d
    1392:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1394:	6b 85       	ldd	r22, Y+11	; 0x0b
    1396:	7c 85       	ldd	r23, Y+12	; 0x0c
    1398:	8d 85       	ldd	r24, Y+13	; 0x0d
    139a:	9e 85       	ldd	r25, Y+14	; 0x0e
    139c:	20 e0       	ldi	r18, 0x00	; 0
    139e:	30 e0       	ldi	r19, 0x00	; 0
    13a0:	4a ef       	ldi	r20, 0xFA	; 250
    13a2:	54 e4       	ldi	r21, 0x44	; 68
    13a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13a8:	dc 01       	movw	r26, r24
    13aa:	cb 01       	movw	r24, r22
    13ac:	8f 83       	std	Y+7, r24	; 0x07
    13ae:	98 87       	std	Y+8, r25	; 0x08
    13b0:	a9 87       	std	Y+9, r26	; 0x09
    13b2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13b4:	6f 81       	ldd	r22, Y+7	; 0x07
    13b6:	78 85       	ldd	r23, Y+8	; 0x08
    13b8:	89 85       	ldd	r24, Y+9	; 0x09
    13ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    13bc:	20 e0       	ldi	r18, 0x00	; 0
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	40 e8       	ldi	r20, 0x80	; 128
    13c2:	5f e3       	ldi	r21, 0x3F	; 63
    13c4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    13c8:	88 23       	and	r24, r24
    13ca:	2c f4       	brge	.+10     	; 0x13d6 <EEPROM_savePass+0x9e>
		__ticks = 1;
    13cc:	81 e0       	ldi	r24, 0x01	; 1
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	9e 83       	std	Y+6, r25	; 0x06
    13d2:	8d 83       	std	Y+5, r24	; 0x05
    13d4:	3f c0       	rjmp	.+126    	; 0x1454 <EEPROM_savePass+0x11c>
	else if (__tmp > 65535)
    13d6:	6f 81       	ldd	r22, Y+7	; 0x07
    13d8:	78 85       	ldd	r23, Y+8	; 0x08
    13da:	89 85       	ldd	r24, Y+9	; 0x09
    13dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    13de:	20 e0       	ldi	r18, 0x00	; 0
    13e0:	3f ef       	ldi	r19, 0xFF	; 255
    13e2:	4f e7       	ldi	r20, 0x7F	; 127
    13e4:	57 e4       	ldi	r21, 0x47	; 71
    13e6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    13ea:	18 16       	cp	r1, r24
    13ec:	4c f5       	brge	.+82     	; 0x1440 <EEPROM_savePass+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    13f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    13f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    13f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    13f6:	20 e0       	ldi	r18, 0x00	; 0
    13f8:	30 e0       	ldi	r19, 0x00	; 0
    13fa:	40 e2       	ldi	r20, 0x20	; 32
    13fc:	51 e4       	ldi	r21, 0x41	; 65
    13fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1402:	dc 01       	movw	r26, r24
    1404:	cb 01       	movw	r24, r22
    1406:	bc 01       	movw	r22, r24
    1408:	cd 01       	movw	r24, r26
    140a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    140e:	dc 01       	movw	r26, r24
    1410:	cb 01       	movw	r24, r22
    1412:	9e 83       	std	Y+6, r25	; 0x06
    1414:	8d 83       	std	Y+5, r24	; 0x05
    1416:	0f c0       	rjmp	.+30     	; 0x1436 <EEPROM_savePass+0xfe>
    1418:	88 ec       	ldi	r24, 0xC8	; 200
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	9c 83       	std	Y+4, r25	; 0x04
    141e:	8b 83       	std	Y+3, r24	; 0x03
    1420:	8b 81       	ldd	r24, Y+3	; 0x03
    1422:	9c 81       	ldd	r25, Y+4	; 0x04
    1424:	01 97       	sbiw	r24, 0x01	; 1
    1426:	f1 f7       	brne	.-4      	; 0x1424 <EEPROM_savePass+0xec>
    1428:	9c 83       	std	Y+4, r25	; 0x04
    142a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    142c:	8d 81       	ldd	r24, Y+5	; 0x05
    142e:	9e 81       	ldd	r25, Y+6	; 0x06
    1430:	01 97       	sbiw	r24, 0x01	; 1
    1432:	9e 83       	std	Y+6, r25	; 0x06
    1434:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1436:	8d 81       	ldd	r24, Y+5	; 0x05
    1438:	9e 81       	ldd	r25, Y+6	; 0x06
    143a:	00 97       	sbiw	r24, 0x00	; 0
    143c:	69 f7       	brne	.-38     	; 0x1418 <EEPROM_savePass+0xe0>
    143e:	14 c0       	rjmp	.+40     	; 0x1468 <EEPROM_savePass+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1440:	6f 81       	ldd	r22, Y+7	; 0x07
    1442:	78 85       	ldd	r23, Y+8	; 0x08
    1444:	89 85       	ldd	r24, Y+9	; 0x09
    1446:	9a 85       	ldd	r25, Y+10	; 0x0a
    1448:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    144c:	dc 01       	movw	r26, r24
    144e:	cb 01       	movw	r24, r22
    1450:	9e 83       	std	Y+6, r25	; 0x06
    1452:	8d 83       	std	Y+5, r24	; 0x05
    1454:	8d 81       	ldd	r24, Y+5	; 0x05
    1456:	9e 81       	ldd	r25, Y+6	; 0x06
    1458:	9a 83       	std	Y+2, r25	; 0x02
    145a:	89 83       	std	Y+1, r24	; 0x01
    145c:	89 81       	ldd	r24, Y+1	; 0x01
    145e:	9a 81       	ldd	r25, Y+2	; 0x02
    1460:	01 97       	sbiw	r24, 0x01	; 1
    1462:	f1 f7       	brne	.-4      	; 0x1460 <EEPROM_savePass+0x128>
    1464:	9a 83       	std	Y+2, r25	; 0x02
    1466:	89 83       	std	Y+1, r24	; 0x01
/*
 * function used to save password in the EEPROM Memory byte by byte
 */
void EEPROM_savePass(void){
	LCD_clearScreen();
	for(i=0;i<PASS_SIZE;i++){
    1468:	80 91 9e 01 	lds	r24, 0x019E
    146c:	8f 5f       	subi	r24, 0xFF	; 255
    146e:	80 93 9e 01 	sts	0x019E, r24
    1472:	80 91 9e 01 	lds	r24, 0x019E
    1476:	85 30       	cpi	r24, 0x05	; 5
    1478:	08 f4       	brcc	.+2      	; 0x147c <EEPROM_savePass+0x144>
    147a:	6d cf       	rjmp	.-294    	; 0x1356 <EEPROM_savePass+0x1e>
		//writing the password in EEPROM Memory byte by byte
		EEPROM_writeByte(g_address + i, p1[i]);
		_delay_ms(10);

	}
}
    147c:	2e 96       	adiw	r28, 0x0e	; 14
    147e:	0f b6       	in	r0, 0x3f	; 63
    1480:	f8 94       	cli
    1482:	de bf       	out	0x3e, r29	; 62
    1484:	0f be       	out	0x3f, r0	; 63
    1486:	cd bf       	out	0x3d, r28	; 61
    1488:	cf 91       	pop	r28
    148a:	df 91       	pop	r29
    148c:	08 95       	ret

0000148e <EEPROM_comparePass>:
 * function used to verify that the confirmation pass is equal to the saved password in EEPROM
 * flag is used to increment when a byte is equal to its equivalent in the saved pass array
 * when flag reaches to 5 then the password is verified and then Comparing is success,
 * if not Comparing fails
 */
void EEPROM_comparePass(void){
    148e:	df 93       	push	r29
    1490:	cf 93       	push	r28
    1492:	cd b7       	in	r28, 0x3d	; 61
    1494:	de b7       	in	r29, 0x3e	; 62
    1496:	2e 97       	sbiw	r28, 0x0e	; 14
    1498:	0f b6       	in	r0, 0x3f	; 63
    149a:	f8 94       	cli
    149c:	de bf       	out	0x3e, r29	; 62
    149e:	0f be       	out	0x3f, r0	; 63
    14a0:	cd bf       	out	0x3d, r28	; 61
	flag=0;
    14a2:	10 92 84 01 	sts	0x0184, r1
	LCD_clearScreen();
    14a6:	0e 94 fd 1b 	call	0x37fa	; 0x37fa <LCD_clearScreen>
	LCD_displayString("savedPass=");
    14aa:	80 e6       	ldi	r24, 0x60	; 96
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	0e 94 56 1b 	call	0x36ac	; 0x36ac <LCD_displayString>
	for(i=0;i< PASS_SIZE;i++){
    14b2:	10 92 9e 01 	sts	0x019E, r1
    14b6:	96 c0       	rjmp	.+300    	; 0x15e4 <EEPROM_comparePass+0x156>
		EEPROM_readByte(g_address + i,&g_readPassword);
    14b8:	80 91 9e 01 	lds	r24, 0x019E
    14bc:	28 2f       	mov	r18, r24
    14be:	30 e0       	ldi	r19, 0x00	; 0
    14c0:	80 91 73 01 	lds	r24, 0x0173
    14c4:	90 91 74 01 	lds	r25, 0x0174
    14c8:	82 0f       	add	r24, r18
    14ca:	93 1f       	adc	r25, r19
    14cc:	2f e9       	ldi	r18, 0x9F	; 159
    14ce:	31 e0       	ldi	r19, 0x01	; 1
    14d0:	b9 01       	movw	r22, r18
    14d2:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <EEPROM_readByte>
    14d6:	80 e0       	ldi	r24, 0x00	; 0
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	a0 e2       	ldi	r26, 0x20	; 32
    14dc:	b1 e4       	ldi	r27, 0x41	; 65
    14de:	8b 87       	std	Y+11, r24	; 0x0b
    14e0:	9c 87       	std	Y+12, r25	; 0x0c
    14e2:	ad 87       	std	Y+13, r26	; 0x0d
    14e4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    14e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    14ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    14ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    14ee:	20 e0       	ldi	r18, 0x00	; 0
    14f0:	30 e0       	ldi	r19, 0x00	; 0
    14f2:	4a ef       	ldi	r20, 0xFA	; 250
    14f4:	54 e4       	ldi	r21, 0x44	; 68
    14f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14fa:	dc 01       	movw	r26, r24
    14fc:	cb 01       	movw	r24, r22
    14fe:	8f 83       	std	Y+7, r24	; 0x07
    1500:	98 87       	std	Y+8, r25	; 0x08
    1502:	a9 87       	std	Y+9, r26	; 0x09
    1504:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1506:	6f 81       	ldd	r22, Y+7	; 0x07
    1508:	78 85       	ldd	r23, Y+8	; 0x08
    150a:	89 85       	ldd	r24, Y+9	; 0x09
    150c:	9a 85       	ldd	r25, Y+10	; 0x0a
    150e:	20 e0       	ldi	r18, 0x00	; 0
    1510:	30 e0       	ldi	r19, 0x00	; 0
    1512:	40 e8       	ldi	r20, 0x80	; 128
    1514:	5f e3       	ldi	r21, 0x3F	; 63
    1516:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    151a:	88 23       	and	r24, r24
    151c:	2c f4       	brge	.+10     	; 0x1528 <EEPROM_comparePass+0x9a>
		__ticks = 1;
    151e:	81 e0       	ldi	r24, 0x01	; 1
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	9e 83       	std	Y+6, r25	; 0x06
    1524:	8d 83       	std	Y+5, r24	; 0x05
    1526:	3f c0       	rjmp	.+126    	; 0x15a6 <EEPROM_comparePass+0x118>
	else if (__tmp > 65535)
    1528:	6f 81       	ldd	r22, Y+7	; 0x07
    152a:	78 85       	ldd	r23, Y+8	; 0x08
    152c:	89 85       	ldd	r24, Y+9	; 0x09
    152e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1530:	20 e0       	ldi	r18, 0x00	; 0
    1532:	3f ef       	ldi	r19, 0xFF	; 255
    1534:	4f e7       	ldi	r20, 0x7F	; 127
    1536:	57 e4       	ldi	r21, 0x47	; 71
    1538:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    153c:	18 16       	cp	r1, r24
    153e:	4c f5       	brge	.+82     	; 0x1592 <EEPROM_comparePass+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1540:	6b 85       	ldd	r22, Y+11	; 0x0b
    1542:	7c 85       	ldd	r23, Y+12	; 0x0c
    1544:	8d 85       	ldd	r24, Y+13	; 0x0d
    1546:	9e 85       	ldd	r25, Y+14	; 0x0e
    1548:	20 e0       	ldi	r18, 0x00	; 0
    154a:	30 e0       	ldi	r19, 0x00	; 0
    154c:	40 e2       	ldi	r20, 0x20	; 32
    154e:	51 e4       	ldi	r21, 0x41	; 65
    1550:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1554:	dc 01       	movw	r26, r24
    1556:	cb 01       	movw	r24, r22
    1558:	bc 01       	movw	r22, r24
    155a:	cd 01       	movw	r24, r26
    155c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1560:	dc 01       	movw	r26, r24
    1562:	cb 01       	movw	r24, r22
    1564:	9e 83       	std	Y+6, r25	; 0x06
    1566:	8d 83       	std	Y+5, r24	; 0x05
    1568:	0f c0       	rjmp	.+30     	; 0x1588 <EEPROM_comparePass+0xfa>
    156a:	88 ec       	ldi	r24, 0xC8	; 200
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	9c 83       	std	Y+4, r25	; 0x04
    1570:	8b 83       	std	Y+3, r24	; 0x03
    1572:	8b 81       	ldd	r24, Y+3	; 0x03
    1574:	9c 81       	ldd	r25, Y+4	; 0x04
    1576:	01 97       	sbiw	r24, 0x01	; 1
    1578:	f1 f7       	brne	.-4      	; 0x1576 <EEPROM_comparePass+0xe8>
    157a:	9c 83       	std	Y+4, r25	; 0x04
    157c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    157e:	8d 81       	ldd	r24, Y+5	; 0x05
    1580:	9e 81       	ldd	r25, Y+6	; 0x06
    1582:	01 97       	sbiw	r24, 0x01	; 1
    1584:	9e 83       	std	Y+6, r25	; 0x06
    1586:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1588:	8d 81       	ldd	r24, Y+5	; 0x05
    158a:	9e 81       	ldd	r25, Y+6	; 0x06
    158c:	00 97       	sbiw	r24, 0x00	; 0
    158e:	69 f7       	brne	.-38     	; 0x156a <EEPROM_comparePass+0xdc>
    1590:	14 c0       	rjmp	.+40     	; 0x15ba <EEPROM_comparePass+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1592:	6f 81       	ldd	r22, Y+7	; 0x07
    1594:	78 85       	ldd	r23, Y+8	; 0x08
    1596:	89 85       	ldd	r24, Y+9	; 0x09
    1598:	9a 85       	ldd	r25, Y+10	; 0x0a
    159a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    159e:	dc 01       	movw	r26, r24
    15a0:	cb 01       	movw	r24, r22
    15a2:	9e 83       	std	Y+6, r25	; 0x06
    15a4:	8d 83       	std	Y+5, r24	; 0x05
    15a6:	8d 81       	ldd	r24, Y+5	; 0x05
    15a8:	9e 81       	ldd	r25, Y+6	; 0x06
    15aa:	9a 83       	std	Y+2, r25	; 0x02
    15ac:	89 83       	std	Y+1, r24	; 0x01
    15ae:	89 81       	ldd	r24, Y+1	; 0x01
    15b0:	9a 81       	ldd	r25, Y+2	; 0x02
    15b2:	01 97       	sbiw	r24, 0x01	; 1
    15b4:	f1 f7       	brne	.-4      	; 0x15b2 <EEPROM_comparePass+0x124>
    15b6:	9a 83       	std	Y+2, r25	; 0x02
    15b8:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);
		LCD_intgerToString(g_readPassword);
    15ba:	80 91 9f 01 	lds	r24, 0x019F
    15be:	88 2f       	mov	r24, r24
    15c0:	90 e0       	ldi	r25, 0x00	; 0
    15c2:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <LCD_intgerToString>
		g_readPasswordArray[i]=g_readPassword;
    15c6:	80 91 9e 01 	lds	r24, 0x019E
    15ca:	88 2f       	mov	r24, r24
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	20 91 9f 01 	lds	r18, 0x019F
    15d2:	fc 01       	movw	r30, r24
    15d4:	e3 57       	subi	r30, 0x73	; 115
    15d6:	fe 4f       	sbci	r31, 0xFE	; 254
    15d8:	20 83       	st	Z, r18
 */
void EEPROM_comparePass(void){
	flag=0;
	LCD_clearScreen();
	LCD_displayString("savedPass=");
	for(i=0;i< PASS_SIZE;i++){
    15da:	80 91 9e 01 	lds	r24, 0x019E
    15de:	8f 5f       	subi	r24, 0xFF	; 255
    15e0:	80 93 9e 01 	sts	0x019E, r24
    15e4:	80 91 9e 01 	lds	r24, 0x019E
    15e8:	85 30       	cpi	r24, 0x05	; 5
    15ea:	08 f4       	brcc	.+2      	; 0x15ee <EEPROM_comparePass+0x160>
    15ec:	65 cf       	rjmp	.-310    	; 0x14b8 <EEPROM_comparePass+0x2a>
		_delay_ms(10);
		LCD_intgerToString(g_readPassword);
		g_readPasswordArray[i]=g_readPassword;
	}

	for(i=0;i<PASS_SIZE;i++){
    15ee:	10 92 9e 01 	sts	0x019E, r1
    15f2:	1c c0       	rjmp	.+56     	; 0x162c <EEPROM_comparePass+0x19e>
		if(p1[i]==g_readPasswordArray[i]){
    15f4:	80 91 9e 01 	lds	r24, 0x019E
    15f8:	88 2f       	mov	r24, r24
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	fc 01       	movw	r30, r24
    15fe:	e7 56       	subi	r30, 0x67	; 103
    1600:	fe 4f       	sbci	r31, 0xFE	; 254
    1602:	20 81       	ld	r18, Z
    1604:	80 91 9e 01 	lds	r24, 0x019E
    1608:	88 2f       	mov	r24, r24
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	fc 01       	movw	r30, r24
    160e:	e3 57       	subi	r30, 0x73	; 115
    1610:	fe 4f       	sbci	r31, 0xFE	; 254
    1612:	80 81       	ld	r24, Z
    1614:	28 17       	cp	r18, r24
    1616:	29 f4       	brne	.+10     	; 0x1622 <EEPROM_comparePass+0x194>
			flag++;
    1618:	80 91 84 01 	lds	r24, 0x0184
    161c:	8f 5f       	subi	r24, 0xFF	; 255
    161e:	80 93 84 01 	sts	0x0184, r24
		_delay_ms(10);
		LCD_intgerToString(g_readPassword);
		g_readPasswordArray[i]=g_readPassword;
	}

	for(i=0;i<PASS_SIZE;i++){
    1622:	80 91 9e 01 	lds	r24, 0x019E
    1626:	8f 5f       	subi	r24, 0xFF	; 255
    1628:	80 93 9e 01 	sts	0x019E, r24
    162c:	80 91 9e 01 	lds	r24, 0x019E
    1630:	85 30       	cpi	r24, 0x05	; 5
    1632:	00 f3       	brcs	.-64     	; 0x15f4 <EEPROM_comparePass+0x166>
		if(p1[i]==g_readPasswordArray[i]){
			flag++;
		}
	}

	if(flag==PASS_CONFIRMED){
    1634:	80 91 84 01 	lds	r24, 0x0184
    1638:	85 30       	cpi	r24, 0x05	; 5
    163a:	21 f4       	brne	.+8      	; 0x1644 <EEPROM_comparePass+0x1b6>
		bool = COMPARE_SUCCESS;
    163c:	81 e0       	ldi	r24, 0x01	; 1
    163e:	80 93 98 01 	sts	0x0198, r24
    1642:	02 c0       	rjmp	.+4      	; 0x1648 <EEPROM_comparePass+0x1ba>

	}
	else{
		bool = COMPARE_FAILED;
    1644:	10 92 98 01 	sts	0x0198, r1
	}


}
    1648:	2e 96       	adiw	r28, 0x0e	; 14
    164a:	0f b6       	in	r0, 0x3f	; 63
    164c:	f8 94       	cli
    164e:	de bf       	out	0x3e, r29	; 62
    1650:	0f be       	out	0x3f, r0	; 63
    1652:	cd bf       	out	0x3d, r28	; 61
    1654:	cf 91       	pop	r28
    1656:	df 91       	pop	r29
    1658:	08 95       	ret

0000165a <APP_tickCounter>:


/*
 * this is the timer call back function in case of compare mode
 */
void APP_tickCounter(void){
    165a:	df 93       	push	r29
    165c:	cf 93       	push	r28
    165e:	cd b7       	in	r28, 0x3d	; 61
    1660:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
    1662:	80 91 86 01 	lds	r24, 0x0186
    1666:	8f 5f       	subi	r24, 0xFF	; 255
    1668:	80 93 86 01 	sts	0x0186, r24
}
    166c:	cf 91       	pop	r28
    166e:	df 91       	pop	r29
    1670:	08 95       	ret

00001672 <securityBreach>:
 *
 * if not the a global variable g_breach count increments by 1 and if it reaches 3 then
 * we will consider it as a security breach
 *  and g_passFailed will take the value of SECURITY_BREACH
 */
void securityBreach(void){
    1672:	df 93       	push	r29
    1674:	cf 93       	push	r28
    1676:	cd b7       	in	r28, 0x3d	; 61
    1678:	de b7       	in	r29, 0x3e	; 62
    167a:	2e 97       	sbiw	r28, 0x0e	; 14
    167c:	0f b6       	in	r0, 0x3f	; 63
    167e:	f8 94       	cli
    1680:	de bf       	out	0x3e, r29	; 62
    1682:	0f be       	out	0x3f, r0	; 63
    1684:	cd bf       	out	0x3d, r28	; 61
	while(1){
		LCD_clearScreen();
    1686:	0e 94 fd 1b 	call	0x37fa	; 0x37fa <LCD_clearScreen>
		receiveFirstPass();
    168a:	0e 94 17 07 	call	0xe2e	; 0xe2e <receiveFirstPass>
		EEPROM_comparePass();
    168e:	0e 94 47 0a 	call	0x148e	; 0x148e <EEPROM_comparePass>

		//sending the value of EEPROM comparison
		UART_sendByte(bool);
    1692:	80 91 98 01 	lds	r24, 0x0198
    1696:	0e 94 83 1e 	call	0x3d06	; 0x3d06 <UART_sendByte>
    169a:	80 e0       	ldi	r24, 0x00	; 0
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	a0 e2       	ldi	r26, 0x20	; 32
    16a0:	b1 e4       	ldi	r27, 0x41	; 65
    16a2:	8b 87       	std	Y+11, r24	; 0x0b
    16a4:	9c 87       	std	Y+12, r25	; 0x0c
    16a6:	ad 87       	std	Y+13, r26	; 0x0d
    16a8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    16ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    16ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    16b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    16b2:	20 e0       	ldi	r18, 0x00	; 0
    16b4:	30 e0       	ldi	r19, 0x00	; 0
    16b6:	4a ef       	ldi	r20, 0xFA	; 250
    16b8:	54 e4       	ldi	r21, 0x44	; 68
    16ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16be:	dc 01       	movw	r26, r24
    16c0:	cb 01       	movw	r24, r22
    16c2:	8f 83       	std	Y+7, r24	; 0x07
    16c4:	98 87       	std	Y+8, r25	; 0x08
    16c6:	a9 87       	std	Y+9, r26	; 0x09
    16c8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16ca:	6f 81       	ldd	r22, Y+7	; 0x07
    16cc:	78 85       	ldd	r23, Y+8	; 0x08
    16ce:	89 85       	ldd	r24, Y+9	; 0x09
    16d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    16d2:	20 e0       	ldi	r18, 0x00	; 0
    16d4:	30 e0       	ldi	r19, 0x00	; 0
    16d6:	40 e8       	ldi	r20, 0x80	; 128
    16d8:	5f e3       	ldi	r21, 0x3F	; 63
    16da:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    16de:	88 23       	and	r24, r24
    16e0:	2c f4       	brge	.+10     	; 0x16ec <securityBreach+0x7a>
		__ticks = 1;
    16e2:	81 e0       	ldi	r24, 0x01	; 1
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	9e 83       	std	Y+6, r25	; 0x06
    16e8:	8d 83       	std	Y+5, r24	; 0x05
    16ea:	3f c0       	rjmp	.+126    	; 0x176a <securityBreach+0xf8>
	else if (__tmp > 65535)
    16ec:	6f 81       	ldd	r22, Y+7	; 0x07
    16ee:	78 85       	ldd	r23, Y+8	; 0x08
    16f0:	89 85       	ldd	r24, Y+9	; 0x09
    16f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    16f4:	20 e0       	ldi	r18, 0x00	; 0
    16f6:	3f ef       	ldi	r19, 0xFF	; 255
    16f8:	4f e7       	ldi	r20, 0x7F	; 127
    16fa:	57 e4       	ldi	r21, 0x47	; 71
    16fc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1700:	18 16       	cp	r1, r24
    1702:	4c f5       	brge	.+82     	; 0x1756 <securityBreach+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1704:	6b 85       	ldd	r22, Y+11	; 0x0b
    1706:	7c 85       	ldd	r23, Y+12	; 0x0c
    1708:	8d 85       	ldd	r24, Y+13	; 0x0d
    170a:	9e 85       	ldd	r25, Y+14	; 0x0e
    170c:	20 e0       	ldi	r18, 0x00	; 0
    170e:	30 e0       	ldi	r19, 0x00	; 0
    1710:	40 e2       	ldi	r20, 0x20	; 32
    1712:	51 e4       	ldi	r21, 0x41	; 65
    1714:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1718:	dc 01       	movw	r26, r24
    171a:	cb 01       	movw	r24, r22
    171c:	bc 01       	movw	r22, r24
    171e:	cd 01       	movw	r24, r26
    1720:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1724:	dc 01       	movw	r26, r24
    1726:	cb 01       	movw	r24, r22
    1728:	9e 83       	std	Y+6, r25	; 0x06
    172a:	8d 83       	std	Y+5, r24	; 0x05
    172c:	0f c0       	rjmp	.+30     	; 0x174c <securityBreach+0xda>
    172e:	88 ec       	ldi	r24, 0xC8	; 200
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	9c 83       	std	Y+4, r25	; 0x04
    1734:	8b 83       	std	Y+3, r24	; 0x03
    1736:	8b 81       	ldd	r24, Y+3	; 0x03
    1738:	9c 81       	ldd	r25, Y+4	; 0x04
    173a:	01 97       	sbiw	r24, 0x01	; 1
    173c:	f1 f7       	brne	.-4      	; 0x173a <securityBreach+0xc8>
    173e:	9c 83       	std	Y+4, r25	; 0x04
    1740:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1742:	8d 81       	ldd	r24, Y+5	; 0x05
    1744:	9e 81       	ldd	r25, Y+6	; 0x06
    1746:	01 97       	sbiw	r24, 0x01	; 1
    1748:	9e 83       	std	Y+6, r25	; 0x06
    174a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    174c:	8d 81       	ldd	r24, Y+5	; 0x05
    174e:	9e 81       	ldd	r25, Y+6	; 0x06
    1750:	00 97       	sbiw	r24, 0x00	; 0
    1752:	69 f7       	brne	.-38     	; 0x172e <securityBreach+0xbc>
    1754:	14 c0       	rjmp	.+40     	; 0x177e <securityBreach+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1756:	6f 81       	ldd	r22, Y+7	; 0x07
    1758:	78 85       	ldd	r23, Y+8	; 0x08
    175a:	89 85       	ldd	r24, Y+9	; 0x09
    175c:	9a 85       	ldd	r25, Y+10	; 0x0a
    175e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1762:	dc 01       	movw	r26, r24
    1764:	cb 01       	movw	r24, r22
    1766:	9e 83       	std	Y+6, r25	; 0x06
    1768:	8d 83       	std	Y+5, r24	; 0x05
    176a:	8d 81       	ldd	r24, Y+5	; 0x05
    176c:	9e 81       	ldd	r25, Y+6	; 0x06
    176e:	9a 83       	std	Y+2, r25	; 0x02
    1770:	89 83       	std	Y+1, r24	; 0x01
    1772:	89 81       	ldd	r24, Y+1	; 0x01
    1774:	9a 81       	ldd	r25, Y+2	; 0x02
    1776:	01 97       	sbiw	r24, 0x01	; 1
    1778:	f1 f7       	brne	.-4      	; 0x1776 <securityBreach+0x104>
    177a:	9a 83       	std	Y+2, r25	; 0x02
    177c:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);

		if(bool == COMPARE_SUCCESS){
    177e:	80 91 98 01 	lds	r24, 0x0198
    1782:	81 30       	cpi	r24, 0x01	; 1
    1784:	21 f4       	brne	.+8      	; 0x178e <securityBreach+0x11c>
			g_passFailed=NO_SECURITY_BREACH;
    1786:	81 e0       	ldi	r24, 0x01	; 1
    1788:	80 93 97 01 	sts	0x0197, r24
    178c:	0c c0       	rjmp	.+24     	; 0x17a6 <securityBreach+0x134>
			break;
		}
		g_breachCount++;
    178e:	80 91 88 01 	lds	r24, 0x0188
    1792:	8f 5f       	subi	r24, 0xFF	; 255
    1794:	80 93 88 01 	sts	0x0188, r24
		if(g_breachCount==3){
    1798:	80 91 88 01 	lds	r24, 0x0188
    179c:	83 30       	cpi	r24, 0x03	; 3
    179e:	19 f0       	breq	.+6      	; 0x17a6 <securityBreach+0x134>
			break;
		}
		g_passFailed=SECURITY_BREACH;
    17a0:	10 92 97 01 	sts	0x0197, r1
    17a4:	70 cf       	rjmp	.-288    	; 0x1686 <securityBreach+0x14>

	}
}
    17a6:	2e 96       	adiw	r28, 0x0e	; 14
    17a8:	0f b6       	in	r0, 0x3f	; 63
    17aa:	f8 94       	cli
    17ac:	de bf       	out	0x3e, r29	; 62
    17ae:	0f be       	out	0x3f, r0	; 63
    17b0:	cd bf       	out	0x3d, r28	; 61
    17b2:	cf 91       	pop	r28
    17b4:	df 91       	pop	r29
    17b6:	08 95       	ret

000017b8 <main>:

int main(void){
    17b8:	df 93       	push	r29
    17ba:	cf 93       	push	r28
    17bc:	cd b7       	in	r28, 0x3d	; 61
    17be:	de b7       	in	r29, 0x3e	; 62
    17c0:	a8 97       	sbiw	r28, 0x28	; 40
    17c2:	0f b6       	in	r0, 0x3f	; 63
    17c4:	f8 94       	cli
    17c6:	de bf       	out	0x3e, r29	; 62
    17c8:	0f be       	out	0x3f, r0	; 63
    17ca:	cd bf       	out	0x3d, r28	; 61
	SET_BIT(SREG,7);//enabling global interrupt bit "I-Bit"
    17cc:	af e5       	ldi	r26, 0x5F	; 95
    17ce:	b0 e0       	ldi	r27, 0x00	; 0
    17d0:	ef e5       	ldi	r30, 0x5F	; 95
    17d2:	f0 e0       	ldi	r31, 0x00	; 0
    17d4:	80 81       	ld	r24, Z
    17d6:	80 68       	ori	r24, 0x80	; 128
    17d8:	8c 93       	st	X, r24
	UART_ConfigType UART_Configurations = {ASYNCHRONOUS,EIGHT_BIT,EVEN_PARITY,ONE_BIT,9600}; //configures the UART dynamically
    17da:	ce 01       	movw	r24, r28
    17dc:	0f 96       	adiw	r24, 0x0f	; 15
    17de:	98 a3       	std	Y+32, r25	; 0x20
    17e0:	8f 8f       	std	Y+31, r24	; 0x1f
    17e2:	eb e7       	ldi	r30, 0x7B	; 123
    17e4:	f1 e0       	ldi	r31, 0x01	; 1
    17e6:	fa a3       	std	Y+34, r31	; 0x22
    17e8:	e9 a3       	std	Y+33, r30	; 0x21
    17ea:	f8 e0       	ldi	r31, 0x08	; 8
    17ec:	fb a3       	std	Y+35, r31	; 0x23
    17ee:	e9 a1       	ldd	r30, Y+33	; 0x21
    17f0:	fa a1       	ldd	r31, Y+34	; 0x22
    17f2:	00 80       	ld	r0, Z
    17f4:	89 a1       	ldd	r24, Y+33	; 0x21
    17f6:	9a a1       	ldd	r25, Y+34	; 0x22
    17f8:	01 96       	adiw	r24, 0x01	; 1
    17fa:	9a a3       	std	Y+34, r25	; 0x22
    17fc:	89 a3       	std	Y+33, r24	; 0x21
    17fe:	ef 8d       	ldd	r30, Y+31	; 0x1f
    1800:	f8 a1       	ldd	r31, Y+32	; 0x20
    1802:	00 82       	st	Z, r0
    1804:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1806:	98 a1       	ldd	r25, Y+32	; 0x20
    1808:	01 96       	adiw	r24, 0x01	; 1
    180a:	98 a3       	std	Y+32, r25	; 0x20
    180c:	8f 8f       	std	Y+31, r24	; 0x1f
    180e:	9b a1       	ldd	r25, Y+35	; 0x23
    1810:	91 50       	subi	r25, 0x01	; 1
    1812:	9b a3       	std	Y+35, r25	; 0x23
    1814:	eb a1       	ldd	r30, Y+35	; 0x23
    1816:	ee 23       	and	r30, r30
    1818:	51 f7       	brne	.-44     	; 0x17ee <main+0x36>
	TWI_ConfigType TWI_Configurations ={0x02,0x02}; //configures I2C Dynamically
    181a:	82 e0       	ldi	r24, 0x02	; 2
    181c:	8f 8b       	std	Y+23, r24	; 0x17
    181e:	82 e0       	ldi	r24, 0x02	; 2
    1820:	88 8f       	std	Y+24, r24	; 0x18
	Timer1_ConfigType TIMER1_Configurations = {0,31249,F_CPU_256,CTC};//configures TIMER1 Dynamically
    1822:	ce 01       	movw	r24, r28
    1824:	49 96       	adiw	r24, 0x19	; 25
    1826:	9d a3       	std	Y+37, r25	; 0x25
    1828:	8c a3       	std	Y+36, r24	; 0x24
    182a:	e5 e7       	ldi	r30, 0x75	; 117
    182c:	f1 e0       	ldi	r31, 0x01	; 1
    182e:	ff a3       	std	Y+39, r31	; 0x27
    1830:	ee a3       	std	Y+38, r30	; 0x26
    1832:	f6 e0       	ldi	r31, 0x06	; 6
    1834:	f8 a7       	std	Y+40, r31	; 0x28
    1836:	ee a1       	ldd	r30, Y+38	; 0x26
    1838:	ff a1       	ldd	r31, Y+39	; 0x27
    183a:	00 80       	ld	r0, Z
    183c:	8e a1       	ldd	r24, Y+38	; 0x26
    183e:	9f a1       	ldd	r25, Y+39	; 0x27
    1840:	01 96       	adiw	r24, 0x01	; 1
    1842:	9f a3       	std	Y+39, r25	; 0x27
    1844:	8e a3       	std	Y+38, r24	; 0x26
    1846:	ec a1       	ldd	r30, Y+36	; 0x24
    1848:	fd a1       	ldd	r31, Y+37	; 0x25
    184a:	00 82       	st	Z, r0
    184c:	8c a1       	ldd	r24, Y+36	; 0x24
    184e:	9d a1       	ldd	r25, Y+37	; 0x25
    1850:	01 96       	adiw	r24, 0x01	; 1
    1852:	9d a3       	std	Y+37, r25	; 0x25
    1854:	8c a3       	std	Y+36, r24	; 0x24
    1856:	98 a5       	ldd	r25, Y+40	; 0x28
    1858:	91 50       	subi	r25, 0x01	; 1
    185a:	98 a7       	std	Y+40, r25	; 0x28
    185c:	e8 a5       	ldd	r30, Y+40	; 0x28
    185e:	ee 23       	and	r30, r30
    1860:	51 f7       	brne	.-44     	; 0x1836 <main+0x7e>

	//initializing used drivers
	Timer1_init(&TIMER1_Configurations);
    1862:	ce 01       	movw	r24, r28
    1864:	49 96       	adiw	r24, 0x19	; 25
    1866:	0e 94 b2 1c 	call	0x3964	; 0x3964 <Timer1_init>
	LCD_init();
    186a:	0e 94 ae 11 	call	0x235c	; 0x235c <LCD_init>
	TWI_init(&TWI_Configurations);
    186e:	ce 01       	movw	r24, r28
    1870:	47 96       	adiw	r24, 0x17	; 23
    1872:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <TWI_init>
	UART_init(&UART_Configurations);
    1876:	ce 01       	movw	r24, r28
    1878:	0f 96       	adiw	r24, 0x0f	; 15
    187a:	0e 94 d5 1d 	call	0x3baa	; 0x3baa <UART_init>
	DcMotor_init();
    187e:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <DcMotor_init>
	Buzzer_init();
    1882:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <Buzzer_init>

	//sending address of the call back function
	Timer1_setCallBack(APP_tickCounter);
    1886:	8d e2       	ldi	r24, 0x2D	; 45
    1888:	9b e0       	ldi	r25, 0x0B	; 11
    188a:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <Timer1_setCallBack>

	while(1){
		//initial values
		g_passFailed=0;
    188e:	10 92 97 01 	sts	0x0197, r1
		g_breachCount=0;
    1892:	10 92 88 01 	sts	0x0188, r1

		LCD_clearScreen();
    1896:	0e 94 fd 1b 	call	0x37fa	; 0x37fa <LCD_clearScreen>
		receiveFirstPass();
    189a:	0e 94 17 07 	call	0xe2e	; 0xe2e <receiveFirstPass>
		receiveSecondPass();
    189e:	0e 94 c0 07 	call	0xf80	; 0xf80 <receiveSecondPass>
		authenticatePass();
    18a2:	0e 94 69 08 	call	0x10d2	; 0x10d2 <authenticatePass>

		/* if the compare was success then proceed the code
		 * if not then ask the user for the passwords again
		 */
		if(bool==SUCCESS){
    18a6:	80 91 98 01 	lds	r24, 0x0198
    18aa:	81 30       	cpi	r24, 0x01	; 1
    18ac:	81 f7       	brne	.-32     	; 0x188e <main+0xd6>
			EEPROM_savePass();//saving passwords in EEPROM Memory after authentication
    18ae:	0e 94 9c 09 	call	0x1338	; 0x1338 <EEPROM_savePass>

			while(1){
				key=UART_recieveByte();//recieving + or -
    18b2:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <UART_recieveByte>
    18b6:	80 93 8a 01 	sts	0x018A, r24
    18ba:	80 e0       	ldi	r24, 0x00	; 0
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	a0 e2       	ldi	r26, 0x20	; 32
    18c0:	b1 e4       	ldi	r27, 0x41	; 65
    18c2:	8b 87       	std	Y+11, r24	; 0x0b
    18c4:	9c 87       	std	Y+12, r25	; 0x0c
    18c6:	ad 87       	std	Y+13, r26	; 0x0d
    18c8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    18cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    18ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    18d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    18d2:	20 e0       	ldi	r18, 0x00	; 0
    18d4:	30 e0       	ldi	r19, 0x00	; 0
    18d6:	4a ef       	ldi	r20, 0xFA	; 250
    18d8:	54 e4       	ldi	r21, 0x44	; 68
    18da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18de:	dc 01       	movw	r26, r24
    18e0:	cb 01       	movw	r24, r22
    18e2:	8f 83       	std	Y+7, r24	; 0x07
    18e4:	98 87       	std	Y+8, r25	; 0x08
    18e6:	a9 87       	std	Y+9, r26	; 0x09
    18e8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18ea:	6f 81       	ldd	r22, Y+7	; 0x07
    18ec:	78 85       	ldd	r23, Y+8	; 0x08
    18ee:	89 85       	ldd	r24, Y+9	; 0x09
    18f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    18f2:	20 e0       	ldi	r18, 0x00	; 0
    18f4:	30 e0       	ldi	r19, 0x00	; 0
    18f6:	40 e8       	ldi	r20, 0x80	; 128
    18f8:	5f e3       	ldi	r21, 0x3F	; 63
    18fa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    18fe:	88 23       	and	r24, r24
    1900:	2c f4       	brge	.+10     	; 0x190c <main+0x154>
		__ticks = 1;
    1902:	81 e0       	ldi	r24, 0x01	; 1
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	9e 83       	std	Y+6, r25	; 0x06
    1908:	8d 83       	std	Y+5, r24	; 0x05
    190a:	3f c0       	rjmp	.+126    	; 0x198a <main+0x1d2>
	else if (__tmp > 65535)
    190c:	6f 81       	ldd	r22, Y+7	; 0x07
    190e:	78 85       	ldd	r23, Y+8	; 0x08
    1910:	89 85       	ldd	r24, Y+9	; 0x09
    1912:	9a 85       	ldd	r25, Y+10	; 0x0a
    1914:	20 e0       	ldi	r18, 0x00	; 0
    1916:	3f ef       	ldi	r19, 0xFF	; 255
    1918:	4f e7       	ldi	r20, 0x7F	; 127
    191a:	57 e4       	ldi	r21, 0x47	; 71
    191c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1920:	18 16       	cp	r1, r24
    1922:	4c f5       	brge	.+82     	; 0x1976 <main+0x1be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1924:	6b 85       	ldd	r22, Y+11	; 0x0b
    1926:	7c 85       	ldd	r23, Y+12	; 0x0c
    1928:	8d 85       	ldd	r24, Y+13	; 0x0d
    192a:	9e 85       	ldd	r25, Y+14	; 0x0e
    192c:	20 e0       	ldi	r18, 0x00	; 0
    192e:	30 e0       	ldi	r19, 0x00	; 0
    1930:	40 e2       	ldi	r20, 0x20	; 32
    1932:	51 e4       	ldi	r21, 0x41	; 65
    1934:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1938:	dc 01       	movw	r26, r24
    193a:	cb 01       	movw	r24, r22
    193c:	bc 01       	movw	r22, r24
    193e:	cd 01       	movw	r24, r26
    1940:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1944:	dc 01       	movw	r26, r24
    1946:	cb 01       	movw	r24, r22
    1948:	9e 83       	std	Y+6, r25	; 0x06
    194a:	8d 83       	std	Y+5, r24	; 0x05
    194c:	0f c0       	rjmp	.+30     	; 0x196c <main+0x1b4>
    194e:	88 ec       	ldi	r24, 0xC8	; 200
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	9c 83       	std	Y+4, r25	; 0x04
    1954:	8b 83       	std	Y+3, r24	; 0x03
    1956:	8b 81       	ldd	r24, Y+3	; 0x03
    1958:	9c 81       	ldd	r25, Y+4	; 0x04
    195a:	01 97       	sbiw	r24, 0x01	; 1
    195c:	f1 f7       	brne	.-4      	; 0x195a <main+0x1a2>
    195e:	9c 83       	std	Y+4, r25	; 0x04
    1960:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1962:	8d 81       	ldd	r24, Y+5	; 0x05
    1964:	9e 81       	ldd	r25, Y+6	; 0x06
    1966:	01 97       	sbiw	r24, 0x01	; 1
    1968:	9e 83       	std	Y+6, r25	; 0x06
    196a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    196c:	8d 81       	ldd	r24, Y+5	; 0x05
    196e:	9e 81       	ldd	r25, Y+6	; 0x06
    1970:	00 97       	sbiw	r24, 0x00	; 0
    1972:	69 f7       	brne	.-38     	; 0x194e <main+0x196>
    1974:	14 c0       	rjmp	.+40     	; 0x199e <main+0x1e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1976:	6f 81       	ldd	r22, Y+7	; 0x07
    1978:	78 85       	ldd	r23, Y+8	; 0x08
    197a:	89 85       	ldd	r24, Y+9	; 0x09
    197c:	9a 85       	ldd	r25, Y+10	; 0x0a
    197e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1982:	dc 01       	movw	r26, r24
    1984:	cb 01       	movw	r24, r22
    1986:	9e 83       	std	Y+6, r25	; 0x06
    1988:	8d 83       	std	Y+5, r24	; 0x05
    198a:	8d 81       	ldd	r24, Y+5	; 0x05
    198c:	9e 81       	ldd	r25, Y+6	; 0x06
    198e:	9a 83       	std	Y+2, r25	; 0x02
    1990:	89 83       	std	Y+1, r24	; 0x01
    1992:	89 81       	ldd	r24, Y+1	; 0x01
    1994:	9a 81       	ldd	r25, Y+2	; 0x02
    1996:	01 97       	sbiw	r24, 0x01	; 1
    1998:	f1 f7       	brne	.-4      	; 0x1996 <main+0x1de>
    199a:	9a 83       	std	Y+2, r25	; 0x02
    199c:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(10);
				g_count=0;
    199e:	10 92 87 01 	sts	0x0187, r1
				if(key == '-'){
    19a2:	80 91 8a 01 	lds	r24, 0x018A
    19a6:	8d 32       	cpi	r24, 0x2D	; 45
    19a8:	e9 f4       	brne	.+58     	; 0x19e4 <main+0x22c>

					while(1){
						//checking for security breach
						securityBreach();
    19aa:	0e 94 39 0b 	call	0x1672	; 0x1672 <securityBreach>


						if(g_passFailed==SECURITY_BREACH &&	g_breachCount==3){
    19ae:	80 91 97 01 	lds	r24, 0x0197
    19b2:	88 23       	and	r24, r24
    19b4:	89 f4       	brne	.+34     	; 0x19d8 <main+0x220>
    19b6:	80 91 88 01 	lds	r24, 0x0188
    19ba:	83 30       	cpi	r24, 0x03	; 3
    19bc:	69 f4       	brne	.+26     	; 0x19d8 <main+0x220>
							//buzzer on
							Buzzer_on();
    19be:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <Buzzer_on>

							g_tick=0;
    19c2:	10 92 86 01 	sts	0x0186, r1
							while(g_tick<60);
    19c6:	80 91 86 01 	lds	r24, 0x0186
    19ca:	8c 33       	cpi	r24, 0x3C	; 60
    19cc:	e0 f3       	brcs	.-8      	; 0x19c6 <main+0x20e>
							g_tick=0;
    19ce:	10 92 86 01 	sts	0x0186, r1
							Buzzer_off();
    19d2:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <Buzzer_off>
    19d6:	4a c0       	rjmp	.+148    	; 0x1a6c <main+0x2b4>
							break;
						}
						else if(g_passFailed==NO_SECURITY_BREACH){
    19d8:	80 91 97 01 	lds	r24, 0x0197
    19dc:	81 30       	cpi	r24, 0x01	; 1
    19de:	09 f4       	brne	.+2      	; 0x19e2 <main+0x22a>
    19e0:	45 c0       	rjmp	.+138    	; 0x1a6c <main+0x2b4>
    19e2:	e3 cf       	rjmp	.-58     	; 0x19aa <main+0x1f2>

					}

				}

				else if(key == '+'){
    19e4:	80 91 8a 01 	lds	r24, 0x018A
    19e8:	8b 32       	cpi	r24, 0x2B	; 43
    19ea:	09 f0       	breq	.+2      	; 0x19ee <main+0x236>
    19ec:	3f c0       	rjmp	.+126    	; 0x1a6c <main+0x2b4>

					while(1){
						//checking for security breach
						securityBreach();
    19ee:	0e 94 39 0b 	call	0x1672	; 0x1672 <securityBreach>


						if(g_passFailed==SECURITY_BREACH &&	g_breachCount==3){
    19f2:	80 91 97 01 	lds	r24, 0x0197
    19f6:	88 23       	and	r24, r24
    19f8:	89 f4       	brne	.+34     	; 0x1a1c <main+0x264>
    19fa:	80 91 88 01 	lds	r24, 0x0188
    19fe:	83 30       	cpi	r24, 0x03	; 3
    1a00:	69 f4       	brne	.+26     	; 0x1a1c <main+0x264>
							//buzzer on
							Buzzer_on();
    1a02:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <Buzzer_on>
							g_tick=0;
    1a06:	10 92 86 01 	sts	0x0186, r1
							while(g_tick<60);
    1a0a:	80 91 86 01 	lds	r24, 0x0186
    1a0e:	8c 33       	cpi	r24, 0x3C	; 60
    1a10:	e0 f3       	brcs	.-8      	; 0x1a0a <main+0x252>
							g_tick=0;
    1a12:	10 92 86 01 	sts	0x0186, r1
							Buzzer_off();
    1a16:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <Buzzer_off>
    1a1a:	28 c0       	rjmp	.+80     	; 0x1a6c <main+0x2b4>
							break;
						}
						else if(g_passFailed==NO_SECURITY_BREACH){
    1a1c:	80 91 97 01 	lds	r24, 0x0197
    1a20:	81 30       	cpi	r24, 0x01	; 1
    1a22:	29 f7       	brne	.-54     	; 0x19ee <main+0x236>
							g_tick=0;
    1a24:	10 92 86 01 	sts	0x0186, r1
							DcMotor_Rotate(CW,50);
    1a28:	80 e0       	ldi	r24, 0x00	; 0
    1a2a:	62 e3       	ldi	r22, 0x32	; 50
    1a2c:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <DcMotor_Rotate>
							while(g_tick<15);
    1a30:	80 91 86 01 	lds	r24, 0x0186
    1a34:	8f 30       	cpi	r24, 0x0F	; 15
    1a36:	e0 f3       	brcs	.-8      	; 0x1a30 <main+0x278>
							g_tick=0;
    1a38:	10 92 86 01 	sts	0x0186, r1
							DcMotor_Rotate(STOP,0);
    1a3c:	82 e0       	ldi	r24, 0x02	; 2
    1a3e:	60 e0       	ldi	r22, 0x00	; 0
    1a40:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <DcMotor_Rotate>
							while(g_tick<3);
    1a44:	80 91 86 01 	lds	r24, 0x0186
    1a48:	83 30       	cpi	r24, 0x03	; 3
    1a4a:	e0 f3       	brcs	.-8      	; 0x1a44 <main+0x28c>
							g_tick=0;
    1a4c:	10 92 86 01 	sts	0x0186, r1
							DcMotor_Rotate(ACW,50);
    1a50:	81 e0       	ldi	r24, 0x01	; 1
    1a52:	62 e3       	ldi	r22, 0x32	; 50
    1a54:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <DcMotor_Rotate>
							while(g_tick<15);
    1a58:	80 91 86 01 	lds	r24, 0x0186
    1a5c:	8f 30       	cpi	r24, 0x0F	; 15
    1a5e:	e0 f3       	brcs	.-8      	; 0x1a58 <main+0x2a0>
							DcMotor_Rotate(STOP,0);
    1a60:	82 e0       	ldi	r24, 0x02	; 2
    1a62:	60 e0       	ldi	r22, 0x00	; 0
    1a64:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <DcMotor_Rotate>
							g_tick=0;
    1a68:	10 92 86 01 	sts	0x0186, r1
							break;
						}
					}
				}
				if(g_passFailed==NO_SECURITY_BREACH && key=='-'){
    1a6c:	80 91 97 01 	lds	r24, 0x0197
    1a70:	81 30       	cpi	r24, 0x01	; 1
    1a72:	09 f0       	breq	.+2      	; 0x1a76 <main+0x2be>
    1a74:	1e cf       	rjmp	.-452    	; 0x18b2 <main+0xfa>
    1a76:	80 91 8a 01 	lds	r24, 0x018A
    1a7a:	8d 32       	cpi	r24, 0x2D	; 45
    1a7c:	09 f4       	brne	.+2      	; 0x1a80 <main+0x2c8>
    1a7e:	07 cf       	rjmp	.-498    	; 0x188e <main+0xd6>
    1a80:	18 cf       	rjmp	.-464    	; 0x18b2 <main+0xfa>

00001a82 <Buzzer_init>:
#include "buzzer.h"
#include <avr/io.h>



void Buzzer_init(void){
    1a82:	df 93       	push	r29
    1a84:	cf 93       	push	r28
    1a86:	cd b7       	in	r28, 0x3d	; 61
    1a88:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT_ID,BUZZER_PIN_ID,PIN_OUTPUT);
    1a8a:	82 e0       	ldi	r24, 0x02	; 2
    1a8c:	62 e0       	ldi	r22, 0x02	; 2
    1a8e:	41 e0       	ldi	r20, 0x01	; 1
    1a90:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <GPIO_setupPinDirection>
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_LOW);
    1a94:	82 e0       	ldi	r24, 0x02	; 2
    1a96:	62 e0       	ldi	r22, 0x02	; 2
    1a98:	40 e0       	ldi	r20, 0x00	; 0
    1a9a:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <GPIO_writePin>
}
    1a9e:	cf 91       	pop	r28
    1aa0:	df 91       	pop	r29
    1aa2:	08 95       	ret

00001aa4 <Buzzer_on>:

void Buzzer_on(void){
    1aa4:	df 93       	push	r29
    1aa6:	cf 93       	push	r28
    1aa8:	cd b7       	in	r28, 0x3d	; 61
    1aaa:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_HIGH);
    1aac:	82 e0       	ldi	r24, 0x02	; 2
    1aae:	62 e0       	ldi	r22, 0x02	; 2
    1ab0:	41 e0       	ldi	r20, 0x01	; 1
    1ab2:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <GPIO_writePin>
}
    1ab6:	cf 91       	pop	r28
    1ab8:	df 91       	pop	r29
    1aba:	08 95       	ret

00001abc <Buzzer_off>:

void Buzzer_off(void){
    1abc:	df 93       	push	r29
    1abe:	cf 93       	push	r28
    1ac0:	cd b7       	in	r28, 0x3d	; 61
    1ac2:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_LOW);
    1ac4:	82 e0       	ldi	r24, 0x02	; 2
    1ac6:	62 e0       	ldi	r22, 0x02	; 2
    1ac8:	40 e0       	ldi	r20, 0x00	; 0
    1aca:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <GPIO_writePin>
}
    1ace:	cf 91       	pop	r28
    1ad0:	df 91       	pop	r29
    1ad2:	08 95       	ret

00001ad4 <DcMotor_init>:
#include "common_macros.h"
#include "pwm.h"



void DcMotor_init(void){
    1ad4:	df 93       	push	r29
    1ad6:	cf 93       	push	r28
    1ad8:	cd b7       	in	r28, 0x3d	; 61
    1ada:	de b7       	in	r29, 0x3e	; 62
	/*Setup the direction for the two motor pins through gpio driver*/
	GPIO_setupPinDirection(MOTOR_PORT_ID, MOTOR_FPIN_ID, PIN_OUTPUT);
    1adc:	81 e0       	ldi	r24, 0x01	; 1
    1ade:	60 e0       	ldi	r22, 0x00	; 0
    1ae0:	41 e0       	ldi	r20, 0x01	; 1
    1ae2:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(MOTOR_PORT_ID, MOTOR_SPIN_ID, PIN_OUTPUT);
    1ae6:	81 e0       	ldi	r24, 0x01	; 1
    1ae8:	61 e0       	ldi	r22, 0x01	; 1
    1aea:	41 e0       	ldi	r20, 0x01	; 1
    1aec:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(MOTOR_PORT_ID, MOTOR_ENABLE_ID, PIN_OUTPUT);
    1af0:	81 e0       	ldi	r24, 0x01	; 1
    1af2:	63 e0       	ldi	r22, 0x03	; 3
    1af4:	41 e0       	ldi	r20, 0x01	; 1
    1af6:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <GPIO_setupPinDirection>
	/*stopping the DC Motor at the beginning through gpio driver*/
	GPIO_writePin(MOTOR_PORT_ID, MOTOR_FPIN_ID, LOGIC_LOW);
    1afa:	81 e0       	ldi	r24, 0x01	; 1
    1afc:	60 e0       	ldi	r22, 0x00	; 0
    1afe:	40 e0       	ldi	r20, 0x00	; 0
    1b00:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <GPIO_writePin>
	GPIO_writePin(MOTOR_PORT_ID, MOTOR_SPIN_ID, LOGIC_LOW);
    1b04:	81 e0       	ldi	r24, 0x01	; 1
    1b06:	61 e0       	ldi	r22, 0x01	; 1
    1b08:	40 e0       	ldi	r20, 0x00	; 0
    1b0a:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <GPIO_writePin>
}
    1b0e:	cf 91       	pop	r28
    1b10:	df 91       	pop	r29
    1b12:	08 95       	ret

00001b14 <DcMotor_Rotate>:

void DcMotor_Rotate(DcMotor_State state,uint8 speed){
    1b14:	df 93       	push	r29
    1b16:	cf 93       	push	r28
    1b18:	00 d0       	rcall	.+0      	; 0x1b1a <DcMotor_Rotate+0x6>
    1b1a:	00 d0       	rcall	.+0      	; 0x1b1c <DcMotor_Rotate+0x8>
    1b1c:	cd b7       	in	r28, 0x3d	; 61
    1b1e:	de b7       	in	r29, 0x3e	; 62
    1b20:	89 83       	std	Y+1, r24	; 0x01
    1b22:	6a 83       	std	Y+2, r22	; 0x02
	switch(state){
    1b24:	89 81       	ldd	r24, Y+1	; 0x01
    1b26:	28 2f       	mov	r18, r24
    1b28:	30 e0       	ldi	r19, 0x00	; 0
    1b2a:	3c 83       	std	Y+4, r19	; 0x04
    1b2c:	2b 83       	std	Y+3, r18	; 0x03
    1b2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b30:	9c 81       	ldd	r25, Y+4	; 0x04
    1b32:	81 30       	cpi	r24, 0x01	; 1
    1b34:	91 05       	cpc	r25, r1
    1b36:	a1 f0       	breq	.+40     	; 0x1b60 <DcMotor_Rotate+0x4c>
    1b38:	2b 81       	ldd	r18, Y+3	; 0x03
    1b3a:	3c 81       	ldd	r19, Y+4	; 0x04
    1b3c:	22 30       	cpi	r18, 0x02	; 2
    1b3e:	31 05       	cpc	r19, r1
    1b40:	d1 f0       	breq	.+52     	; 0x1b76 <DcMotor_Rotate+0x62>
    1b42:	8b 81       	ldd	r24, Y+3	; 0x03
    1b44:	9c 81       	ldd	r25, Y+4	; 0x04
    1b46:	00 97       	sbiw	r24, 0x00	; 0
    1b48:	01 f5       	brne	.+64     	; 0x1b8a <DcMotor_Rotate+0x76>
	case CW:
		/*
		 *Rotating the dc motor CW
		 */
		GPIO_writePin(MOTOR_PORT_ID, MOTOR_FPIN_ID, LOGIC_HIGH);
    1b4a:	81 e0       	ldi	r24, 0x01	; 1
    1b4c:	60 e0       	ldi	r22, 0x00	; 0
    1b4e:	41 e0       	ldi	r20, 0x01	; 1
    1b50:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <GPIO_writePin>
		GPIO_writePin(MOTOR_PORT_ID, MOTOR_SPIN_ID, LOGIC_LOW);
    1b54:	81 e0       	ldi	r24, 0x01	; 1
    1b56:	61 e0       	ldi	r22, 0x01	; 1
    1b58:	40 e0       	ldi	r20, 0x00	; 0
    1b5a:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <GPIO_writePin>
    1b5e:	15 c0       	rjmp	.+42     	; 0x1b8a <DcMotor_Rotate+0x76>
		break;
	case ACW:
		/*
		 *Rotating the dc motor ACW
		 */
		GPIO_writePin(MOTOR_PORT_ID, MOTOR_FPIN_ID, LOGIC_LOW);
    1b60:	81 e0       	ldi	r24, 0x01	; 1
    1b62:	60 e0       	ldi	r22, 0x00	; 0
    1b64:	40 e0       	ldi	r20, 0x00	; 0
    1b66:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <GPIO_writePin>
		GPIO_writePin(MOTOR_PORT_ID, MOTOR_SPIN_ID, LOGIC_HIGH);
    1b6a:	81 e0       	ldi	r24, 0x01	; 1
    1b6c:	61 e0       	ldi	r22, 0x01	; 1
    1b6e:	41 e0       	ldi	r20, 0x01	; 1
    1b70:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <GPIO_writePin>
    1b74:	0a c0       	rjmp	.+20     	; 0x1b8a <DcMotor_Rotate+0x76>
		break;
	case STOP:
		/*
		 *Stopping the dc motor
		*/
		GPIO_writePin(MOTOR_PORT_ID, MOTOR_FPIN_ID, LOGIC_LOW);
    1b76:	81 e0       	ldi	r24, 0x01	; 1
    1b78:	60 e0       	ldi	r22, 0x00	; 0
    1b7a:	40 e0       	ldi	r20, 0x00	; 0
    1b7c:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <GPIO_writePin>
		GPIO_writePin(MOTOR_PORT_ID, MOTOR_SPIN_ID, LOGIC_LOW);
    1b80:	81 e0       	ldi	r24, 0x01	; 1
    1b82:	61 e0       	ldi	r22, 0x01	; 1
    1b84:	40 e0       	ldi	r20, 0x00	; 0
    1b86:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <GPIO_writePin>
		break;
	}
	PWM_Timer0_Start(speed);
    1b8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b8c:	0e 94 07 1c 	call	0x380e	; 0x380e <PWM_Timer0_Start>
}
    1b90:	0f 90       	pop	r0
    1b92:	0f 90       	pop	r0
    1b94:	0f 90       	pop	r0
    1b96:	0f 90       	pop	r0
    1b98:	cf 91       	pop	r28
    1b9a:	df 91       	pop	r29
    1b9c:	08 95       	ret

00001b9e <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    1b9e:	df 93       	push	r29
    1ba0:	cf 93       	push	r28
    1ba2:	00 d0       	rcall	.+0      	; 0x1ba4 <EEPROM_writeByte+0x6>
    1ba4:	00 d0       	rcall	.+0      	; 0x1ba6 <EEPROM_writeByte+0x8>
    1ba6:	cd b7       	in	r28, 0x3d	; 61
    1ba8:	de b7       	in	r29, 0x3e	; 62
    1baa:	9a 83       	std	Y+2, r25	; 0x02
    1bac:	89 83       	std	Y+1, r24	; 0x01
    1bae:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1bb0:	0e 94 6e 1d 	call	0x3adc	; 0x3adc <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1bb4:	0e 94 c6 1d 	call	0x3b8c	; 0x3b8c <TWI_getStatus>
    1bb8:	88 30       	cpi	r24, 0x08	; 8
    1bba:	11 f0       	breq	.+4      	; 0x1bc0 <EEPROM_writeByte+0x22>
        return ERROR;
    1bbc:	1c 82       	std	Y+4, r1	; 0x04
    1bbe:	28 c0       	rjmp	.+80     	; 0x1c10 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    1bc0:	89 81       	ldd	r24, Y+1	; 0x01
    1bc2:	9a 81       	ldd	r25, Y+2	; 0x02
    1bc4:	80 70       	andi	r24, 0x00	; 0
    1bc6:	97 70       	andi	r25, 0x07	; 7
    1bc8:	88 0f       	add	r24, r24
    1bca:	89 2f       	mov	r24, r25
    1bcc:	88 1f       	adc	r24, r24
    1bce:	99 0b       	sbc	r25, r25
    1bd0:	91 95       	neg	r25
    1bd2:	80 6a       	ori	r24, 0xA0	; 160
    1bd4:	0e 94 89 1d 	call	0x3b12	; 0x3b12 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1bd8:	0e 94 c6 1d 	call	0x3b8c	; 0x3b8c <TWI_getStatus>
    1bdc:	88 31       	cpi	r24, 0x18	; 24
    1bde:	11 f0       	breq	.+4      	; 0x1be4 <EEPROM_writeByte+0x46>
        return ERROR; 
    1be0:	1c 82       	std	Y+4, r1	; 0x04
    1be2:	16 c0       	rjmp	.+44     	; 0x1c10 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1be4:	89 81       	ldd	r24, Y+1	; 0x01
    1be6:	0e 94 89 1d 	call	0x3b12	; 0x3b12 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1bea:	0e 94 c6 1d 	call	0x3b8c	; 0x3b8c <TWI_getStatus>
    1bee:	88 32       	cpi	r24, 0x28	; 40
    1bf0:	11 f0       	breq	.+4      	; 0x1bf6 <EEPROM_writeByte+0x58>
        return ERROR;
    1bf2:	1c 82       	std	Y+4, r1	; 0x04
    1bf4:	0d c0       	rjmp	.+26     	; 0x1c10 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    1bf6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf8:	0e 94 89 1d 	call	0x3b12	; 0x3b12 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1bfc:	0e 94 c6 1d 	call	0x3b8c	; 0x3b8c <TWI_getStatus>
    1c00:	88 32       	cpi	r24, 0x28	; 40
    1c02:	11 f0       	breq	.+4      	; 0x1c08 <EEPROM_writeByte+0x6a>
        return ERROR;
    1c04:	1c 82       	std	Y+4, r1	; 0x04
    1c06:	04 c0       	rjmp	.+8      	; 0x1c10 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    1c08:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <TWI_stop>
	
    return SUCCESS;
    1c0c:	81 e0       	ldi	r24, 0x01	; 1
    1c0e:	8c 83       	std	Y+4, r24	; 0x04
    1c10:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1c12:	0f 90       	pop	r0
    1c14:	0f 90       	pop	r0
    1c16:	0f 90       	pop	r0
    1c18:	0f 90       	pop	r0
    1c1a:	cf 91       	pop	r28
    1c1c:	df 91       	pop	r29
    1c1e:	08 95       	ret

00001c20 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    1c20:	df 93       	push	r29
    1c22:	cf 93       	push	r28
    1c24:	00 d0       	rcall	.+0      	; 0x1c26 <EEPROM_readByte+0x6>
    1c26:	00 d0       	rcall	.+0      	; 0x1c28 <EEPROM_readByte+0x8>
    1c28:	0f 92       	push	r0
    1c2a:	cd b7       	in	r28, 0x3d	; 61
    1c2c:	de b7       	in	r29, 0x3e	; 62
    1c2e:	9a 83       	std	Y+2, r25	; 0x02
    1c30:	89 83       	std	Y+1, r24	; 0x01
    1c32:	7c 83       	std	Y+4, r23	; 0x04
    1c34:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1c36:	0e 94 6e 1d 	call	0x3adc	; 0x3adc <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1c3a:	0e 94 c6 1d 	call	0x3b8c	; 0x3b8c <TWI_getStatus>
    1c3e:	88 30       	cpi	r24, 0x08	; 8
    1c40:	11 f0       	breq	.+4      	; 0x1c46 <EEPROM_readByte+0x26>
        return ERROR;
    1c42:	1d 82       	std	Y+5, r1	; 0x05
    1c44:	44 c0       	rjmp	.+136    	; 0x1cce <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    1c46:	89 81       	ldd	r24, Y+1	; 0x01
    1c48:	9a 81       	ldd	r25, Y+2	; 0x02
    1c4a:	80 70       	andi	r24, 0x00	; 0
    1c4c:	97 70       	andi	r25, 0x07	; 7
    1c4e:	88 0f       	add	r24, r24
    1c50:	89 2f       	mov	r24, r25
    1c52:	88 1f       	adc	r24, r24
    1c54:	99 0b       	sbc	r25, r25
    1c56:	91 95       	neg	r25
    1c58:	80 6a       	ori	r24, 0xA0	; 160
    1c5a:	0e 94 89 1d 	call	0x3b12	; 0x3b12 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1c5e:	0e 94 c6 1d 	call	0x3b8c	; 0x3b8c <TWI_getStatus>
    1c62:	88 31       	cpi	r24, 0x18	; 24
    1c64:	11 f0       	breq	.+4      	; 0x1c6a <EEPROM_readByte+0x4a>
        return ERROR;
    1c66:	1d 82       	std	Y+5, r1	; 0x05
    1c68:	32 c0       	rjmp	.+100    	; 0x1cce <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1c6a:	89 81       	ldd	r24, Y+1	; 0x01
    1c6c:	0e 94 89 1d 	call	0x3b12	; 0x3b12 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1c70:	0e 94 c6 1d 	call	0x3b8c	; 0x3b8c <TWI_getStatus>
    1c74:	88 32       	cpi	r24, 0x28	; 40
    1c76:	11 f0       	breq	.+4      	; 0x1c7c <EEPROM_readByte+0x5c>
        return ERROR;
    1c78:	1d 82       	std	Y+5, r1	; 0x05
    1c7a:	29 c0       	rjmp	.+82     	; 0x1cce <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    1c7c:	0e 94 6e 1d 	call	0x3adc	; 0x3adc <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    1c80:	0e 94 c6 1d 	call	0x3b8c	; 0x3b8c <TWI_getStatus>
    1c84:	80 31       	cpi	r24, 0x10	; 16
    1c86:	11 f0       	breq	.+4      	; 0x1c8c <EEPROM_readByte+0x6c>
        return ERROR;
    1c88:	1d 82       	std	Y+5, r1	; 0x05
    1c8a:	21 c0       	rjmp	.+66     	; 0x1cce <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    1c8c:	89 81       	ldd	r24, Y+1	; 0x01
    1c8e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c90:	80 70       	andi	r24, 0x00	; 0
    1c92:	97 70       	andi	r25, 0x07	; 7
    1c94:	88 0f       	add	r24, r24
    1c96:	89 2f       	mov	r24, r25
    1c98:	88 1f       	adc	r24, r24
    1c9a:	99 0b       	sbc	r25, r25
    1c9c:	91 95       	neg	r25
    1c9e:	81 6a       	ori	r24, 0xA1	; 161
    1ca0:	0e 94 89 1d 	call	0x3b12	; 0x3b12 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    1ca4:	0e 94 c6 1d 	call	0x3b8c	; 0x3b8c <TWI_getStatus>
    1ca8:	80 34       	cpi	r24, 0x40	; 64
    1caa:	11 f0       	breq	.+4      	; 0x1cb0 <EEPROM_readByte+0x90>
        return ERROR;
    1cac:	1d 82       	std	Y+5, r1	; 0x05
    1cae:	0f c0       	rjmp	.+30     	; 0x1cce <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    1cb0:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <TWI_readByteWithNACK>
    1cb4:	eb 81       	ldd	r30, Y+3	; 0x03
    1cb6:	fc 81       	ldd	r31, Y+4	; 0x04
    1cb8:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    1cba:	0e 94 c6 1d 	call	0x3b8c	; 0x3b8c <TWI_getStatus>
    1cbe:	88 35       	cpi	r24, 0x58	; 88
    1cc0:	11 f0       	breq	.+4      	; 0x1cc6 <EEPROM_readByte+0xa6>
        return ERROR;
    1cc2:	1d 82       	std	Y+5, r1	; 0x05
    1cc4:	04 c0       	rjmp	.+8      	; 0x1cce <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    1cc6:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <TWI_stop>

    return SUCCESS;
    1cca:	81 e0       	ldi	r24, 0x01	; 1
    1ccc:	8d 83       	std	Y+5, r24	; 0x05
    1cce:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1cd0:	0f 90       	pop	r0
    1cd2:	0f 90       	pop	r0
    1cd4:	0f 90       	pop	r0
    1cd6:	0f 90       	pop	r0
    1cd8:	0f 90       	pop	r0
    1cda:	cf 91       	pop	r28
    1cdc:	df 91       	pop	r29
    1cde:	08 95       	ret

00001ce0 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1ce0:	df 93       	push	r29
    1ce2:	cf 93       	push	r28
    1ce4:	00 d0       	rcall	.+0      	; 0x1ce6 <GPIO_setupPinDirection+0x6>
    1ce6:	00 d0       	rcall	.+0      	; 0x1ce8 <GPIO_setupPinDirection+0x8>
    1ce8:	0f 92       	push	r0
    1cea:	cd b7       	in	r28, 0x3d	; 61
    1cec:	de b7       	in	r29, 0x3e	; 62
    1cee:	89 83       	std	Y+1, r24	; 0x01
    1cf0:	6a 83       	std	Y+2, r22	; 0x02
    1cf2:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1cf4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf6:	88 30       	cpi	r24, 0x08	; 8
    1cf8:	08 f0       	brcs	.+2      	; 0x1cfc <GPIO_setupPinDirection+0x1c>
    1cfa:	d5 c0       	rjmp	.+426    	; 0x1ea6 <GPIO_setupPinDirection+0x1c6>
    1cfc:	89 81       	ldd	r24, Y+1	; 0x01
    1cfe:	84 30       	cpi	r24, 0x04	; 4
    1d00:	08 f0       	brcs	.+2      	; 0x1d04 <GPIO_setupPinDirection+0x24>
    1d02:	d1 c0       	rjmp	.+418    	; 0x1ea6 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1d04:	89 81       	ldd	r24, Y+1	; 0x01
    1d06:	28 2f       	mov	r18, r24
    1d08:	30 e0       	ldi	r19, 0x00	; 0
    1d0a:	3d 83       	std	Y+5, r19	; 0x05
    1d0c:	2c 83       	std	Y+4, r18	; 0x04
    1d0e:	8c 81       	ldd	r24, Y+4	; 0x04
    1d10:	9d 81       	ldd	r25, Y+5	; 0x05
    1d12:	81 30       	cpi	r24, 0x01	; 1
    1d14:	91 05       	cpc	r25, r1
    1d16:	09 f4       	brne	.+2      	; 0x1d1a <GPIO_setupPinDirection+0x3a>
    1d18:	43 c0       	rjmp	.+134    	; 0x1da0 <GPIO_setupPinDirection+0xc0>
    1d1a:	2c 81       	ldd	r18, Y+4	; 0x04
    1d1c:	3d 81       	ldd	r19, Y+5	; 0x05
    1d1e:	22 30       	cpi	r18, 0x02	; 2
    1d20:	31 05       	cpc	r19, r1
    1d22:	2c f4       	brge	.+10     	; 0x1d2e <GPIO_setupPinDirection+0x4e>
    1d24:	8c 81       	ldd	r24, Y+4	; 0x04
    1d26:	9d 81       	ldd	r25, Y+5	; 0x05
    1d28:	00 97       	sbiw	r24, 0x00	; 0
    1d2a:	71 f0       	breq	.+28     	; 0x1d48 <GPIO_setupPinDirection+0x68>
    1d2c:	bc c0       	rjmp	.+376    	; 0x1ea6 <GPIO_setupPinDirection+0x1c6>
    1d2e:	2c 81       	ldd	r18, Y+4	; 0x04
    1d30:	3d 81       	ldd	r19, Y+5	; 0x05
    1d32:	22 30       	cpi	r18, 0x02	; 2
    1d34:	31 05       	cpc	r19, r1
    1d36:	09 f4       	brne	.+2      	; 0x1d3a <GPIO_setupPinDirection+0x5a>
    1d38:	5f c0       	rjmp	.+190    	; 0x1df8 <GPIO_setupPinDirection+0x118>
    1d3a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d3c:	9d 81       	ldd	r25, Y+5	; 0x05
    1d3e:	83 30       	cpi	r24, 0x03	; 3
    1d40:	91 05       	cpc	r25, r1
    1d42:	09 f4       	brne	.+2      	; 0x1d46 <GPIO_setupPinDirection+0x66>
    1d44:	85 c0       	rjmp	.+266    	; 0x1e50 <GPIO_setupPinDirection+0x170>
    1d46:	af c0       	rjmp	.+350    	; 0x1ea6 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1d48:	8b 81       	ldd	r24, Y+3	; 0x03
    1d4a:	81 30       	cpi	r24, 0x01	; 1
    1d4c:	a1 f4       	brne	.+40     	; 0x1d76 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1d4e:	aa e3       	ldi	r26, 0x3A	; 58
    1d50:	b0 e0       	ldi	r27, 0x00	; 0
    1d52:	ea e3       	ldi	r30, 0x3A	; 58
    1d54:	f0 e0       	ldi	r31, 0x00	; 0
    1d56:	80 81       	ld	r24, Z
    1d58:	48 2f       	mov	r20, r24
    1d5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d5c:	28 2f       	mov	r18, r24
    1d5e:	30 e0       	ldi	r19, 0x00	; 0
    1d60:	81 e0       	ldi	r24, 0x01	; 1
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	02 2e       	mov	r0, r18
    1d66:	02 c0       	rjmp	.+4      	; 0x1d6c <GPIO_setupPinDirection+0x8c>
    1d68:	88 0f       	add	r24, r24
    1d6a:	99 1f       	adc	r25, r25
    1d6c:	0a 94       	dec	r0
    1d6e:	e2 f7       	brpl	.-8      	; 0x1d68 <GPIO_setupPinDirection+0x88>
    1d70:	84 2b       	or	r24, r20
    1d72:	8c 93       	st	X, r24
    1d74:	98 c0       	rjmp	.+304    	; 0x1ea6 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1d76:	aa e3       	ldi	r26, 0x3A	; 58
    1d78:	b0 e0       	ldi	r27, 0x00	; 0
    1d7a:	ea e3       	ldi	r30, 0x3A	; 58
    1d7c:	f0 e0       	ldi	r31, 0x00	; 0
    1d7e:	80 81       	ld	r24, Z
    1d80:	48 2f       	mov	r20, r24
    1d82:	8a 81       	ldd	r24, Y+2	; 0x02
    1d84:	28 2f       	mov	r18, r24
    1d86:	30 e0       	ldi	r19, 0x00	; 0
    1d88:	81 e0       	ldi	r24, 0x01	; 1
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	02 2e       	mov	r0, r18
    1d8e:	02 c0       	rjmp	.+4      	; 0x1d94 <GPIO_setupPinDirection+0xb4>
    1d90:	88 0f       	add	r24, r24
    1d92:	99 1f       	adc	r25, r25
    1d94:	0a 94       	dec	r0
    1d96:	e2 f7       	brpl	.-8      	; 0x1d90 <GPIO_setupPinDirection+0xb0>
    1d98:	80 95       	com	r24
    1d9a:	84 23       	and	r24, r20
    1d9c:	8c 93       	st	X, r24
    1d9e:	83 c0       	rjmp	.+262    	; 0x1ea6 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1da0:	8b 81       	ldd	r24, Y+3	; 0x03
    1da2:	81 30       	cpi	r24, 0x01	; 1
    1da4:	a1 f4       	brne	.+40     	; 0x1dce <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1da6:	a7 e3       	ldi	r26, 0x37	; 55
    1da8:	b0 e0       	ldi	r27, 0x00	; 0
    1daa:	e7 e3       	ldi	r30, 0x37	; 55
    1dac:	f0 e0       	ldi	r31, 0x00	; 0
    1dae:	80 81       	ld	r24, Z
    1db0:	48 2f       	mov	r20, r24
    1db2:	8a 81       	ldd	r24, Y+2	; 0x02
    1db4:	28 2f       	mov	r18, r24
    1db6:	30 e0       	ldi	r19, 0x00	; 0
    1db8:	81 e0       	ldi	r24, 0x01	; 1
    1dba:	90 e0       	ldi	r25, 0x00	; 0
    1dbc:	02 2e       	mov	r0, r18
    1dbe:	02 c0       	rjmp	.+4      	; 0x1dc4 <GPIO_setupPinDirection+0xe4>
    1dc0:	88 0f       	add	r24, r24
    1dc2:	99 1f       	adc	r25, r25
    1dc4:	0a 94       	dec	r0
    1dc6:	e2 f7       	brpl	.-8      	; 0x1dc0 <GPIO_setupPinDirection+0xe0>
    1dc8:	84 2b       	or	r24, r20
    1dca:	8c 93       	st	X, r24
    1dcc:	6c c0       	rjmp	.+216    	; 0x1ea6 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1dce:	a7 e3       	ldi	r26, 0x37	; 55
    1dd0:	b0 e0       	ldi	r27, 0x00	; 0
    1dd2:	e7 e3       	ldi	r30, 0x37	; 55
    1dd4:	f0 e0       	ldi	r31, 0x00	; 0
    1dd6:	80 81       	ld	r24, Z
    1dd8:	48 2f       	mov	r20, r24
    1dda:	8a 81       	ldd	r24, Y+2	; 0x02
    1ddc:	28 2f       	mov	r18, r24
    1dde:	30 e0       	ldi	r19, 0x00	; 0
    1de0:	81 e0       	ldi	r24, 0x01	; 1
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	02 2e       	mov	r0, r18
    1de6:	02 c0       	rjmp	.+4      	; 0x1dec <GPIO_setupPinDirection+0x10c>
    1de8:	88 0f       	add	r24, r24
    1dea:	99 1f       	adc	r25, r25
    1dec:	0a 94       	dec	r0
    1dee:	e2 f7       	brpl	.-8      	; 0x1de8 <GPIO_setupPinDirection+0x108>
    1df0:	80 95       	com	r24
    1df2:	84 23       	and	r24, r20
    1df4:	8c 93       	st	X, r24
    1df6:	57 c0       	rjmp	.+174    	; 0x1ea6 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1df8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfa:	81 30       	cpi	r24, 0x01	; 1
    1dfc:	a1 f4       	brne	.+40     	; 0x1e26 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1dfe:	a4 e3       	ldi	r26, 0x34	; 52
    1e00:	b0 e0       	ldi	r27, 0x00	; 0
    1e02:	e4 e3       	ldi	r30, 0x34	; 52
    1e04:	f0 e0       	ldi	r31, 0x00	; 0
    1e06:	80 81       	ld	r24, Z
    1e08:	48 2f       	mov	r20, r24
    1e0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e0c:	28 2f       	mov	r18, r24
    1e0e:	30 e0       	ldi	r19, 0x00	; 0
    1e10:	81 e0       	ldi	r24, 0x01	; 1
    1e12:	90 e0       	ldi	r25, 0x00	; 0
    1e14:	02 2e       	mov	r0, r18
    1e16:	02 c0       	rjmp	.+4      	; 0x1e1c <GPIO_setupPinDirection+0x13c>
    1e18:	88 0f       	add	r24, r24
    1e1a:	99 1f       	adc	r25, r25
    1e1c:	0a 94       	dec	r0
    1e1e:	e2 f7       	brpl	.-8      	; 0x1e18 <GPIO_setupPinDirection+0x138>
    1e20:	84 2b       	or	r24, r20
    1e22:	8c 93       	st	X, r24
    1e24:	40 c0       	rjmp	.+128    	; 0x1ea6 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1e26:	a4 e3       	ldi	r26, 0x34	; 52
    1e28:	b0 e0       	ldi	r27, 0x00	; 0
    1e2a:	e4 e3       	ldi	r30, 0x34	; 52
    1e2c:	f0 e0       	ldi	r31, 0x00	; 0
    1e2e:	80 81       	ld	r24, Z
    1e30:	48 2f       	mov	r20, r24
    1e32:	8a 81       	ldd	r24, Y+2	; 0x02
    1e34:	28 2f       	mov	r18, r24
    1e36:	30 e0       	ldi	r19, 0x00	; 0
    1e38:	81 e0       	ldi	r24, 0x01	; 1
    1e3a:	90 e0       	ldi	r25, 0x00	; 0
    1e3c:	02 2e       	mov	r0, r18
    1e3e:	02 c0       	rjmp	.+4      	; 0x1e44 <GPIO_setupPinDirection+0x164>
    1e40:	88 0f       	add	r24, r24
    1e42:	99 1f       	adc	r25, r25
    1e44:	0a 94       	dec	r0
    1e46:	e2 f7       	brpl	.-8      	; 0x1e40 <GPIO_setupPinDirection+0x160>
    1e48:	80 95       	com	r24
    1e4a:	84 23       	and	r24, r20
    1e4c:	8c 93       	st	X, r24
    1e4e:	2b c0       	rjmp	.+86     	; 0x1ea6 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1e50:	8b 81       	ldd	r24, Y+3	; 0x03
    1e52:	81 30       	cpi	r24, 0x01	; 1
    1e54:	a1 f4       	brne	.+40     	; 0x1e7e <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1e56:	a1 e3       	ldi	r26, 0x31	; 49
    1e58:	b0 e0       	ldi	r27, 0x00	; 0
    1e5a:	e1 e3       	ldi	r30, 0x31	; 49
    1e5c:	f0 e0       	ldi	r31, 0x00	; 0
    1e5e:	80 81       	ld	r24, Z
    1e60:	48 2f       	mov	r20, r24
    1e62:	8a 81       	ldd	r24, Y+2	; 0x02
    1e64:	28 2f       	mov	r18, r24
    1e66:	30 e0       	ldi	r19, 0x00	; 0
    1e68:	81 e0       	ldi	r24, 0x01	; 1
    1e6a:	90 e0       	ldi	r25, 0x00	; 0
    1e6c:	02 2e       	mov	r0, r18
    1e6e:	02 c0       	rjmp	.+4      	; 0x1e74 <GPIO_setupPinDirection+0x194>
    1e70:	88 0f       	add	r24, r24
    1e72:	99 1f       	adc	r25, r25
    1e74:	0a 94       	dec	r0
    1e76:	e2 f7       	brpl	.-8      	; 0x1e70 <GPIO_setupPinDirection+0x190>
    1e78:	84 2b       	or	r24, r20
    1e7a:	8c 93       	st	X, r24
    1e7c:	14 c0       	rjmp	.+40     	; 0x1ea6 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1e7e:	a1 e3       	ldi	r26, 0x31	; 49
    1e80:	b0 e0       	ldi	r27, 0x00	; 0
    1e82:	e1 e3       	ldi	r30, 0x31	; 49
    1e84:	f0 e0       	ldi	r31, 0x00	; 0
    1e86:	80 81       	ld	r24, Z
    1e88:	48 2f       	mov	r20, r24
    1e8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e8c:	28 2f       	mov	r18, r24
    1e8e:	30 e0       	ldi	r19, 0x00	; 0
    1e90:	81 e0       	ldi	r24, 0x01	; 1
    1e92:	90 e0       	ldi	r25, 0x00	; 0
    1e94:	02 2e       	mov	r0, r18
    1e96:	02 c0       	rjmp	.+4      	; 0x1e9c <GPIO_setupPinDirection+0x1bc>
    1e98:	88 0f       	add	r24, r24
    1e9a:	99 1f       	adc	r25, r25
    1e9c:	0a 94       	dec	r0
    1e9e:	e2 f7       	brpl	.-8      	; 0x1e98 <GPIO_setupPinDirection+0x1b8>
    1ea0:	80 95       	com	r24
    1ea2:	84 23       	and	r24, r20
    1ea4:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1ea6:	0f 90       	pop	r0
    1ea8:	0f 90       	pop	r0
    1eaa:	0f 90       	pop	r0
    1eac:	0f 90       	pop	r0
    1eae:	0f 90       	pop	r0
    1eb0:	cf 91       	pop	r28
    1eb2:	df 91       	pop	r29
    1eb4:	08 95       	ret

00001eb6 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1eb6:	df 93       	push	r29
    1eb8:	cf 93       	push	r28
    1eba:	00 d0       	rcall	.+0      	; 0x1ebc <GPIO_writePin+0x6>
    1ebc:	00 d0       	rcall	.+0      	; 0x1ebe <GPIO_writePin+0x8>
    1ebe:	0f 92       	push	r0
    1ec0:	cd b7       	in	r28, 0x3d	; 61
    1ec2:	de b7       	in	r29, 0x3e	; 62
    1ec4:	89 83       	std	Y+1, r24	; 0x01
    1ec6:	6a 83       	std	Y+2, r22	; 0x02
    1ec8:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1eca:	8a 81       	ldd	r24, Y+2	; 0x02
    1ecc:	88 30       	cpi	r24, 0x08	; 8
    1ece:	08 f0       	brcs	.+2      	; 0x1ed2 <GPIO_writePin+0x1c>
    1ed0:	d5 c0       	rjmp	.+426    	; 0x207c <GPIO_writePin+0x1c6>
    1ed2:	89 81       	ldd	r24, Y+1	; 0x01
    1ed4:	84 30       	cpi	r24, 0x04	; 4
    1ed6:	08 f0       	brcs	.+2      	; 0x1eda <GPIO_writePin+0x24>
    1ed8:	d1 c0       	rjmp	.+418    	; 0x207c <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1eda:	89 81       	ldd	r24, Y+1	; 0x01
    1edc:	28 2f       	mov	r18, r24
    1ede:	30 e0       	ldi	r19, 0x00	; 0
    1ee0:	3d 83       	std	Y+5, r19	; 0x05
    1ee2:	2c 83       	std	Y+4, r18	; 0x04
    1ee4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ee6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ee8:	81 30       	cpi	r24, 0x01	; 1
    1eea:	91 05       	cpc	r25, r1
    1eec:	09 f4       	brne	.+2      	; 0x1ef0 <GPIO_writePin+0x3a>
    1eee:	43 c0       	rjmp	.+134    	; 0x1f76 <GPIO_writePin+0xc0>
    1ef0:	2c 81       	ldd	r18, Y+4	; 0x04
    1ef2:	3d 81       	ldd	r19, Y+5	; 0x05
    1ef4:	22 30       	cpi	r18, 0x02	; 2
    1ef6:	31 05       	cpc	r19, r1
    1ef8:	2c f4       	brge	.+10     	; 0x1f04 <GPIO_writePin+0x4e>
    1efa:	8c 81       	ldd	r24, Y+4	; 0x04
    1efc:	9d 81       	ldd	r25, Y+5	; 0x05
    1efe:	00 97       	sbiw	r24, 0x00	; 0
    1f00:	71 f0       	breq	.+28     	; 0x1f1e <GPIO_writePin+0x68>
    1f02:	bc c0       	rjmp	.+376    	; 0x207c <GPIO_writePin+0x1c6>
    1f04:	2c 81       	ldd	r18, Y+4	; 0x04
    1f06:	3d 81       	ldd	r19, Y+5	; 0x05
    1f08:	22 30       	cpi	r18, 0x02	; 2
    1f0a:	31 05       	cpc	r19, r1
    1f0c:	09 f4       	brne	.+2      	; 0x1f10 <GPIO_writePin+0x5a>
    1f0e:	5f c0       	rjmp	.+190    	; 0x1fce <GPIO_writePin+0x118>
    1f10:	8c 81       	ldd	r24, Y+4	; 0x04
    1f12:	9d 81       	ldd	r25, Y+5	; 0x05
    1f14:	83 30       	cpi	r24, 0x03	; 3
    1f16:	91 05       	cpc	r25, r1
    1f18:	09 f4       	brne	.+2      	; 0x1f1c <GPIO_writePin+0x66>
    1f1a:	85 c0       	rjmp	.+266    	; 0x2026 <GPIO_writePin+0x170>
    1f1c:	af c0       	rjmp	.+350    	; 0x207c <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1f1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f20:	81 30       	cpi	r24, 0x01	; 1
    1f22:	a1 f4       	brne	.+40     	; 0x1f4c <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1f24:	ab e3       	ldi	r26, 0x3B	; 59
    1f26:	b0 e0       	ldi	r27, 0x00	; 0
    1f28:	eb e3       	ldi	r30, 0x3B	; 59
    1f2a:	f0 e0       	ldi	r31, 0x00	; 0
    1f2c:	80 81       	ld	r24, Z
    1f2e:	48 2f       	mov	r20, r24
    1f30:	8a 81       	ldd	r24, Y+2	; 0x02
    1f32:	28 2f       	mov	r18, r24
    1f34:	30 e0       	ldi	r19, 0x00	; 0
    1f36:	81 e0       	ldi	r24, 0x01	; 1
    1f38:	90 e0       	ldi	r25, 0x00	; 0
    1f3a:	02 2e       	mov	r0, r18
    1f3c:	02 c0       	rjmp	.+4      	; 0x1f42 <GPIO_writePin+0x8c>
    1f3e:	88 0f       	add	r24, r24
    1f40:	99 1f       	adc	r25, r25
    1f42:	0a 94       	dec	r0
    1f44:	e2 f7       	brpl	.-8      	; 0x1f3e <GPIO_writePin+0x88>
    1f46:	84 2b       	or	r24, r20
    1f48:	8c 93       	st	X, r24
    1f4a:	98 c0       	rjmp	.+304    	; 0x207c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1f4c:	ab e3       	ldi	r26, 0x3B	; 59
    1f4e:	b0 e0       	ldi	r27, 0x00	; 0
    1f50:	eb e3       	ldi	r30, 0x3B	; 59
    1f52:	f0 e0       	ldi	r31, 0x00	; 0
    1f54:	80 81       	ld	r24, Z
    1f56:	48 2f       	mov	r20, r24
    1f58:	8a 81       	ldd	r24, Y+2	; 0x02
    1f5a:	28 2f       	mov	r18, r24
    1f5c:	30 e0       	ldi	r19, 0x00	; 0
    1f5e:	81 e0       	ldi	r24, 0x01	; 1
    1f60:	90 e0       	ldi	r25, 0x00	; 0
    1f62:	02 2e       	mov	r0, r18
    1f64:	02 c0       	rjmp	.+4      	; 0x1f6a <GPIO_writePin+0xb4>
    1f66:	88 0f       	add	r24, r24
    1f68:	99 1f       	adc	r25, r25
    1f6a:	0a 94       	dec	r0
    1f6c:	e2 f7       	brpl	.-8      	; 0x1f66 <GPIO_writePin+0xb0>
    1f6e:	80 95       	com	r24
    1f70:	84 23       	and	r24, r20
    1f72:	8c 93       	st	X, r24
    1f74:	83 c0       	rjmp	.+262    	; 0x207c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1f76:	8b 81       	ldd	r24, Y+3	; 0x03
    1f78:	81 30       	cpi	r24, 0x01	; 1
    1f7a:	a1 f4       	brne	.+40     	; 0x1fa4 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1f7c:	a8 e3       	ldi	r26, 0x38	; 56
    1f7e:	b0 e0       	ldi	r27, 0x00	; 0
    1f80:	e8 e3       	ldi	r30, 0x38	; 56
    1f82:	f0 e0       	ldi	r31, 0x00	; 0
    1f84:	80 81       	ld	r24, Z
    1f86:	48 2f       	mov	r20, r24
    1f88:	8a 81       	ldd	r24, Y+2	; 0x02
    1f8a:	28 2f       	mov	r18, r24
    1f8c:	30 e0       	ldi	r19, 0x00	; 0
    1f8e:	81 e0       	ldi	r24, 0x01	; 1
    1f90:	90 e0       	ldi	r25, 0x00	; 0
    1f92:	02 2e       	mov	r0, r18
    1f94:	02 c0       	rjmp	.+4      	; 0x1f9a <GPIO_writePin+0xe4>
    1f96:	88 0f       	add	r24, r24
    1f98:	99 1f       	adc	r25, r25
    1f9a:	0a 94       	dec	r0
    1f9c:	e2 f7       	brpl	.-8      	; 0x1f96 <GPIO_writePin+0xe0>
    1f9e:	84 2b       	or	r24, r20
    1fa0:	8c 93       	st	X, r24
    1fa2:	6c c0       	rjmp	.+216    	; 0x207c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1fa4:	a8 e3       	ldi	r26, 0x38	; 56
    1fa6:	b0 e0       	ldi	r27, 0x00	; 0
    1fa8:	e8 e3       	ldi	r30, 0x38	; 56
    1faa:	f0 e0       	ldi	r31, 0x00	; 0
    1fac:	80 81       	ld	r24, Z
    1fae:	48 2f       	mov	r20, r24
    1fb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb2:	28 2f       	mov	r18, r24
    1fb4:	30 e0       	ldi	r19, 0x00	; 0
    1fb6:	81 e0       	ldi	r24, 0x01	; 1
    1fb8:	90 e0       	ldi	r25, 0x00	; 0
    1fba:	02 2e       	mov	r0, r18
    1fbc:	02 c0       	rjmp	.+4      	; 0x1fc2 <GPIO_writePin+0x10c>
    1fbe:	88 0f       	add	r24, r24
    1fc0:	99 1f       	adc	r25, r25
    1fc2:	0a 94       	dec	r0
    1fc4:	e2 f7       	brpl	.-8      	; 0x1fbe <GPIO_writePin+0x108>
    1fc6:	80 95       	com	r24
    1fc8:	84 23       	and	r24, r20
    1fca:	8c 93       	st	X, r24
    1fcc:	57 c0       	rjmp	.+174    	; 0x207c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1fce:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd0:	81 30       	cpi	r24, 0x01	; 1
    1fd2:	a1 f4       	brne	.+40     	; 0x1ffc <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1fd4:	a5 e3       	ldi	r26, 0x35	; 53
    1fd6:	b0 e0       	ldi	r27, 0x00	; 0
    1fd8:	e5 e3       	ldi	r30, 0x35	; 53
    1fda:	f0 e0       	ldi	r31, 0x00	; 0
    1fdc:	80 81       	ld	r24, Z
    1fde:	48 2f       	mov	r20, r24
    1fe0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe2:	28 2f       	mov	r18, r24
    1fe4:	30 e0       	ldi	r19, 0x00	; 0
    1fe6:	81 e0       	ldi	r24, 0x01	; 1
    1fe8:	90 e0       	ldi	r25, 0x00	; 0
    1fea:	02 2e       	mov	r0, r18
    1fec:	02 c0       	rjmp	.+4      	; 0x1ff2 <GPIO_writePin+0x13c>
    1fee:	88 0f       	add	r24, r24
    1ff0:	99 1f       	adc	r25, r25
    1ff2:	0a 94       	dec	r0
    1ff4:	e2 f7       	brpl	.-8      	; 0x1fee <GPIO_writePin+0x138>
    1ff6:	84 2b       	or	r24, r20
    1ff8:	8c 93       	st	X, r24
    1ffa:	40 c0       	rjmp	.+128    	; 0x207c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1ffc:	a5 e3       	ldi	r26, 0x35	; 53
    1ffe:	b0 e0       	ldi	r27, 0x00	; 0
    2000:	e5 e3       	ldi	r30, 0x35	; 53
    2002:	f0 e0       	ldi	r31, 0x00	; 0
    2004:	80 81       	ld	r24, Z
    2006:	48 2f       	mov	r20, r24
    2008:	8a 81       	ldd	r24, Y+2	; 0x02
    200a:	28 2f       	mov	r18, r24
    200c:	30 e0       	ldi	r19, 0x00	; 0
    200e:	81 e0       	ldi	r24, 0x01	; 1
    2010:	90 e0       	ldi	r25, 0x00	; 0
    2012:	02 2e       	mov	r0, r18
    2014:	02 c0       	rjmp	.+4      	; 0x201a <GPIO_writePin+0x164>
    2016:	88 0f       	add	r24, r24
    2018:	99 1f       	adc	r25, r25
    201a:	0a 94       	dec	r0
    201c:	e2 f7       	brpl	.-8      	; 0x2016 <GPIO_writePin+0x160>
    201e:	80 95       	com	r24
    2020:	84 23       	and	r24, r20
    2022:	8c 93       	st	X, r24
    2024:	2b c0       	rjmp	.+86     	; 0x207c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    2026:	8b 81       	ldd	r24, Y+3	; 0x03
    2028:	81 30       	cpi	r24, 0x01	; 1
    202a:	a1 f4       	brne	.+40     	; 0x2054 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    202c:	a2 e3       	ldi	r26, 0x32	; 50
    202e:	b0 e0       	ldi	r27, 0x00	; 0
    2030:	e2 e3       	ldi	r30, 0x32	; 50
    2032:	f0 e0       	ldi	r31, 0x00	; 0
    2034:	80 81       	ld	r24, Z
    2036:	48 2f       	mov	r20, r24
    2038:	8a 81       	ldd	r24, Y+2	; 0x02
    203a:	28 2f       	mov	r18, r24
    203c:	30 e0       	ldi	r19, 0x00	; 0
    203e:	81 e0       	ldi	r24, 0x01	; 1
    2040:	90 e0       	ldi	r25, 0x00	; 0
    2042:	02 2e       	mov	r0, r18
    2044:	02 c0       	rjmp	.+4      	; 0x204a <GPIO_writePin+0x194>
    2046:	88 0f       	add	r24, r24
    2048:	99 1f       	adc	r25, r25
    204a:	0a 94       	dec	r0
    204c:	e2 f7       	brpl	.-8      	; 0x2046 <GPIO_writePin+0x190>
    204e:	84 2b       	or	r24, r20
    2050:	8c 93       	st	X, r24
    2052:	14 c0       	rjmp	.+40     	; 0x207c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    2054:	a2 e3       	ldi	r26, 0x32	; 50
    2056:	b0 e0       	ldi	r27, 0x00	; 0
    2058:	e2 e3       	ldi	r30, 0x32	; 50
    205a:	f0 e0       	ldi	r31, 0x00	; 0
    205c:	80 81       	ld	r24, Z
    205e:	48 2f       	mov	r20, r24
    2060:	8a 81       	ldd	r24, Y+2	; 0x02
    2062:	28 2f       	mov	r18, r24
    2064:	30 e0       	ldi	r19, 0x00	; 0
    2066:	81 e0       	ldi	r24, 0x01	; 1
    2068:	90 e0       	ldi	r25, 0x00	; 0
    206a:	02 2e       	mov	r0, r18
    206c:	02 c0       	rjmp	.+4      	; 0x2072 <GPIO_writePin+0x1bc>
    206e:	88 0f       	add	r24, r24
    2070:	99 1f       	adc	r25, r25
    2072:	0a 94       	dec	r0
    2074:	e2 f7       	brpl	.-8      	; 0x206e <GPIO_writePin+0x1b8>
    2076:	80 95       	com	r24
    2078:	84 23       	and	r24, r20
    207a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    207c:	0f 90       	pop	r0
    207e:	0f 90       	pop	r0
    2080:	0f 90       	pop	r0
    2082:	0f 90       	pop	r0
    2084:	0f 90       	pop	r0
    2086:	cf 91       	pop	r28
    2088:	df 91       	pop	r29
    208a:	08 95       	ret

0000208c <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    208c:	df 93       	push	r29
    208e:	cf 93       	push	r28
    2090:	00 d0       	rcall	.+0      	; 0x2092 <GPIO_readPin+0x6>
    2092:	00 d0       	rcall	.+0      	; 0x2094 <GPIO_readPin+0x8>
    2094:	0f 92       	push	r0
    2096:	cd b7       	in	r28, 0x3d	; 61
    2098:	de b7       	in	r29, 0x3e	; 62
    209a:	8a 83       	std	Y+2, r24	; 0x02
    209c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    209e:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    20a0:	8b 81       	ldd	r24, Y+3	; 0x03
    20a2:	88 30       	cpi	r24, 0x08	; 8
    20a4:	08 f0       	brcs	.+2      	; 0x20a8 <GPIO_readPin+0x1c>
    20a6:	84 c0       	rjmp	.+264    	; 0x21b0 <GPIO_readPin+0x124>
    20a8:	8a 81       	ldd	r24, Y+2	; 0x02
    20aa:	84 30       	cpi	r24, 0x04	; 4
    20ac:	08 f0       	brcs	.+2      	; 0x20b0 <GPIO_readPin+0x24>
    20ae:	80 c0       	rjmp	.+256    	; 0x21b0 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    20b0:	8a 81       	ldd	r24, Y+2	; 0x02
    20b2:	28 2f       	mov	r18, r24
    20b4:	30 e0       	ldi	r19, 0x00	; 0
    20b6:	3d 83       	std	Y+5, r19	; 0x05
    20b8:	2c 83       	std	Y+4, r18	; 0x04
    20ba:	4c 81       	ldd	r20, Y+4	; 0x04
    20bc:	5d 81       	ldd	r21, Y+5	; 0x05
    20be:	41 30       	cpi	r20, 0x01	; 1
    20c0:	51 05       	cpc	r21, r1
    20c2:	79 f1       	breq	.+94     	; 0x2122 <GPIO_readPin+0x96>
    20c4:	8c 81       	ldd	r24, Y+4	; 0x04
    20c6:	9d 81       	ldd	r25, Y+5	; 0x05
    20c8:	82 30       	cpi	r24, 0x02	; 2
    20ca:	91 05       	cpc	r25, r1
    20cc:	34 f4       	brge	.+12     	; 0x20da <GPIO_readPin+0x4e>
    20ce:	2c 81       	ldd	r18, Y+4	; 0x04
    20d0:	3d 81       	ldd	r19, Y+5	; 0x05
    20d2:	21 15       	cp	r18, r1
    20d4:	31 05       	cpc	r19, r1
    20d6:	69 f0       	breq	.+26     	; 0x20f2 <GPIO_readPin+0x66>
    20d8:	6b c0       	rjmp	.+214    	; 0x21b0 <GPIO_readPin+0x124>
    20da:	4c 81       	ldd	r20, Y+4	; 0x04
    20dc:	5d 81       	ldd	r21, Y+5	; 0x05
    20de:	42 30       	cpi	r20, 0x02	; 2
    20e0:	51 05       	cpc	r21, r1
    20e2:	b9 f1       	breq	.+110    	; 0x2152 <GPIO_readPin+0xc6>
    20e4:	8c 81       	ldd	r24, Y+4	; 0x04
    20e6:	9d 81       	ldd	r25, Y+5	; 0x05
    20e8:	83 30       	cpi	r24, 0x03	; 3
    20ea:	91 05       	cpc	r25, r1
    20ec:	09 f4       	brne	.+2      	; 0x20f0 <GPIO_readPin+0x64>
    20ee:	49 c0       	rjmp	.+146    	; 0x2182 <GPIO_readPin+0xf6>
    20f0:	5f c0       	rjmp	.+190    	; 0x21b0 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    20f2:	e9 e3       	ldi	r30, 0x39	; 57
    20f4:	f0 e0       	ldi	r31, 0x00	; 0
    20f6:	80 81       	ld	r24, Z
    20f8:	28 2f       	mov	r18, r24
    20fa:	30 e0       	ldi	r19, 0x00	; 0
    20fc:	8b 81       	ldd	r24, Y+3	; 0x03
    20fe:	88 2f       	mov	r24, r24
    2100:	90 e0       	ldi	r25, 0x00	; 0
    2102:	a9 01       	movw	r20, r18
    2104:	02 c0       	rjmp	.+4      	; 0x210a <GPIO_readPin+0x7e>
    2106:	55 95       	asr	r21
    2108:	47 95       	ror	r20
    210a:	8a 95       	dec	r24
    210c:	e2 f7       	brpl	.-8      	; 0x2106 <GPIO_readPin+0x7a>
    210e:	ca 01       	movw	r24, r20
    2110:	81 70       	andi	r24, 0x01	; 1
    2112:	90 70       	andi	r25, 0x00	; 0
    2114:	88 23       	and	r24, r24
    2116:	19 f0       	breq	.+6      	; 0x211e <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    2118:	81 e0       	ldi	r24, 0x01	; 1
    211a:	89 83       	std	Y+1, r24	; 0x01
    211c:	49 c0       	rjmp	.+146    	; 0x21b0 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    211e:	19 82       	std	Y+1, r1	; 0x01
    2120:	47 c0       	rjmp	.+142    	; 0x21b0 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    2122:	e6 e3       	ldi	r30, 0x36	; 54
    2124:	f0 e0       	ldi	r31, 0x00	; 0
    2126:	80 81       	ld	r24, Z
    2128:	28 2f       	mov	r18, r24
    212a:	30 e0       	ldi	r19, 0x00	; 0
    212c:	8b 81       	ldd	r24, Y+3	; 0x03
    212e:	88 2f       	mov	r24, r24
    2130:	90 e0       	ldi	r25, 0x00	; 0
    2132:	a9 01       	movw	r20, r18
    2134:	02 c0       	rjmp	.+4      	; 0x213a <GPIO_readPin+0xae>
    2136:	55 95       	asr	r21
    2138:	47 95       	ror	r20
    213a:	8a 95       	dec	r24
    213c:	e2 f7       	brpl	.-8      	; 0x2136 <GPIO_readPin+0xaa>
    213e:	ca 01       	movw	r24, r20
    2140:	81 70       	andi	r24, 0x01	; 1
    2142:	90 70       	andi	r25, 0x00	; 0
    2144:	88 23       	and	r24, r24
    2146:	19 f0       	breq	.+6      	; 0x214e <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    2148:	81 e0       	ldi	r24, 0x01	; 1
    214a:	89 83       	std	Y+1, r24	; 0x01
    214c:	31 c0       	rjmp	.+98     	; 0x21b0 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    214e:	19 82       	std	Y+1, r1	; 0x01
    2150:	2f c0       	rjmp	.+94     	; 0x21b0 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    2152:	e3 e3       	ldi	r30, 0x33	; 51
    2154:	f0 e0       	ldi	r31, 0x00	; 0
    2156:	80 81       	ld	r24, Z
    2158:	28 2f       	mov	r18, r24
    215a:	30 e0       	ldi	r19, 0x00	; 0
    215c:	8b 81       	ldd	r24, Y+3	; 0x03
    215e:	88 2f       	mov	r24, r24
    2160:	90 e0       	ldi	r25, 0x00	; 0
    2162:	a9 01       	movw	r20, r18
    2164:	02 c0       	rjmp	.+4      	; 0x216a <GPIO_readPin+0xde>
    2166:	55 95       	asr	r21
    2168:	47 95       	ror	r20
    216a:	8a 95       	dec	r24
    216c:	e2 f7       	brpl	.-8      	; 0x2166 <GPIO_readPin+0xda>
    216e:	ca 01       	movw	r24, r20
    2170:	81 70       	andi	r24, 0x01	; 1
    2172:	90 70       	andi	r25, 0x00	; 0
    2174:	88 23       	and	r24, r24
    2176:	19 f0       	breq	.+6      	; 0x217e <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    2178:	81 e0       	ldi	r24, 0x01	; 1
    217a:	89 83       	std	Y+1, r24	; 0x01
    217c:	19 c0       	rjmp	.+50     	; 0x21b0 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    217e:	19 82       	std	Y+1, r1	; 0x01
    2180:	17 c0       	rjmp	.+46     	; 0x21b0 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    2182:	e0 e3       	ldi	r30, 0x30	; 48
    2184:	f0 e0       	ldi	r31, 0x00	; 0
    2186:	80 81       	ld	r24, Z
    2188:	28 2f       	mov	r18, r24
    218a:	30 e0       	ldi	r19, 0x00	; 0
    218c:	8b 81       	ldd	r24, Y+3	; 0x03
    218e:	88 2f       	mov	r24, r24
    2190:	90 e0       	ldi	r25, 0x00	; 0
    2192:	a9 01       	movw	r20, r18
    2194:	02 c0       	rjmp	.+4      	; 0x219a <GPIO_readPin+0x10e>
    2196:	55 95       	asr	r21
    2198:	47 95       	ror	r20
    219a:	8a 95       	dec	r24
    219c:	e2 f7       	brpl	.-8      	; 0x2196 <GPIO_readPin+0x10a>
    219e:	ca 01       	movw	r24, r20
    21a0:	81 70       	andi	r24, 0x01	; 1
    21a2:	90 70       	andi	r25, 0x00	; 0
    21a4:	88 23       	and	r24, r24
    21a6:	19 f0       	breq	.+6      	; 0x21ae <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    21a8:	81 e0       	ldi	r24, 0x01	; 1
    21aa:	89 83       	std	Y+1, r24	; 0x01
    21ac:	01 c0       	rjmp	.+2      	; 0x21b0 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    21ae:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    21b0:	89 81       	ldd	r24, Y+1	; 0x01
}
    21b2:	0f 90       	pop	r0
    21b4:	0f 90       	pop	r0
    21b6:	0f 90       	pop	r0
    21b8:	0f 90       	pop	r0
    21ba:	0f 90       	pop	r0
    21bc:	cf 91       	pop	r28
    21be:	df 91       	pop	r29
    21c0:	08 95       	ret

000021c2 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    21c2:	df 93       	push	r29
    21c4:	cf 93       	push	r28
    21c6:	00 d0       	rcall	.+0      	; 0x21c8 <GPIO_setupPortDirection+0x6>
    21c8:	00 d0       	rcall	.+0      	; 0x21ca <GPIO_setupPortDirection+0x8>
    21ca:	cd b7       	in	r28, 0x3d	; 61
    21cc:	de b7       	in	r29, 0x3e	; 62
    21ce:	89 83       	std	Y+1, r24	; 0x01
    21d0:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    21d2:	89 81       	ldd	r24, Y+1	; 0x01
    21d4:	84 30       	cpi	r24, 0x04	; 4
    21d6:	90 f5       	brcc	.+100    	; 0x223c <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    21d8:	89 81       	ldd	r24, Y+1	; 0x01
    21da:	28 2f       	mov	r18, r24
    21dc:	30 e0       	ldi	r19, 0x00	; 0
    21de:	3c 83       	std	Y+4, r19	; 0x04
    21e0:	2b 83       	std	Y+3, r18	; 0x03
    21e2:	8b 81       	ldd	r24, Y+3	; 0x03
    21e4:	9c 81       	ldd	r25, Y+4	; 0x04
    21e6:	81 30       	cpi	r24, 0x01	; 1
    21e8:	91 05       	cpc	r25, r1
    21ea:	d1 f0       	breq	.+52     	; 0x2220 <GPIO_setupPortDirection+0x5e>
    21ec:	2b 81       	ldd	r18, Y+3	; 0x03
    21ee:	3c 81       	ldd	r19, Y+4	; 0x04
    21f0:	22 30       	cpi	r18, 0x02	; 2
    21f2:	31 05       	cpc	r19, r1
    21f4:	2c f4       	brge	.+10     	; 0x2200 <GPIO_setupPortDirection+0x3e>
    21f6:	8b 81       	ldd	r24, Y+3	; 0x03
    21f8:	9c 81       	ldd	r25, Y+4	; 0x04
    21fa:	00 97       	sbiw	r24, 0x00	; 0
    21fc:	61 f0       	breq	.+24     	; 0x2216 <GPIO_setupPortDirection+0x54>
    21fe:	1e c0       	rjmp	.+60     	; 0x223c <GPIO_setupPortDirection+0x7a>
    2200:	2b 81       	ldd	r18, Y+3	; 0x03
    2202:	3c 81       	ldd	r19, Y+4	; 0x04
    2204:	22 30       	cpi	r18, 0x02	; 2
    2206:	31 05       	cpc	r19, r1
    2208:	81 f0       	breq	.+32     	; 0x222a <GPIO_setupPortDirection+0x68>
    220a:	8b 81       	ldd	r24, Y+3	; 0x03
    220c:	9c 81       	ldd	r25, Y+4	; 0x04
    220e:	83 30       	cpi	r24, 0x03	; 3
    2210:	91 05       	cpc	r25, r1
    2212:	81 f0       	breq	.+32     	; 0x2234 <GPIO_setupPortDirection+0x72>
    2214:	13 c0       	rjmp	.+38     	; 0x223c <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    2216:	ea e3       	ldi	r30, 0x3A	; 58
    2218:	f0 e0       	ldi	r31, 0x00	; 0
    221a:	8a 81       	ldd	r24, Y+2	; 0x02
    221c:	80 83       	st	Z, r24
    221e:	0e c0       	rjmp	.+28     	; 0x223c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    2220:	e7 e3       	ldi	r30, 0x37	; 55
    2222:	f0 e0       	ldi	r31, 0x00	; 0
    2224:	8a 81       	ldd	r24, Y+2	; 0x02
    2226:	80 83       	st	Z, r24
    2228:	09 c0       	rjmp	.+18     	; 0x223c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    222a:	e4 e3       	ldi	r30, 0x34	; 52
    222c:	f0 e0       	ldi	r31, 0x00	; 0
    222e:	8a 81       	ldd	r24, Y+2	; 0x02
    2230:	80 83       	st	Z, r24
    2232:	04 c0       	rjmp	.+8      	; 0x223c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    2234:	e1 e3       	ldi	r30, 0x31	; 49
    2236:	f0 e0       	ldi	r31, 0x00	; 0
    2238:	8a 81       	ldd	r24, Y+2	; 0x02
    223a:	80 83       	st	Z, r24
			break;
		}
	}
}
    223c:	0f 90       	pop	r0
    223e:	0f 90       	pop	r0
    2240:	0f 90       	pop	r0
    2242:	0f 90       	pop	r0
    2244:	cf 91       	pop	r28
    2246:	df 91       	pop	r29
    2248:	08 95       	ret

0000224a <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    224a:	df 93       	push	r29
    224c:	cf 93       	push	r28
    224e:	00 d0       	rcall	.+0      	; 0x2250 <GPIO_writePort+0x6>
    2250:	00 d0       	rcall	.+0      	; 0x2252 <GPIO_writePort+0x8>
    2252:	cd b7       	in	r28, 0x3d	; 61
    2254:	de b7       	in	r29, 0x3e	; 62
    2256:	89 83       	std	Y+1, r24	; 0x01
    2258:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    225a:	89 81       	ldd	r24, Y+1	; 0x01
    225c:	84 30       	cpi	r24, 0x04	; 4
    225e:	90 f5       	brcc	.+100    	; 0x22c4 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    2260:	89 81       	ldd	r24, Y+1	; 0x01
    2262:	28 2f       	mov	r18, r24
    2264:	30 e0       	ldi	r19, 0x00	; 0
    2266:	3c 83       	std	Y+4, r19	; 0x04
    2268:	2b 83       	std	Y+3, r18	; 0x03
    226a:	8b 81       	ldd	r24, Y+3	; 0x03
    226c:	9c 81       	ldd	r25, Y+4	; 0x04
    226e:	81 30       	cpi	r24, 0x01	; 1
    2270:	91 05       	cpc	r25, r1
    2272:	d1 f0       	breq	.+52     	; 0x22a8 <GPIO_writePort+0x5e>
    2274:	2b 81       	ldd	r18, Y+3	; 0x03
    2276:	3c 81       	ldd	r19, Y+4	; 0x04
    2278:	22 30       	cpi	r18, 0x02	; 2
    227a:	31 05       	cpc	r19, r1
    227c:	2c f4       	brge	.+10     	; 0x2288 <GPIO_writePort+0x3e>
    227e:	8b 81       	ldd	r24, Y+3	; 0x03
    2280:	9c 81       	ldd	r25, Y+4	; 0x04
    2282:	00 97       	sbiw	r24, 0x00	; 0
    2284:	61 f0       	breq	.+24     	; 0x229e <GPIO_writePort+0x54>
    2286:	1e c0       	rjmp	.+60     	; 0x22c4 <GPIO_writePort+0x7a>
    2288:	2b 81       	ldd	r18, Y+3	; 0x03
    228a:	3c 81       	ldd	r19, Y+4	; 0x04
    228c:	22 30       	cpi	r18, 0x02	; 2
    228e:	31 05       	cpc	r19, r1
    2290:	81 f0       	breq	.+32     	; 0x22b2 <GPIO_writePort+0x68>
    2292:	8b 81       	ldd	r24, Y+3	; 0x03
    2294:	9c 81       	ldd	r25, Y+4	; 0x04
    2296:	83 30       	cpi	r24, 0x03	; 3
    2298:	91 05       	cpc	r25, r1
    229a:	81 f0       	breq	.+32     	; 0x22bc <GPIO_writePort+0x72>
    229c:	13 c0       	rjmp	.+38     	; 0x22c4 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    229e:	eb e3       	ldi	r30, 0x3B	; 59
    22a0:	f0 e0       	ldi	r31, 0x00	; 0
    22a2:	8a 81       	ldd	r24, Y+2	; 0x02
    22a4:	80 83       	st	Z, r24
    22a6:	0e c0       	rjmp	.+28     	; 0x22c4 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    22a8:	e8 e3       	ldi	r30, 0x38	; 56
    22aa:	f0 e0       	ldi	r31, 0x00	; 0
    22ac:	8a 81       	ldd	r24, Y+2	; 0x02
    22ae:	80 83       	st	Z, r24
    22b0:	09 c0       	rjmp	.+18     	; 0x22c4 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    22b2:	e5 e3       	ldi	r30, 0x35	; 53
    22b4:	f0 e0       	ldi	r31, 0x00	; 0
    22b6:	8a 81       	ldd	r24, Y+2	; 0x02
    22b8:	80 83       	st	Z, r24
    22ba:	04 c0       	rjmp	.+8      	; 0x22c4 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    22bc:	e2 e3       	ldi	r30, 0x32	; 50
    22be:	f0 e0       	ldi	r31, 0x00	; 0
    22c0:	8a 81       	ldd	r24, Y+2	; 0x02
    22c2:	80 83       	st	Z, r24
			break;
		}
	}
}
    22c4:	0f 90       	pop	r0
    22c6:	0f 90       	pop	r0
    22c8:	0f 90       	pop	r0
    22ca:	0f 90       	pop	r0
    22cc:	cf 91       	pop	r28
    22ce:	df 91       	pop	r29
    22d0:	08 95       	ret

000022d2 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    22d2:	df 93       	push	r29
    22d4:	cf 93       	push	r28
    22d6:	00 d0       	rcall	.+0      	; 0x22d8 <GPIO_readPort+0x6>
    22d8:	00 d0       	rcall	.+0      	; 0x22da <GPIO_readPort+0x8>
    22da:	cd b7       	in	r28, 0x3d	; 61
    22dc:	de b7       	in	r29, 0x3e	; 62
    22de:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    22e0:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    22e2:	8a 81       	ldd	r24, Y+2	; 0x02
    22e4:	84 30       	cpi	r24, 0x04	; 4
    22e6:	90 f5       	brcc	.+100    	; 0x234c <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    22e8:	8a 81       	ldd	r24, Y+2	; 0x02
    22ea:	28 2f       	mov	r18, r24
    22ec:	30 e0       	ldi	r19, 0x00	; 0
    22ee:	3c 83       	std	Y+4, r19	; 0x04
    22f0:	2b 83       	std	Y+3, r18	; 0x03
    22f2:	8b 81       	ldd	r24, Y+3	; 0x03
    22f4:	9c 81       	ldd	r25, Y+4	; 0x04
    22f6:	81 30       	cpi	r24, 0x01	; 1
    22f8:	91 05       	cpc	r25, r1
    22fa:	d1 f0       	breq	.+52     	; 0x2330 <GPIO_readPort+0x5e>
    22fc:	2b 81       	ldd	r18, Y+3	; 0x03
    22fe:	3c 81       	ldd	r19, Y+4	; 0x04
    2300:	22 30       	cpi	r18, 0x02	; 2
    2302:	31 05       	cpc	r19, r1
    2304:	2c f4       	brge	.+10     	; 0x2310 <GPIO_readPort+0x3e>
    2306:	8b 81       	ldd	r24, Y+3	; 0x03
    2308:	9c 81       	ldd	r25, Y+4	; 0x04
    230a:	00 97       	sbiw	r24, 0x00	; 0
    230c:	61 f0       	breq	.+24     	; 0x2326 <GPIO_readPort+0x54>
    230e:	1e c0       	rjmp	.+60     	; 0x234c <GPIO_readPort+0x7a>
    2310:	2b 81       	ldd	r18, Y+3	; 0x03
    2312:	3c 81       	ldd	r19, Y+4	; 0x04
    2314:	22 30       	cpi	r18, 0x02	; 2
    2316:	31 05       	cpc	r19, r1
    2318:	81 f0       	breq	.+32     	; 0x233a <GPIO_readPort+0x68>
    231a:	8b 81       	ldd	r24, Y+3	; 0x03
    231c:	9c 81       	ldd	r25, Y+4	; 0x04
    231e:	83 30       	cpi	r24, 0x03	; 3
    2320:	91 05       	cpc	r25, r1
    2322:	81 f0       	breq	.+32     	; 0x2344 <GPIO_readPort+0x72>
    2324:	13 c0       	rjmp	.+38     	; 0x234c <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    2326:	e9 e3       	ldi	r30, 0x39	; 57
    2328:	f0 e0       	ldi	r31, 0x00	; 0
    232a:	80 81       	ld	r24, Z
    232c:	89 83       	std	Y+1, r24	; 0x01
    232e:	0e c0       	rjmp	.+28     	; 0x234c <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    2330:	e6 e3       	ldi	r30, 0x36	; 54
    2332:	f0 e0       	ldi	r31, 0x00	; 0
    2334:	80 81       	ld	r24, Z
    2336:	89 83       	std	Y+1, r24	; 0x01
    2338:	09 c0       	rjmp	.+18     	; 0x234c <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    233a:	e3 e3       	ldi	r30, 0x33	; 51
    233c:	f0 e0       	ldi	r31, 0x00	; 0
    233e:	80 81       	ld	r24, Z
    2340:	89 83       	std	Y+1, r24	; 0x01
    2342:	04 c0       	rjmp	.+8      	; 0x234c <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    2344:	e0 e3       	ldi	r30, 0x30	; 48
    2346:	f0 e0       	ldi	r31, 0x00	; 0
    2348:	80 81       	ld	r24, Z
    234a:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    234c:	89 81       	ldd	r24, Y+1	; 0x01
}
    234e:	0f 90       	pop	r0
    2350:	0f 90       	pop	r0
    2352:	0f 90       	pop	r0
    2354:	0f 90       	pop	r0
    2356:	cf 91       	pop	r28
    2358:	df 91       	pop	r29
    235a:	08 95       	ret

0000235c <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    235c:	df 93       	push	r29
    235e:	cf 93       	push	r28
    2360:	cd b7       	in	r28, 0x3d	; 61
    2362:	de b7       	in	r29, 0x3e	; 62
    2364:	2e 97       	sbiw	r28, 0x0e	; 14
    2366:	0f b6       	in	r0, 0x3f	; 63
    2368:	f8 94       	cli
    236a:	de bf       	out	0x3e, r29	; 62
    236c:	0f be       	out	0x3f, r0	; 63
    236e:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    2370:	80 e0       	ldi	r24, 0x00	; 0
    2372:	60 e0       	ldi	r22, 0x00	; 0
    2374:	41 e0       	ldi	r20, 0x01	; 1
    2376:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    237a:	80 e0       	ldi	r24, 0x00	; 0
    237c:	61 e0       	ldi	r22, 0x01	; 1
    237e:	41 e0       	ldi	r20, 0x01	; 1
    2380:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <GPIO_setupPinDirection>
    2384:	80 e0       	ldi	r24, 0x00	; 0
    2386:	90 e0       	ldi	r25, 0x00	; 0
    2388:	a0 ea       	ldi	r26, 0xA0	; 160
    238a:	b1 e4       	ldi	r27, 0x41	; 65
    238c:	8b 87       	std	Y+11, r24	; 0x0b
    238e:	9c 87       	std	Y+12, r25	; 0x0c
    2390:	ad 87       	std	Y+13, r26	; 0x0d
    2392:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2394:	6b 85       	ldd	r22, Y+11	; 0x0b
    2396:	7c 85       	ldd	r23, Y+12	; 0x0c
    2398:	8d 85       	ldd	r24, Y+13	; 0x0d
    239a:	9e 85       	ldd	r25, Y+14	; 0x0e
    239c:	20 e0       	ldi	r18, 0x00	; 0
    239e:	30 e0       	ldi	r19, 0x00	; 0
    23a0:	4a ef       	ldi	r20, 0xFA	; 250
    23a2:	54 e4       	ldi	r21, 0x44	; 68
    23a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23a8:	dc 01       	movw	r26, r24
    23aa:	cb 01       	movw	r24, r22
    23ac:	8f 83       	std	Y+7, r24	; 0x07
    23ae:	98 87       	std	Y+8, r25	; 0x08
    23b0:	a9 87       	std	Y+9, r26	; 0x09
    23b2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23b4:	6f 81       	ldd	r22, Y+7	; 0x07
    23b6:	78 85       	ldd	r23, Y+8	; 0x08
    23b8:	89 85       	ldd	r24, Y+9	; 0x09
    23ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    23bc:	20 e0       	ldi	r18, 0x00	; 0
    23be:	30 e0       	ldi	r19, 0x00	; 0
    23c0:	40 e8       	ldi	r20, 0x80	; 128
    23c2:	5f e3       	ldi	r21, 0x3F	; 63
    23c4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23c8:	88 23       	and	r24, r24
    23ca:	2c f4       	brge	.+10     	; 0x23d6 <LCD_init+0x7a>
		__ticks = 1;
    23cc:	81 e0       	ldi	r24, 0x01	; 1
    23ce:	90 e0       	ldi	r25, 0x00	; 0
    23d0:	9e 83       	std	Y+6, r25	; 0x06
    23d2:	8d 83       	std	Y+5, r24	; 0x05
    23d4:	3f c0       	rjmp	.+126    	; 0x2454 <LCD_init+0xf8>
	else if (__tmp > 65535)
    23d6:	6f 81       	ldd	r22, Y+7	; 0x07
    23d8:	78 85       	ldd	r23, Y+8	; 0x08
    23da:	89 85       	ldd	r24, Y+9	; 0x09
    23dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    23de:	20 e0       	ldi	r18, 0x00	; 0
    23e0:	3f ef       	ldi	r19, 0xFF	; 255
    23e2:	4f e7       	ldi	r20, 0x7F	; 127
    23e4:	57 e4       	ldi	r21, 0x47	; 71
    23e6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23ea:	18 16       	cp	r1, r24
    23ec:	4c f5       	brge	.+82     	; 0x2440 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    23f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    23f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    23f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    23f6:	20 e0       	ldi	r18, 0x00	; 0
    23f8:	30 e0       	ldi	r19, 0x00	; 0
    23fa:	40 e2       	ldi	r20, 0x20	; 32
    23fc:	51 e4       	ldi	r21, 0x41	; 65
    23fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2402:	dc 01       	movw	r26, r24
    2404:	cb 01       	movw	r24, r22
    2406:	bc 01       	movw	r22, r24
    2408:	cd 01       	movw	r24, r26
    240a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    240e:	dc 01       	movw	r26, r24
    2410:	cb 01       	movw	r24, r22
    2412:	9e 83       	std	Y+6, r25	; 0x06
    2414:	8d 83       	std	Y+5, r24	; 0x05
    2416:	0f c0       	rjmp	.+30     	; 0x2436 <LCD_init+0xda>
    2418:	88 ec       	ldi	r24, 0xC8	; 200
    241a:	90 e0       	ldi	r25, 0x00	; 0
    241c:	9c 83       	std	Y+4, r25	; 0x04
    241e:	8b 83       	std	Y+3, r24	; 0x03
    2420:	8b 81       	ldd	r24, Y+3	; 0x03
    2422:	9c 81       	ldd	r25, Y+4	; 0x04
    2424:	01 97       	sbiw	r24, 0x01	; 1
    2426:	f1 f7       	brne	.-4      	; 0x2424 <LCD_init+0xc8>
    2428:	9c 83       	std	Y+4, r25	; 0x04
    242a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    242c:	8d 81       	ldd	r24, Y+5	; 0x05
    242e:	9e 81       	ldd	r25, Y+6	; 0x06
    2430:	01 97       	sbiw	r24, 0x01	; 1
    2432:	9e 83       	std	Y+6, r25	; 0x06
    2434:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2436:	8d 81       	ldd	r24, Y+5	; 0x05
    2438:	9e 81       	ldd	r25, Y+6	; 0x06
    243a:	00 97       	sbiw	r24, 0x00	; 0
    243c:	69 f7       	brne	.-38     	; 0x2418 <LCD_init+0xbc>
    243e:	14 c0       	rjmp	.+40     	; 0x2468 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2440:	6f 81       	ldd	r22, Y+7	; 0x07
    2442:	78 85       	ldd	r23, Y+8	; 0x08
    2444:	89 85       	ldd	r24, Y+9	; 0x09
    2446:	9a 85       	ldd	r25, Y+10	; 0x0a
    2448:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    244c:	dc 01       	movw	r26, r24
    244e:	cb 01       	movw	r24, r22
    2450:	9e 83       	std	Y+6, r25	; 0x06
    2452:	8d 83       	std	Y+5, r24	; 0x05
    2454:	8d 81       	ldd	r24, Y+5	; 0x05
    2456:	9e 81       	ldd	r25, Y+6	; 0x06
    2458:	9a 83       	std	Y+2, r25	; 0x02
    245a:	89 83       	std	Y+1, r24	; 0x01
    245c:	89 81       	ldd	r24, Y+1	; 0x01
    245e:	9a 81       	ldd	r25, Y+2	; 0x02
    2460:	01 97       	sbiw	r24, 0x01	; 1
    2462:	f1 f7       	brne	.-4      	; 0x2460 <LCD_init+0x104>
    2464:	9a 83       	std	Y+2, r25	; 0x02
    2466:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    2468:	80 e0       	ldi	r24, 0x00	; 0
    246a:	62 e0       	ldi	r22, 0x02	; 2
    246c:	41 e0       	ldi	r20, 0x01	; 1
    246e:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    2472:	80 e0       	ldi	r24, 0x00	; 0
    2474:	63 e0       	ldi	r22, 0x03	; 3
    2476:	41 e0       	ldi	r20, 0x01	; 1
    2478:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    247c:	80 e0       	ldi	r24, 0x00	; 0
    247e:	64 e0       	ldi	r22, 0x04	; 4
    2480:	41 e0       	ldi	r20, 0x01	; 1
    2482:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    2486:	80 e0       	ldi	r24, 0x00	; 0
    2488:	65 e0       	ldi	r22, 0x05	; 5
    248a:	41 e0       	ldi	r20, 0x01	; 1
    248c:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    2490:	83 e3       	ldi	r24, 0x33	; 51
    2492:	0e 94 60 12 	call	0x24c0	; 0x24c0 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    2496:	82 e3       	ldi	r24, 0x32	; 50
    2498:	0e 94 60 12 	call	0x24c0	; 0x24c0 <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    249c:	88 e2       	ldi	r24, 0x28	; 40
    249e:	0e 94 60 12 	call	0x24c0	; 0x24c0 <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    24a2:	8c e0       	ldi	r24, 0x0C	; 12
    24a4:	0e 94 60 12 	call	0x24c0	; 0x24c0 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    24a8:	81 e0       	ldi	r24, 0x01	; 1
    24aa:	0e 94 60 12 	call	0x24c0	; 0x24c0 <LCD_sendCommand>
}
    24ae:	2e 96       	adiw	r28, 0x0e	; 14
    24b0:	0f b6       	in	r0, 0x3f	; 63
    24b2:	f8 94       	cli
    24b4:	de bf       	out	0x3e, r29	; 62
    24b6:	0f be       	out	0x3f, r0	; 63
    24b8:	cd bf       	out	0x3d, r28	; 61
    24ba:	cf 91       	pop	r28
    24bc:	df 91       	pop	r29
    24be:	08 95       	ret

000024c0 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    24c0:	0f 93       	push	r16
    24c2:	1f 93       	push	r17
    24c4:	df 93       	push	r29
    24c6:	cf 93       	push	r28
    24c8:	cd b7       	in	r28, 0x3d	; 61
    24ca:	de b7       	in	r29, 0x3e	; 62
    24cc:	c3 56       	subi	r28, 0x63	; 99
    24ce:	d0 40       	sbci	r29, 0x00	; 0
    24d0:	0f b6       	in	r0, 0x3f	; 63
    24d2:	f8 94       	cli
    24d4:	de bf       	out	0x3e, r29	; 62
    24d6:	0f be       	out	0x3f, r0	; 63
    24d8:	cd bf       	out	0x3d, r28	; 61
    24da:	fe 01       	movw	r30, r28
    24dc:	ed 59       	subi	r30, 0x9D	; 157
    24de:	ff 4f       	sbci	r31, 0xFF	; 255
    24e0:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    24e2:	80 e0       	ldi	r24, 0x00	; 0
    24e4:	60 e0       	ldi	r22, 0x00	; 0
    24e6:	40 e0       	ldi	r20, 0x00	; 0
    24e8:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <GPIO_writePin>
    24ec:	fe 01       	movw	r30, r28
    24ee:	e1 5a       	subi	r30, 0xA1	; 161
    24f0:	ff 4f       	sbci	r31, 0xFF	; 255
    24f2:	80 e0       	ldi	r24, 0x00	; 0
    24f4:	90 e0       	ldi	r25, 0x00	; 0
    24f6:	a0 e8       	ldi	r26, 0x80	; 128
    24f8:	bf e3       	ldi	r27, 0x3F	; 63
    24fa:	80 83       	st	Z, r24
    24fc:	91 83       	std	Z+1, r25	; 0x01
    24fe:	a2 83       	std	Z+2, r26	; 0x02
    2500:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2502:	8e 01       	movw	r16, r28
    2504:	05 5a       	subi	r16, 0xA5	; 165
    2506:	1f 4f       	sbci	r17, 0xFF	; 255
    2508:	fe 01       	movw	r30, r28
    250a:	e1 5a       	subi	r30, 0xA1	; 161
    250c:	ff 4f       	sbci	r31, 0xFF	; 255
    250e:	60 81       	ld	r22, Z
    2510:	71 81       	ldd	r23, Z+1	; 0x01
    2512:	82 81       	ldd	r24, Z+2	; 0x02
    2514:	93 81       	ldd	r25, Z+3	; 0x03
    2516:	20 e0       	ldi	r18, 0x00	; 0
    2518:	30 e0       	ldi	r19, 0x00	; 0
    251a:	4a ef       	ldi	r20, 0xFA	; 250
    251c:	54 e4       	ldi	r21, 0x44	; 68
    251e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2522:	dc 01       	movw	r26, r24
    2524:	cb 01       	movw	r24, r22
    2526:	f8 01       	movw	r30, r16
    2528:	80 83       	st	Z, r24
    252a:	91 83       	std	Z+1, r25	; 0x01
    252c:	a2 83       	std	Z+2, r26	; 0x02
    252e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2530:	fe 01       	movw	r30, r28
    2532:	e5 5a       	subi	r30, 0xA5	; 165
    2534:	ff 4f       	sbci	r31, 0xFF	; 255
    2536:	60 81       	ld	r22, Z
    2538:	71 81       	ldd	r23, Z+1	; 0x01
    253a:	82 81       	ldd	r24, Z+2	; 0x02
    253c:	93 81       	ldd	r25, Z+3	; 0x03
    253e:	20 e0       	ldi	r18, 0x00	; 0
    2540:	30 e0       	ldi	r19, 0x00	; 0
    2542:	40 e8       	ldi	r20, 0x80	; 128
    2544:	5f e3       	ldi	r21, 0x3F	; 63
    2546:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    254a:	88 23       	and	r24, r24
    254c:	44 f4       	brge	.+16     	; 0x255e <LCD_sendCommand+0x9e>
		__ticks = 1;
    254e:	fe 01       	movw	r30, r28
    2550:	e7 5a       	subi	r30, 0xA7	; 167
    2552:	ff 4f       	sbci	r31, 0xFF	; 255
    2554:	81 e0       	ldi	r24, 0x01	; 1
    2556:	90 e0       	ldi	r25, 0x00	; 0
    2558:	91 83       	std	Z+1, r25	; 0x01
    255a:	80 83       	st	Z, r24
    255c:	64 c0       	rjmp	.+200    	; 0x2626 <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    255e:	fe 01       	movw	r30, r28
    2560:	e5 5a       	subi	r30, 0xA5	; 165
    2562:	ff 4f       	sbci	r31, 0xFF	; 255
    2564:	60 81       	ld	r22, Z
    2566:	71 81       	ldd	r23, Z+1	; 0x01
    2568:	82 81       	ldd	r24, Z+2	; 0x02
    256a:	93 81       	ldd	r25, Z+3	; 0x03
    256c:	20 e0       	ldi	r18, 0x00	; 0
    256e:	3f ef       	ldi	r19, 0xFF	; 255
    2570:	4f e7       	ldi	r20, 0x7F	; 127
    2572:	57 e4       	ldi	r21, 0x47	; 71
    2574:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2578:	18 16       	cp	r1, r24
    257a:	0c f0       	brlt	.+2      	; 0x257e <LCD_sendCommand+0xbe>
    257c:	43 c0       	rjmp	.+134    	; 0x2604 <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    257e:	fe 01       	movw	r30, r28
    2580:	e1 5a       	subi	r30, 0xA1	; 161
    2582:	ff 4f       	sbci	r31, 0xFF	; 255
    2584:	60 81       	ld	r22, Z
    2586:	71 81       	ldd	r23, Z+1	; 0x01
    2588:	82 81       	ldd	r24, Z+2	; 0x02
    258a:	93 81       	ldd	r25, Z+3	; 0x03
    258c:	20 e0       	ldi	r18, 0x00	; 0
    258e:	30 e0       	ldi	r19, 0x00	; 0
    2590:	40 e2       	ldi	r20, 0x20	; 32
    2592:	51 e4       	ldi	r21, 0x41	; 65
    2594:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2598:	dc 01       	movw	r26, r24
    259a:	cb 01       	movw	r24, r22
    259c:	8e 01       	movw	r16, r28
    259e:	07 5a       	subi	r16, 0xA7	; 167
    25a0:	1f 4f       	sbci	r17, 0xFF	; 255
    25a2:	bc 01       	movw	r22, r24
    25a4:	cd 01       	movw	r24, r26
    25a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25aa:	dc 01       	movw	r26, r24
    25ac:	cb 01       	movw	r24, r22
    25ae:	f8 01       	movw	r30, r16
    25b0:	91 83       	std	Z+1, r25	; 0x01
    25b2:	80 83       	st	Z, r24
    25b4:	1f c0       	rjmp	.+62     	; 0x25f4 <LCD_sendCommand+0x134>
    25b6:	fe 01       	movw	r30, r28
    25b8:	e9 5a       	subi	r30, 0xA9	; 169
    25ba:	ff 4f       	sbci	r31, 0xFF	; 255
    25bc:	88 ec       	ldi	r24, 0xC8	; 200
    25be:	90 e0       	ldi	r25, 0x00	; 0
    25c0:	91 83       	std	Z+1, r25	; 0x01
    25c2:	80 83       	st	Z, r24
    25c4:	fe 01       	movw	r30, r28
    25c6:	e9 5a       	subi	r30, 0xA9	; 169
    25c8:	ff 4f       	sbci	r31, 0xFF	; 255
    25ca:	80 81       	ld	r24, Z
    25cc:	91 81       	ldd	r25, Z+1	; 0x01
    25ce:	01 97       	sbiw	r24, 0x01	; 1
    25d0:	f1 f7       	brne	.-4      	; 0x25ce <LCD_sendCommand+0x10e>
    25d2:	fe 01       	movw	r30, r28
    25d4:	e9 5a       	subi	r30, 0xA9	; 169
    25d6:	ff 4f       	sbci	r31, 0xFF	; 255
    25d8:	91 83       	std	Z+1, r25	; 0x01
    25da:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25dc:	de 01       	movw	r26, r28
    25de:	a7 5a       	subi	r26, 0xA7	; 167
    25e0:	bf 4f       	sbci	r27, 0xFF	; 255
    25e2:	fe 01       	movw	r30, r28
    25e4:	e7 5a       	subi	r30, 0xA7	; 167
    25e6:	ff 4f       	sbci	r31, 0xFF	; 255
    25e8:	80 81       	ld	r24, Z
    25ea:	91 81       	ldd	r25, Z+1	; 0x01
    25ec:	01 97       	sbiw	r24, 0x01	; 1
    25ee:	11 96       	adiw	r26, 0x01	; 1
    25f0:	9c 93       	st	X, r25
    25f2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25f4:	fe 01       	movw	r30, r28
    25f6:	e7 5a       	subi	r30, 0xA7	; 167
    25f8:	ff 4f       	sbci	r31, 0xFF	; 255
    25fa:	80 81       	ld	r24, Z
    25fc:	91 81       	ldd	r25, Z+1	; 0x01
    25fe:	00 97       	sbiw	r24, 0x00	; 0
    2600:	d1 f6       	brne	.-76     	; 0x25b6 <LCD_sendCommand+0xf6>
    2602:	27 c0       	rjmp	.+78     	; 0x2652 <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2604:	8e 01       	movw	r16, r28
    2606:	07 5a       	subi	r16, 0xA7	; 167
    2608:	1f 4f       	sbci	r17, 0xFF	; 255
    260a:	fe 01       	movw	r30, r28
    260c:	e5 5a       	subi	r30, 0xA5	; 165
    260e:	ff 4f       	sbci	r31, 0xFF	; 255
    2610:	60 81       	ld	r22, Z
    2612:	71 81       	ldd	r23, Z+1	; 0x01
    2614:	82 81       	ldd	r24, Z+2	; 0x02
    2616:	93 81       	ldd	r25, Z+3	; 0x03
    2618:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    261c:	dc 01       	movw	r26, r24
    261e:	cb 01       	movw	r24, r22
    2620:	f8 01       	movw	r30, r16
    2622:	91 83       	std	Z+1, r25	; 0x01
    2624:	80 83       	st	Z, r24
    2626:	de 01       	movw	r26, r28
    2628:	ab 5a       	subi	r26, 0xAB	; 171
    262a:	bf 4f       	sbci	r27, 0xFF	; 255
    262c:	fe 01       	movw	r30, r28
    262e:	e7 5a       	subi	r30, 0xA7	; 167
    2630:	ff 4f       	sbci	r31, 0xFF	; 255
    2632:	80 81       	ld	r24, Z
    2634:	91 81       	ldd	r25, Z+1	; 0x01
    2636:	8d 93       	st	X+, r24
    2638:	9c 93       	st	X, r25
    263a:	fe 01       	movw	r30, r28
    263c:	eb 5a       	subi	r30, 0xAB	; 171
    263e:	ff 4f       	sbci	r31, 0xFF	; 255
    2640:	80 81       	ld	r24, Z
    2642:	91 81       	ldd	r25, Z+1	; 0x01
    2644:	01 97       	sbiw	r24, 0x01	; 1
    2646:	f1 f7       	brne	.-4      	; 0x2644 <LCD_sendCommand+0x184>
    2648:	fe 01       	movw	r30, r28
    264a:	eb 5a       	subi	r30, 0xAB	; 171
    264c:	ff 4f       	sbci	r31, 0xFF	; 255
    264e:	91 83       	std	Z+1, r25	; 0x01
    2650:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2652:	80 e0       	ldi	r24, 0x00	; 0
    2654:	61 e0       	ldi	r22, 0x01	; 1
    2656:	41 e0       	ldi	r20, 0x01	; 1
    2658:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <GPIO_writePin>
    265c:	fe 01       	movw	r30, r28
    265e:	ef 5a       	subi	r30, 0xAF	; 175
    2660:	ff 4f       	sbci	r31, 0xFF	; 255
    2662:	80 e0       	ldi	r24, 0x00	; 0
    2664:	90 e0       	ldi	r25, 0x00	; 0
    2666:	a0 e8       	ldi	r26, 0x80	; 128
    2668:	bf e3       	ldi	r27, 0x3F	; 63
    266a:	80 83       	st	Z, r24
    266c:	91 83       	std	Z+1, r25	; 0x01
    266e:	a2 83       	std	Z+2, r26	; 0x02
    2670:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2672:	8e 01       	movw	r16, r28
    2674:	03 5b       	subi	r16, 0xB3	; 179
    2676:	1f 4f       	sbci	r17, 0xFF	; 255
    2678:	fe 01       	movw	r30, r28
    267a:	ef 5a       	subi	r30, 0xAF	; 175
    267c:	ff 4f       	sbci	r31, 0xFF	; 255
    267e:	60 81       	ld	r22, Z
    2680:	71 81       	ldd	r23, Z+1	; 0x01
    2682:	82 81       	ldd	r24, Z+2	; 0x02
    2684:	93 81       	ldd	r25, Z+3	; 0x03
    2686:	20 e0       	ldi	r18, 0x00	; 0
    2688:	30 e0       	ldi	r19, 0x00	; 0
    268a:	4a ef       	ldi	r20, 0xFA	; 250
    268c:	54 e4       	ldi	r21, 0x44	; 68
    268e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2692:	dc 01       	movw	r26, r24
    2694:	cb 01       	movw	r24, r22
    2696:	f8 01       	movw	r30, r16
    2698:	80 83       	st	Z, r24
    269a:	91 83       	std	Z+1, r25	; 0x01
    269c:	a2 83       	std	Z+2, r26	; 0x02
    269e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    26a0:	fe 01       	movw	r30, r28
    26a2:	e3 5b       	subi	r30, 0xB3	; 179
    26a4:	ff 4f       	sbci	r31, 0xFF	; 255
    26a6:	60 81       	ld	r22, Z
    26a8:	71 81       	ldd	r23, Z+1	; 0x01
    26aa:	82 81       	ldd	r24, Z+2	; 0x02
    26ac:	93 81       	ldd	r25, Z+3	; 0x03
    26ae:	20 e0       	ldi	r18, 0x00	; 0
    26b0:	30 e0       	ldi	r19, 0x00	; 0
    26b2:	40 e8       	ldi	r20, 0x80	; 128
    26b4:	5f e3       	ldi	r21, 0x3F	; 63
    26b6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26ba:	88 23       	and	r24, r24
    26bc:	44 f4       	brge	.+16     	; 0x26ce <LCD_sendCommand+0x20e>
		__ticks = 1;
    26be:	fe 01       	movw	r30, r28
    26c0:	e5 5b       	subi	r30, 0xB5	; 181
    26c2:	ff 4f       	sbci	r31, 0xFF	; 255
    26c4:	81 e0       	ldi	r24, 0x01	; 1
    26c6:	90 e0       	ldi	r25, 0x00	; 0
    26c8:	91 83       	std	Z+1, r25	; 0x01
    26ca:	80 83       	st	Z, r24
    26cc:	64 c0       	rjmp	.+200    	; 0x2796 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    26ce:	fe 01       	movw	r30, r28
    26d0:	e3 5b       	subi	r30, 0xB3	; 179
    26d2:	ff 4f       	sbci	r31, 0xFF	; 255
    26d4:	60 81       	ld	r22, Z
    26d6:	71 81       	ldd	r23, Z+1	; 0x01
    26d8:	82 81       	ldd	r24, Z+2	; 0x02
    26da:	93 81       	ldd	r25, Z+3	; 0x03
    26dc:	20 e0       	ldi	r18, 0x00	; 0
    26de:	3f ef       	ldi	r19, 0xFF	; 255
    26e0:	4f e7       	ldi	r20, 0x7F	; 127
    26e2:	57 e4       	ldi	r21, 0x47	; 71
    26e4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26e8:	18 16       	cp	r1, r24
    26ea:	0c f0       	brlt	.+2      	; 0x26ee <LCD_sendCommand+0x22e>
    26ec:	43 c0       	rjmp	.+134    	; 0x2774 <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26ee:	fe 01       	movw	r30, r28
    26f0:	ef 5a       	subi	r30, 0xAF	; 175
    26f2:	ff 4f       	sbci	r31, 0xFF	; 255
    26f4:	60 81       	ld	r22, Z
    26f6:	71 81       	ldd	r23, Z+1	; 0x01
    26f8:	82 81       	ldd	r24, Z+2	; 0x02
    26fa:	93 81       	ldd	r25, Z+3	; 0x03
    26fc:	20 e0       	ldi	r18, 0x00	; 0
    26fe:	30 e0       	ldi	r19, 0x00	; 0
    2700:	40 e2       	ldi	r20, 0x20	; 32
    2702:	51 e4       	ldi	r21, 0x41	; 65
    2704:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2708:	dc 01       	movw	r26, r24
    270a:	cb 01       	movw	r24, r22
    270c:	8e 01       	movw	r16, r28
    270e:	05 5b       	subi	r16, 0xB5	; 181
    2710:	1f 4f       	sbci	r17, 0xFF	; 255
    2712:	bc 01       	movw	r22, r24
    2714:	cd 01       	movw	r24, r26
    2716:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    271a:	dc 01       	movw	r26, r24
    271c:	cb 01       	movw	r24, r22
    271e:	f8 01       	movw	r30, r16
    2720:	91 83       	std	Z+1, r25	; 0x01
    2722:	80 83       	st	Z, r24
    2724:	1f c0       	rjmp	.+62     	; 0x2764 <LCD_sendCommand+0x2a4>
    2726:	fe 01       	movw	r30, r28
    2728:	e7 5b       	subi	r30, 0xB7	; 183
    272a:	ff 4f       	sbci	r31, 0xFF	; 255
    272c:	88 ec       	ldi	r24, 0xC8	; 200
    272e:	90 e0       	ldi	r25, 0x00	; 0
    2730:	91 83       	std	Z+1, r25	; 0x01
    2732:	80 83       	st	Z, r24
    2734:	fe 01       	movw	r30, r28
    2736:	e7 5b       	subi	r30, 0xB7	; 183
    2738:	ff 4f       	sbci	r31, 0xFF	; 255
    273a:	80 81       	ld	r24, Z
    273c:	91 81       	ldd	r25, Z+1	; 0x01
    273e:	01 97       	sbiw	r24, 0x01	; 1
    2740:	f1 f7       	brne	.-4      	; 0x273e <LCD_sendCommand+0x27e>
    2742:	fe 01       	movw	r30, r28
    2744:	e7 5b       	subi	r30, 0xB7	; 183
    2746:	ff 4f       	sbci	r31, 0xFF	; 255
    2748:	91 83       	std	Z+1, r25	; 0x01
    274a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    274c:	de 01       	movw	r26, r28
    274e:	a5 5b       	subi	r26, 0xB5	; 181
    2750:	bf 4f       	sbci	r27, 0xFF	; 255
    2752:	fe 01       	movw	r30, r28
    2754:	e5 5b       	subi	r30, 0xB5	; 181
    2756:	ff 4f       	sbci	r31, 0xFF	; 255
    2758:	80 81       	ld	r24, Z
    275a:	91 81       	ldd	r25, Z+1	; 0x01
    275c:	01 97       	sbiw	r24, 0x01	; 1
    275e:	11 96       	adiw	r26, 0x01	; 1
    2760:	9c 93       	st	X, r25
    2762:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2764:	fe 01       	movw	r30, r28
    2766:	e5 5b       	subi	r30, 0xB5	; 181
    2768:	ff 4f       	sbci	r31, 0xFF	; 255
    276a:	80 81       	ld	r24, Z
    276c:	91 81       	ldd	r25, Z+1	; 0x01
    276e:	00 97       	sbiw	r24, 0x00	; 0
    2770:	d1 f6       	brne	.-76     	; 0x2726 <LCD_sendCommand+0x266>
    2772:	27 c0       	rjmp	.+78     	; 0x27c2 <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2774:	8e 01       	movw	r16, r28
    2776:	05 5b       	subi	r16, 0xB5	; 181
    2778:	1f 4f       	sbci	r17, 0xFF	; 255
    277a:	fe 01       	movw	r30, r28
    277c:	e3 5b       	subi	r30, 0xB3	; 179
    277e:	ff 4f       	sbci	r31, 0xFF	; 255
    2780:	60 81       	ld	r22, Z
    2782:	71 81       	ldd	r23, Z+1	; 0x01
    2784:	82 81       	ldd	r24, Z+2	; 0x02
    2786:	93 81       	ldd	r25, Z+3	; 0x03
    2788:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    278c:	dc 01       	movw	r26, r24
    278e:	cb 01       	movw	r24, r22
    2790:	f8 01       	movw	r30, r16
    2792:	91 83       	std	Z+1, r25	; 0x01
    2794:	80 83       	st	Z, r24
    2796:	de 01       	movw	r26, r28
    2798:	a9 5b       	subi	r26, 0xB9	; 185
    279a:	bf 4f       	sbci	r27, 0xFF	; 255
    279c:	fe 01       	movw	r30, r28
    279e:	e5 5b       	subi	r30, 0xB5	; 181
    27a0:	ff 4f       	sbci	r31, 0xFF	; 255
    27a2:	80 81       	ld	r24, Z
    27a4:	91 81       	ldd	r25, Z+1	; 0x01
    27a6:	8d 93       	st	X+, r24
    27a8:	9c 93       	st	X, r25
    27aa:	fe 01       	movw	r30, r28
    27ac:	e9 5b       	subi	r30, 0xB9	; 185
    27ae:	ff 4f       	sbci	r31, 0xFF	; 255
    27b0:	80 81       	ld	r24, Z
    27b2:	91 81       	ldd	r25, Z+1	; 0x01
    27b4:	01 97       	sbiw	r24, 0x01	; 1
    27b6:	f1 f7       	brne	.-4      	; 0x27b4 <LCD_sendCommand+0x2f4>
    27b8:	fe 01       	movw	r30, r28
    27ba:	e9 5b       	subi	r30, 0xB9	; 185
    27bc:	ff 4f       	sbci	r31, 0xFF	; 255
    27be:	91 83       	std	Z+1, r25	; 0x01
    27c0:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    27c2:	fe 01       	movw	r30, r28
    27c4:	ed 59       	subi	r30, 0x9D	; 157
    27c6:	ff 4f       	sbci	r31, 0xFF	; 255
    27c8:	80 81       	ld	r24, Z
    27ca:	88 2f       	mov	r24, r24
    27cc:	90 e0       	ldi	r25, 0x00	; 0
    27ce:	80 71       	andi	r24, 0x10	; 16
    27d0:	90 70       	andi	r25, 0x00	; 0
    27d2:	95 95       	asr	r25
    27d4:	87 95       	ror	r24
    27d6:	95 95       	asr	r25
    27d8:	87 95       	ror	r24
    27da:	95 95       	asr	r25
    27dc:	87 95       	ror	r24
    27de:	95 95       	asr	r25
    27e0:	87 95       	ror	r24
    27e2:	98 2f       	mov	r25, r24
    27e4:	80 e0       	ldi	r24, 0x00	; 0
    27e6:	62 e0       	ldi	r22, 0x02	; 2
    27e8:	49 2f       	mov	r20, r25
    27ea:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    27ee:	fe 01       	movw	r30, r28
    27f0:	ed 59       	subi	r30, 0x9D	; 157
    27f2:	ff 4f       	sbci	r31, 0xFF	; 255
    27f4:	80 81       	ld	r24, Z
    27f6:	88 2f       	mov	r24, r24
    27f8:	90 e0       	ldi	r25, 0x00	; 0
    27fa:	80 72       	andi	r24, 0x20	; 32
    27fc:	90 70       	andi	r25, 0x00	; 0
    27fe:	95 95       	asr	r25
    2800:	87 95       	ror	r24
    2802:	95 95       	asr	r25
    2804:	87 95       	ror	r24
    2806:	95 95       	asr	r25
    2808:	87 95       	ror	r24
    280a:	95 95       	asr	r25
    280c:	87 95       	ror	r24
    280e:	95 95       	asr	r25
    2810:	87 95       	ror	r24
    2812:	98 2f       	mov	r25, r24
    2814:	80 e0       	ldi	r24, 0x00	; 0
    2816:	63 e0       	ldi	r22, 0x03	; 3
    2818:	49 2f       	mov	r20, r25
    281a:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    281e:	fe 01       	movw	r30, r28
    2820:	ed 59       	subi	r30, 0x9D	; 157
    2822:	ff 4f       	sbci	r31, 0xFF	; 255
    2824:	80 81       	ld	r24, Z
    2826:	88 2f       	mov	r24, r24
    2828:	90 e0       	ldi	r25, 0x00	; 0
    282a:	80 74       	andi	r24, 0x40	; 64
    282c:	90 70       	andi	r25, 0x00	; 0
    282e:	08 2e       	mov	r0, r24
    2830:	89 2f       	mov	r24, r25
    2832:	00 0c       	add	r0, r0
    2834:	88 1f       	adc	r24, r24
    2836:	99 0b       	sbc	r25, r25
    2838:	00 0c       	add	r0, r0
    283a:	88 1f       	adc	r24, r24
    283c:	99 1f       	adc	r25, r25
    283e:	98 2f       	mov	r25, r24
    2840:	80 e0       	ldi	r24, 0x00	; 0
    2842:	64 e0       	ldi	r22, 0x04	; 4
    2844:	49 2f       	mov	r20, r25
    2846:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    284a:	fe 01       	movw	r30, r28
    284c:	ed 59       	subi	r30, 0x9D	; 157
    284e:	ff 4f       	sbci	r31, 0xFF	; 255
    2850:	80 81       	ld	r24, Z
    2852:	98 2f       	mov	r25, r24
    2854:	99 1f       	adc	r25, r25
    2856:	99 27       	eor	r25, r25
    2858:	99 1f       	adc	r25, r25
    285a:	80 e0       	ldi	r24, 0x00	; 0
    285c:	65 e0       	ldi	r22, 0x05	; 5
    285e:	49 2f       	mov	r20, r25
    2860:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <GPIO_writePin>
    2864:	fe 01       	movw	r30, r28
    2866:	ed 5b       	subi	r30, 0xBD	; 189
    2868:	ff 4f       	sbci	r31, 0xFF	; 255
    286a:	80 e0       	ldi	r24, 0x00	; 0
    286c:	90 e0       	ldi	r25, 0x00	; 0
    286e:	a0 e8       	ldi	r26, 0x80	; 128
    2870:	bf e3       	ldi	r27, 0x3F	; 63
    2872:	80 83       	st	Z, r24
    2874:	91 83       	std	Z+1, r25	; 0x01
    2876:	a2 83       	std	Z+2, r26	; 0x02
    2878:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    287a:	8e 01       	movw	r16, r28
    287c:	01 5c       	subi	r16, 0xC1	; 193
    287e:	1f 4f       	sbci	r17, 0xFF	; 255
    2880:	fe 01       	movw	r30, r28
    2882:	ed 5b       	subi	r30, 0xBD	; 189
    2884:	ff 4f       	sbci	r31, 0xFF	; 255
    2886:	60 81       	ld	r22, Z
    2888:	71 81       	ldd	r23, Z+1	; 0x01
    288a:	82 81       	ldd	r24, Z+2	; 0x02
    288c:	93 81       	ldd	r25, Z+3	; 0x03
    288e:	20 e0       	ldi	r18, 0x00	; 0
    2890:	30 e0       	ldi	r19, 0x00	; 0
    2892:	4a ef       	ldi	r20, 0xFA	; 250
    2894:	54 e4       	ldi	r21, 0x44	; 68
    2896:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    289a:	dc 01       	movw	r26, r24
    289c:	cb 01       	movw	r24, r22
    289e:	f8 01       	movw	r30, r16
    28a0:	80 83       	st	Z, r24
    28a2:	91 83       	std	Z+1, r25	; 0x01
    28a4:	a2 83       	std	Z+2, r26	; 0x02
    28a6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    28a8:	fe 01       	movw	r30, r28
    28aa:	ff 96       	adiw	r30, 0x3f	; 63
    28ac:	60 81       	ld	r22, Z
    28ae:	71 81       	ldd	r23, Z+1	; 0x01
    28b0:	82 81       	ldd	r24, Z+2	; 0x02
    28b2:	93 81       	ldd	r25, Z+3	; 0x03
    28b4:	20 e0       	ldi	r18, 0x00	; 0
    28b6:	30 e0       	ldi	r19, 0x00	; 0
    28b8:	40 e8       	ldi	r20, 0x80	; 128
    28ba:	5f e3       	ldi	r21, 0x3F	; 63
    28bc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28c0:	88 23       	and	r24, r24
    28c2:	2c f4       	brge	.+10     	; 0x28ce <LCD_sendCommand+0x40e>
		__ticks = 1;
    28c4:	81 e0       	ldi	r24, 0x01	; 1
    28c6:	90 e0       	ldi	r25, 0x00	; 0
    28c8:	9e af       	std	Y+62, r25	; 0x3e
    28ca:	8d af       	std	Y+61, r24	; 0x3d
    28cc:	46 c0       	rjmp	.+140    	; 0x295a <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    28ce:	fe 01       	movw	r30, r28
    28d0:	ff 96       	adiw	r30, 0x3f	; 63
    28d2:	60 81       	ld	r22, Z
    28d4:	71 81       	ldd	r23, Z+1	; 0x01
    28d6:	82 81       	ldd	r24, Z+2	; 0x02
    28d8:	93 81       	ldd	r25, Z+3	; 0x03
    28da:	20 e0       	ldi	r18, 0x00	; 0
    28dc:	3f ef       	ldi	r19, 0xFF	; 255
    28de:	4f e7       	ldi	r20, 0x7F	; 127
    28e0:	57 e4       	ldi	r21, 0x47	; 71
    28e2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28e6:	18 16       	cp	r1, r24
    28e8:	64 f5       	brge	.+88     	; 0x2942 <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28ea:	fe 01       	movw	r30, r28
    28ec:	ed 5b       	subi	r30, 0xBD	; 189
    28ee:	ff 4f       	sbci	r31, 0xFF	; 255
    28f0:	60 81       	ld	r22, Z
    28f2:	71 81       	ldd	r23, Z+1	; 0x01
    28f4:	82 81       	ldd	r24, Z+2	; 0x02
    28f6:	93 81       	ldd	r25, Z+3	; 0x03
    28f8:	20 e0       	ldi	r18, 0x00	; 0
    28fa:	30 e0       	ldi	r19, 0x00	; 0
    28fc:	40 e2       	ldi	r20, 0x20	; 32
    28fe:	51 e4       	ldi	r21, 0x41	; 65
    2900:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2904:	dc 01       	movw	r26, r24
    2906:	cb 01       	movw	r24, r22
    2908:	bc 01       	movw	r22, r24
    290a:	cd 01       	movw	r24, r26
    290c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2910:	dc 01       	movw	r26, r24
    2912:	cb 01       	movw	r24, r22
    2914:	9e af       	std	Y+62, r25	; 0x3e
    2916:	8d af       	std	Y+61, r24	; 0x3d
    2918:	0f c0       	rjmp	.+30     	; 0x2938 <LCD_sendCommand+0x478>
    291a:	88 ec       	ldi	r24, 0xC8	; 200
    291c:	90 e0       	ldi	r25, 0x00	; 0
    291e:	9c af       	std	Y+60, r25	; 0x3c
    2920:	8b af       	std	Y+59, r24	; 0x3b
    2922:	8b ad       	ldd	r24, Y+59	; 0x3b
    2924:	9c ad       	ldd	r25, Y+60	; 0x3c
    2926:	01 97       	sbiw	r24, 0x01	; 1
    2928:	f1 f7       	brne	.-4      	; 0x2926 <LCD_sendCommand+0x466>
    292a:	9c af       	std	Y+60, r25	; 0x3c
    292c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    292e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2930:	9e ad       	ldd	r25, Y+62	; 0x3e
    2932:	01 97       	sbiw	r24, 0x01	; 1
    2934:	9e af       	std	Y+62, r25	; 0x3e
    2936:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2938:	8d ad       	ldd	r24, Y+61	; 0x3d
    293a:	9e ad       	ldd	r25, Y+62	; 0x3e
    293c:	00 97       	sbiw	r24, 0x00	; 0
    293e:	69 f7       	brne	.-38     	; 0x291a <LCD_sendCommand+0x45a>
    2940:	16 c0       	rjmp	.+44     	; 0x296e <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2942:	fe 01       	movw	r30, r28
    2944:	ff 96       	adiw	r30, 0x3f	; 63
    2946:	60 81       	ld	r22, Z
    2948:	71 81       	ldd	r23, Z+1	; 0x01
    294a:	82 81       	ldd	r24, Z+2	; 0x02
    294c:	93 81       	ldd	r25, Z+3	; 0x03
    294e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2952:	dc 01       	movw	r26, r24
    2954:	cb 01       	movw	r24, r22
    2956:	9e af       	std	Y+62, r25	; 0x3e
    2958:	8d af       	std	Y+61, r24	; 0x3d
    295a:	8d ad       	ldd	r24, Y+61	; 0x3d
    295c:	9e ad       	ldd	r25, Y+62	; 0x3e
    295e:	9a af       	std	Y+58, r25	; 0x3a
    2960:	89 af       	std	Y+57, r24	; 0x39
    2962:	89 ad       	ldd	r24, Y+57	; 0x39
    2964:	9a ad       	ldd	r25, Y+58	; 0x3a
    2966:	01 97       	sbiw	r24, 0x01	; 1
    2968:	f1 f7       	brne	.-4      	; 0x2966 <LCD_sendCommand+0x4a6>
    296a:	9a af       	std	Y+58, r25	; 0x3a
    296c:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    296e:	80 e0       	ldi	r24, 0x00	; 0
    2970:	61 e0       	ldi	r22, 0x01	; 1
    2972:	40 e0       	ldi	r20, 0x00	; 0
    2974:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <GPIO_writePin>
    2978:	80 e0       	ldi	r24, 0x00	; 0
    297a:	90 e0       	ldi	r25, 0x00	; 0
    297c:	a0 e8       	ldi	r26, 0x80	; 128
    297e:	bf e3       	ldi	r27, 0x3F	; 63
    2980:	8d ab       	std	Y+53, r24	; 0x35
    2982:	9e ab       	std	Y+54, r25	; 0x36
    2984:	af ab       	std	Y+55, r26	; 0x37
    2986:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2988:	6d a9       	ldd	r22, Y+53	; 0x35
    298a:	7e a9       	ldd	r23, Y+54	; 0x36
    298c:	8f a9       	ldd	r24, Y+55	; 0x37
    298e:	98 ad       	ldd	r25, Y+56	; 0x38
    2990:	20 e0       	ldi	r18, 0x00	; 0
    2992:	30 e0       	ldi	r19, 0x00	; 0
    2994:	4a ef       	ldi	r20, 0xFA	; 250
    2996:	54 e4       	ldi	r21, 0x44	; 68
    2998:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    299c:	dc 01       	movw	r26, r24
    299e:	cb 01       	movw	r24, r22
    29a0:	89 ab       	std	Y+49, r24	; 0x31
    29a2:	9a ab       	std	Y+50, r25	; 0x32
    29a4:	ab ab       	std	Y+51, r26	; 0x33
    29a6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    29a8:	69 a9       	ldd	r22, Y+49	; 0x31
    29aa:	7a a9       	ldd	r23, Y+50	; 0x32
    29ac:	8b a9       	ldd	r24, Y+51	; 0x33
    29ae:	9c a9       	ldd	r25, Y+52	; 0x34
    29b0:	20 e0       	ldi	r18, 0x00	; 0
    29b2:	30 e0       	ldi	r19, 0x00	; 0
    29b4:	40 e8       	ldi	r20, 0x80	; 128
    29b6:	5f e3       	ldi	r21, 0x3F	; 63
    29b8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29bc:	88 23       	and	r24, r24
    29be:	2c f4       	brge	.+10     	; 0x29ca <LCD_sendCommand+0x50a>
		__ticks = 1;
    29c0:	81 e0       	ldi	r24, 0x01	; 1
    29c2:	90 e0       	ldi	r25, 0x00	; 0
    29c4:	98 ab       	std	Y+48, r25	; 0x30
    29c6:	8f a7       	std	Y+47, r24	; 0x2f
    29c8:	3f c0       	rjmp	.+126    	; 0x2a48 <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    29ca:	69 a9       	ldd	r22, Y+49	; 0x31
    29cc:	7a a9       	ldd	r23, Y+50	; 0x32
    29ce:	8b a9       	ldd	r24, Y+51	; 0x33
    29d0:	9c a9       	ldd	r25, Y+52	; 0x34
    29d2:	20 e0       	ldi	r18, 0x00	; 0
    29d4:	3f ef       	ldi	r19, 0xFF	; 255
    29d6:	4f e7       	ldi	r20, 0x7F	; 127
    29d8:	57 e4       	ldi	r21, 0x47	; 71
    29da:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29de:	18 16       	cp	r1, r24
    29e0:	4c f5       	brge	.+82     	; 0x2a34 <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29e2:	6d a9       	ldd	r22, Y+53	; 0x35
    29e4:	7e a9       	ldd	r23, Y+54	; 0x36
    29e6:	8f a9       	ldd	r24, Y+55	; 0x37
    29e8:	98 ad       	ldd	r25, Y+56	; 0x38
    29ea:	20 e0       	ldi	r18, 0x00	; 0
    29ec:	30 e0       	ldi	r19, 0x00	; 0
    29ee:	40 e2       	ldi	r20, 0x20	; 32
    29f0:	51 e4       	ldi	r21, 0x41	; 65
    29f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29f6:	dc 01       	movw	r26, r24
    29f8:	cb 01       	movw	r24, r22
    29fa:	bc 01       	movw	r22, r24
    29fc:	cd 01       	movw	r24, r26
    29fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a02:	dc 01       	movw	r26, r24
    2a04:	cb 01       	movw	r24, r22
    2a06:	98 ab       	std	Y+48, r25	; 0x30
    2a08:	8f a7       	std	Y+47, r24	; 0x2f
    2a0a:	0f c0       	rjmp	.+30     	; 0x2a2a <LCD_sendCommand+0x56a>
    2a0c:	88 ec       	ldi	r24, 0xC8	; 200
    2a0e:	90 e0       	ldi	r25, 0x00	; 0
    2a10:	9e a7       	std	Y+46, r25	; 0x2e
    2a12:	8d a7       	std	Y+45, r24	; 0x2d
    2a14:	8d a5       	ldd	r24, Y+45	; 0x2d
    2a16:	9e a5       	ldd	r25, Y+46	; 0x2e
    2a18:	01 97       	sbiw	r24, 0x01	; 1
    2a1a:	f1 f7       	brne	.-4      	; 0x2a18 <LCD_sendCommand+0x558>
    2a1c:	9e a7       	std	Y+46, r25	; 0x2e
    2a1e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a20:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a22:	98 a9       	ldd	r25, Y+48	; 0x30
    2a24:	01 97       	sbiw	r24, 0x01	; 1
    2a26:	98 ab       	std	Y+48, r25	; 0x30
    2a28:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a2a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a2c:	98 a9       	ldd	r25, Y+48	; 0x30
    2a2e:	00 97       	sbiw	r24, 0x00	; 0
    2a30:	69 f7       	brne	.-38     	; 0x2a0c <LCD_sendCommand+0x54c>
    2a32:	14 c0       	rjmp	.+40     	; 0x2a5c <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a34:	69 a9       	ldd	r22, Y+49	; 0x31
    2a36:	7a a9       	ldd	r23, Y+50	; 0x32
    2a38:	8b a9       	ldd	r24, Y+51	; 0x33
    2a3a:	9c a9       	ldd	r25, Y+52	; 0x34
    2a3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a40:	dc 01       	movw	r26, r24
    2a42:	cb 01       	movw	r24, r22
    2a44:	98 ab       	std	Y+48, r25	; 0x30
    2a46:	8f a7       	std	Y+47, r24	; 0x2f
    2a48:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a4a:	98 a9       	ldd	r25, Y+48	; 0x30
    2a4c:	9c a7       	std	Y+44, r25	; 0x2c
    2a4e:	8b a7       	std	Y+43, r24	; 0x2b
    2a50:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a52:	9c a5       	ldd	r25, Y+44	; 0x2c
    2a54:	01 97       	sbiw	r24, 0x01	; 1
    2a56:	f1 f7       	brne	.-4      	; 0x2a54 <LCD_sendCommand+0x594>
    2a58:	9c a7       	std	Y+44, r25	; 0x2c
    2a5a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2a5c:	80 e0       	ldi	r24, 0x00	; 0
    2a5e:	61 e0       	ldi	r22, 0x01	; 1
    2a60:	41 e0       	ldi	r20, 0x01	; 1
    2a62:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <GPIO_writePin>
    2a66:	80 e0       	ldi	r24, 0x00	; 0
    2a68:	90 e0       	ldi	r25, 0x00	; 0
    2a6a:	a0 e8       	ldi	r26, 0x80	; 128
    2a6c:	bf e3       	ldi	r27, 0x3F	; 63
    2a6e:	8f a3       	std	Y+39, r24	; 0x27
    2a70:	98 a7       	std	Y+40, r25	; 0x28
    2a72:	a9 a7       	std	Y+41, r26	; 0x29
    2a74:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a76:	6f a1       	ldd	r22, Y+39	; 0x27
    2a78:	78 a5       	ldd	r23, Y+40	; 0x28
    2a7a:	89 a5       	ldd	r24, Y+41	; 0x29
    2a7c:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a7e:	20 e0       	ldi	r18, 0x00	; 0
    2a80:	30 e0       	ldi	r19, 0x00	; 0
    2a82:	4a ef       	ldi	r20, 0xFA	; 250
    2a84:	54 e4       	ldi	r21, 0x44	; 68
    2a86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a8a:	dc 01       	movw	r26, r24
    2a8c:	cb 01       	movw	r24, r22
    2a8e:	8b a3       	std	Y+35, r24	; 0x23
    2a90:	9c a3       	std	Y+36, r25	; 0x24
    2a92:	ad a3       	std	Y+37, r26	; 0x25
    2a94:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2a96:	6b a1       	ldd	r22, Y+35	; 0x23
    2a98:	7c a1       	ldd	r23, Y+36	; 0x24
    2a9a:	8d a1       	ldd	r24, Y+37	; 0x25
    2a9c:	9e a1       	ldd	r25, Y+38	; 0x26
    2a9e:	20 e0       	ldi	r18, 0x00	; 0
    2aa0:	30 e0       	ldi	r19, 0x00	; 0
    2aa2:	40 e8       	ldi	r20, 0x80	; 128
    2aa4:	5f e3       	ldi	r21, 0x3F	; 63
    2aa6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2aaa:	88 23       	and	r24, r24
    2aac:	2c f4       	brge	.+10     	; 0x2ab8 <LCD_sendCommand+0x5f8>
		__ticks = 1;
    2aae:	81 e0       	ldi	r24, 0x01	; 1
    2ab0:	90 e0       	ldi	r25, 0x00	; 0
    2ab2:	9a a3       	std	Y+34, r25	; 0x22
    2ab4:	89 a3       	std	Y+33, r24	; 0x21
    2ab6:	3f c0       	rjmp	.+126    	; 0x2b36 <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    2ab8:	6b a1       	ldd	r22, Y+35	; 0x23
    2aba:	7c a1       	ldd	r23, Y+36	; 0x24
    2abc:	8d a1       	ldd	r24, Y+37	; 0x25
    2abe:	9e a1       	ldd	r25, Y+38	; 0x26
    2ac0:	20 e0       	ldi	r18, 0x00	; 0
    2ac2:	3f ef       	ldi	r19, 0xFF	; 255
    2ac4:	4f e7       	ldi	r20, 0x7F	; 127
    2ac6:	57 e4       	ldi	r21, 0x47	; 71
    2ac8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2acc:	18 16       	cp	r1, r24
    2ace:	4c f5       	brge	.+82     	; 0x2b22 <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ad0:	6f a1       	ldd	r22, Y+39	; 0x27
    2ad2:	78 a5       	ldd	r23, Y+40	; 0x28
    2ad4:	89 a5       	ldd	r24, Y+41	; 0x29
    2ad6:	9a a5       	ldd	r25, Y+42	; 0x2a
    2ad8:	20 e0       	ldi	r18, 0x00	; 0
    2ada:	30 e0       	ldi	r19, 0x00	; 0
    2adc:	40 e2       	ldi	r20, 0x20	; 32
    2ade:	51 e4       	ldi	r21, 0x41	; 65
    2ae0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ae4:	dc 01       	movw	r26, r24
    2ae6:	cb 01       	movw	r24, r22
    2ae8:	bc 01       	movw	r22, r24
    2aea:	cd 01       	movw	r24, r26
    2aec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2af0:	dc 01       	movw	r26, r24
    2af2:	cb 01       	movw	r24, r22
    2af4:	9a a3       	std	Y+34, r25	; 0x22
    2af6:	89 a3       	std	Y+33, r24	; 0x21
    2af8:	0f c0       	rjmp	.+30     	; 0x2b18 <LCD_sendCommand+0x658>
    2afa:	88 ec       	ldi	r24, 0xC8	; 200
    2afc:	90 e0       	ldi	r25, 0x00	; 0
    2afe:	98 a3       	std	Y+32, r25	; 0x20
    2b00:	8f 8f       	std	Y+31, r24	; 0x1f
    2b02:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2b04:	98 a1       	ldd	r25, Y+32	; 0x20
    2b06:	01 97       	sbiw	r24, 0x01	; 1
    2b08:	f1 f7       	brne	.-4      	; 0x2b06 <LCD_sendCommand+0x646>
    2b0a:	98 a3       	std	Y+32, r25	; 0x20
    2b0c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b0e:	89 a1       	ldd	r24, Y+33	; 0x21
    2b10:	9a a1       	ldd	r25, Y+34	; 0x22
    2b12:	01 97       	sbiw	r24, 0x01	; 1
    2b14:	9a a3       	std	Y+34, r25	; 0x22
    2b16:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b18:	89 a1       	ldd	r24, Y+33	; 0x21
    2b1a:	9a a1       	ldd	r25, Y+34	; 0x22
    2b1c:	00 97       	sbiw	r24, 0x00	; 0
    2b1e:	69 f7       	brne	.-38     	; 0x2afa <LCD_sendCommand+0x63a>
    2b20:	14 c0       	rjmp	.+40     	; 0x2b4a <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b22:	6b a1       	ldd	r22, Y+35	; 0x23
    2b24:	7c a1       	ldd	r23, Y+36	; 0x24
    2b26:	8d a1       	ldd	r24, Y+37	; 0x25
    2b28:	9e a1       	ldd	r25, Y+38	; 0x26
    2b2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b2e:	dc 01       	movw	r26, r24
    2b30:	cb 01       	movw	r24, r22
    2b32:	9a a3       	std	Y+34, r25	; 0x22
    2b34:	89 a3       	std	Y+33, r24	; 0x21
    2b36:	89 a1       	ldd	r24, Y+33	; 0x21
    2b38:	9a a1       	ldd	r25, Y+34	; 0x22
    2b3a:	9e 8f       	std	Y+30, r25	; 0x1e
    2b3c:	8d 8f       	std	Y+29, r24	; 0x1d
    2b3e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b40:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2b42:	01 97       	sbiw	r24, 0x01	; 1
    2b44:	f1 f7       	brne	.-4      	; 0x2b42 <LCD_sendCommand+0x682>
    2b46:	9e 8f       	std	Y+30, r25	; 0x1e
    2b48:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    2b4a:	fe 01       	movw	r30, r28
    2b4c:	ed 59       	subi	r30, 0x9D	; 157
    2b4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b50:	80 81       	ld	r24, Z
    2b52:	98 2f       	mov	r25, r24
    2b54:	91 70       	andi	r25, 0x01	; 1
    2b56:	80 e0       	ldi	r24, 0x00	; 0
    2b58:	62 e0       	ldi	r22, 0x02	; 2
    2b5a:	49 2f       	mov	r20, r25
    2b5c:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    2b60:	fe 01       	movw	r30, r28
    2b62:	ed 59       	subi	r30, 0x9D	; 157
    2b64:	ff 4f       	sbci	r31, 0xFF	; 255
    2b66:	80 81       	ld	r24, Z
    2b68:	88 2f       	mov	r24, r24
    2b6a:	90 e0       	ldi	r25, 0x00	; 0
    2b6c:	82 70       	andi	r24, 0x02	; 2
    2b6e:	90 70       	andi	r25, 0x00	; 0
    2b70:	95 95       	asr	r25
    2b72:	87 95       	ror	r24
    2b74:	98 2f       	mov	r25, r24
    2b76:	80 e0       	ldi	r24, 0x00	; 0
    2b78:	63 e0       	ldi	r22, 0x03	; 3
    2b7a:	49 2f       	mov	r20, r25
    2b7c:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    2b80:	fe 01       	movw	r30, r28
    2b82:	ed 59       	subi	r30, 0x9D	; 157
    2b84:	ff 4f       	sbci	r31, 0xFF	; 255
    2b86:	80 81       	ld	r24, Z
    2b88:	88 2f       	mov	r24, r24
    2b8a:	90 e0       	ldi	r25, 0x00	; 0
    2b8c:	84 70       	andi	r24, 0x04	; 4
    2b8e:	90 70       	andi	r25, 0x00	; 0
    2b90:	95 95       	asr	r25
    2b92:	87 95       	ror	r24
    2b94:	95 95       	asr	r25
    2b96:	87 95       	ror	r24
    2b98:	98 2f       	mov	r25, r24
    2b9a:	80 e0       	ldi	r24, 0x00	; 0
    2b9c:	64 e0       	ldi	r22, 0x04	; 4
    2b9e:	49 2f       	mov	r20, r25
    2ba0:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    2ba4:	fe 01       	movw	r30, r28
    2ba6:	ed 59       	subi	r30, 0x9D	; 157
    2ba8:	ff 4f       	sbci	r31, 0xFF	; 255
    2baa:	80 81       	ld	r24, Z
    2bac:	88 2f       	mov	r24, r24
    2bae:	90 e0       	ldi	r25, 0x00	; 0
    2bb0:	88 70       	andi	r24, 0x08	; 8
    2bb2:	90 70       	andi	r25, 0x00	; 0
    2bb4:	95 95       	asr	r25
    2bb6:	87 95       	ror	r24
    2bb8:	95 95       	asr	r25
    2bba:	87 95       	ror	r24
    2bbc:	95 95       	asr	r25
    2bbe:	87 95       	ror	r24
    2bc0:	98 2f       	mov	r25, r24
    2bc2:	80 e0       	ldi	r24, 0x00	; 0
    2bc4:	65 e0       	ldi	r22, 0x05	; 5
    2bc6:	49 2f       	mov	r20, r25
    2bc8:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <GPIO_writePin>
    2bcc:	80 e0       	ldi	r24, 0x00	; 0
    2bce:	90 e0       	ldi	r25, 0x00	; 0
    2bd0:	a0 e8       	ldi	r26, 0x80	; 128
    2bd2:	bf e3       	ldi	r27, 0x3F	; 63
    2bd4:	89 8f       	std	Y+25, r24	; 0x19
    2bd6:	9a 8f       	std	Y+26, r25	; 0x1a
    2bd8:	ab 8f       	std	Y+27, r26	; 0x1b
    2bda:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bdc:	69 8d       	ldd	r22, Y+25	; 0x19
    2bde:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2be0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2be2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2be4:	20 e0       	ldi	r18, 0x00	; 0
    2be6:	30 e0       	ldi	r19, 0x00	; 0
    2be8:	4a ef       	ldi	r20, 0xFA	; 250
    2bea:	54 e4       	ldi	r21, 0x44	; 68
    2bec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bf0:	dc 01       	movw	r26, r24
    2bf2:	cb 01       	movw	r24, r22
    2bf4:	8d 8b       	std	Y+21, r24	; 0x15
    2bf6:	9e 8b       	std	Y+22, r25	; 0x16
    2bf8:	af 8b       	std	Y+23, r26	; 0x17
    2bfa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2bfc:	6d 89       	ldd	r22, Y+21	; 0x15
    2bfe:	7e 89       	ldd	r23, Y+22	; 0x16
    2c00:	8f 89       	ldd	r24, Y+23	; 0x17
    2c02:	98 8d       	ldd	r25, Y+24	; 0x18
    2c04:	20 e0       	ldi	r18, 0x00	; 0
    2c06:	30 e0       	ldi	r19, 0x00	; 0
    2c08:	40 e8       	ldi	r20, 0x80	; 128
    2c0a:	5f e3       	ldi	r21, 0x3F	; 63
    2c0c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c10:	88 23       	and	r24, r24
    2c12:	2c f4       	brge	.+10     	; 0x2c1e <LCD_sendCommand+0x75e>
		__ticks = 1;
    2c14:	81 e0       	ldi	r24, 0x01	; 1
    2c16:	90 e0       	ldi	r25, 0x00	; 0
    2c18:	9c 8b       	std	Y+20, r25	; 0x14
    2c1a:	8b 8b       	std	Y+19, r24	; 0x13
    2c1c:	3f c0       	rjmp	.+126    	; 0x2c9c <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    2c1e:	6d 89       	ldd	r22, Y+21	; 0x15
    2c20:	7e 89       	ldd	r23, Y+22	; 0x16
    2c22:	8f 89       	ldd	r24, Y+23	; 0x17
    2c24:	98 8d       	ldd	r25, Y+24	; 0x18
    2c26:	20 e0       	ldi	r18, 0x00	; 0
    2c28:	3f ef       	ldi	r19, 0xFF	; 255
    2c2a:	4f e7       	ldi	r20, 0x7F	; 127
    2c2c:	57 e4       	ldi	r21, 0x47	; 71
    2c2e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c32:	18 16       	cp	r1, r24
    2c34:	4c f5       	brge	.+82     	; 0x2c88 <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c36:	69 8d       	ldd	r22, Y+25	; 0x19
    2c38:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c3a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c3c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c3e:	20 e0       	ldi	r18, 0x00	; 0
    2c40:	30 e0       	ldi	r19, 0x00	; 0
    2c42:	40 e2       	ldi	r20, 0x20	; 32
    2c44:	51 e4       	ldi	r21, 0x41	; 65
    2c46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c4a:	dc 01       	movw	r26, r24
    2c4c:	cb 01       	movw	r24, r22
    2c4e:	bc 01       	movw	r22, r24
    2c50:	cd 01       	movw	r24, r26
    2c52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c56:	dc 01       	movw	r26, r24
    2c58:	cb 01       	movw	r24, r22
    2c5a:	9c 8b       	std	Y+20, r25	; 0x14
    2c5c:	8b 8b       	std	Y+19, r24	; 0x13
    2c5e:	0f c0       	rjmp	.+30     	; 0x2c7e <LCD_sendCommand+0x7be>
    2c60:	88 ec       	ldi	r24, 0xC8	; 200
    2c62:	90 e0       	ldi	r25, 0x00	; 0
    2c64:	9a 8b       	std	Y+18, r25	; 0x12
    2c66:	89 8b       	std	Y+17, r24	; 0x11
    2c68:	89 89       	ldd	r24, Y+17	; 0x11
    2c6a:	9a 89       	ldd	r25, Y+18	; 0x12
    2c6c:	01 97       	sbiw	r24, 0x01	; 1
    2c6e:	f1 f7       	brne	.-4      	; 0x2c6c <LCD_sendCommand+0x7ac>
    2c70:	9a 8b       	std	Y+18, r25	; 0x12
    2c72:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c74:	8b 89       	ldd	r24, Y+19	; 0x13
    2c76:	9c 89       	ldd	r25, Y+20	; 0x14
    2c78:	01 97       	sbiw	r24, 0x01	; 1
    2c7a:	9c 8b       	std	Y+20, r25	; 0x14
    2c7c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c7e:	8b 89       	ldd	r24, Y+19	; 0x13
    2c80:	9c 89       	ldd	r25, Y+20	; 0x14
    2c82:	00 97       	sbiw	r24, 0x00	; 0
    2c84:	69 f7       	brne	.-38     	; 0x2c60 <LCD_sendCommand+0x7a0>
    2c86:	14 c0       	rjmp	.+40     	; 0x2cb0 <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c88:	6d 89       	ldd	r22, Y+21	; 0x15
    2c8a:	7e 89       	ldd	r23, Y+22	; 0x16
    2c8c:	8f 89       	ldd	r24, Y+23	; 0x17
    2c8e:	98 8d       	ldd	r25, Y+24	; 0x18
    2c90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c94:	dc 01       	movw	r26, r24
    2c96:	cb 01       	movw	r24, r22
    2c98:	9c 8b       	std	Y+20, r25	; 0x14
    2c9a:	8b 8b       	std	Y+19, r24	; 0x13
    2c9c:	8b 89       	ldd	r24, Y+19	; 0x13
    2c9e:	9c 89       	ldd	r25, Y+20	; 0x14
    2ca0:	98 8b       	std	Y+16, r25	; 0x10
    2ca2:	8f 87       	std	Y+15, r24	; 0x0f
    2ca4:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ca6:	98 89       	ldd	r25, Y+16	; 0x10
    2ca8:	01 97       	sbiw	r24, 0x01	; 1
    2caa:	f1 f7       	brne	.-4      	; 0x2ca8 <LCD_sendCommand+0x7e8>
    2cac:	98 8b       	std	Y+16, r25	; 0x10
    2cae:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2cb0:	80 e0       	ldi	r24, 0x00	; 0
    2cb2:	61 e0       	ldi	r22, 0x01	; 1
    2cb4:	40 e0       	ldi	r20, 0x00	; 0
    2cb6:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <GPIO_writePin>
    2cba:	80 e0       	ldi	r24, 0x00	; 0
    2cbc:	90 e0       	ldi	r25, 0x00	; 0
    2cbe:	a0 e8       	ldi	r26, 0x80	; 128
    2cc0:	bf e3       	ldi	r27, 0x3F	; 63
    2cc2:	8b 87       	std	Y+11, r24	; 0x0b
    2cc4:	9c 87       	std	Y+12, r25	; 0x0c
    2cc6:	ad 87       	std	Y+13, r26	; 0x0d
    2cc8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cca:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ccc:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cce:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cd0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cd2:	20 e0       	ldi	r18, 0x00	; 0
    2cd4:	30 e0       	ldi	r19, 0x00	; 0
    2cd6:	4a ef       	ldi	r20, 0xFA	; 250
    2cd8:	54 e4       	ldi	r21, 0x44	; 68
    2cda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cde:	dc 01       	movw	r26, r24
    2ce0:	cb 01       	movw	r24, r22
    2ce2:	8f 83       	std	Y+7, r24	; 0x07
    2ce4:	98 87       	std	Y+8, r25	; 0x08
    2ce6:	a9 87       	std	Y+9, r26	; 0x09
    2ce8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2cea:	6f 81       	ldd	r22, Y+7	; 0x07
    2cec:	78 85       	ldd	r23, Y+8	; 0x08
    2cee:	89 85       	ldd	r24, Y+9	; 0x09
    2cf0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cf2:	20 e0       	ldi	r18, 0x00	; 0
    2cf4:	30 e0       	ldi	r19, 0x00	; 0
    2cf6:	40 e8       	ldi	r20, 0x80	; 128
    2cf8:	5f e3       	ldi	r21, 0x3F	; 63
    2cfa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2cfe:	88 23       	and	r24, r24
    2d00:	2c f4       	brge	.+10     	; 0x2d0c <LCD_sendCommand+0x84c>
		__ticks = 1;
    2d02:	81 e0       	ldi	r24, 0x01	; 1
    2d04:	90 e0       	ldi	r25, 0x00	; 0
    2d06:	9e 83       	std	Y+6, r25	; 0x06
    2d08:	8d 83       	std	Y+5, r24	; 0x05
    2d0a:	3f c0       	rjmp	.+126    	; 0x2d8a <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    2d0c:	6f 81       	ldd	r22, Y+7	; 0x07
    2d0e:	78 85       	ldd	r23, Y+8	; 0x08
    2d10:	89 85       	ldd	r24, Y+9	; 0x09
    2d12:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d14:	20 e0       	ldi	r18, 0x00	; 0
    2d16:	3f ef       	ldi	r19, 0xFF	; 255
    2d18:	4f e7       	ldi	r20, 0x7F	; 127
    2d1a:	57 e4       	ldi	r21, 0x47	; 71
    2d1c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d20:	18 16       	cp	r1, r24
    2d22:	4c f5       	brge	.+82     	; 0x2d76 <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d24:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d26:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d28:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d2a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d2c:	20 e0       	ldi	r18, 0x00	; 0
    2d2e:	30 e0       	ldi	r19, 0x00	; 0
    2d30:	40 e2       	ldi	r20, 0x20	; 32
    2d32:	51 e4       	ldi	r21, 0x41	; 65
    2d34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d38:	dc 01       	movw	r26, r24
    2d3a:	cb 01       	movw	r24, r22
    2d3c:	bc 01       	movw	r22, r24
    2d3e:	cd 01       	movw	r24, r26
    2d40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d44:	dc 01       	movw	r26, r24
    2d46:	cb 01       	movw	r24, r22
    2d48:	9e 83       	std	Y+6, r25	; 0x06
    2d4a:	8d 83       	std	Y+5, r24	; 0x05
    2d4c:	0f c0       	rjmp	.+30     	; 0x2d6c <LCD_sendCommand+0x8ac>
    2d4e:	88 ec       	ldi	r24, 0xC8	; 200
    2d50:	90 e0       	ldi	r25, 0x00	; 0
    2d52:	9c 83       	std	Y+4, r25	; 0x04
    2d54:	8b 83       	std	Y+3, r24	; 0x03
    2d56:	8b 81       	ldd	r24, Y+3	; 0x03
    2d58:	9c 81       	ldd	r25, Y+4	; 0x04
    2d5a:	01 97       	sbiw	r24, 0x01	; 1
    2d5c:	f1 f7       	brne	.-4      	; 0x2d5a <LCD_sendCommand+0x89a>
    2d5e:	9c 83       	std	Y+4, r25	; 0x04
    2d60:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d62:	8d 81       	ldd	r24, Y+5	; 0x05
    2d64:	9e 81       	ldd	r25, Y+6	; 0x06
    2d66:	01 97       	sbiw	r24, 0x01	; 1
    2d68:	9e 83       	std	Y+6, r25	; 0x06
    2d6a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d6c:	8d 81       	ldd	r24, Y+5	; 0x05
    2d6e:	9e 81       	ldd	r25, Y+6	; 0x06
    2d70:	00 97       	sbiw	r24, 0x00	; 0
    2d72:	69 f7       	brne	.-38     	; 0x2d4e <LCD_sendCommand+0x88e>
    2d74:	14 c0       	rjmp	.+40     	; 0x2d9e <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d76:	6f 81       	ldd	r22, Y+7	; 0x07
    2d78:	78 85       	ldd	r23, Y+8	; 0x08
    2d7a:	89 85       	ldd	r24, Y+9	; 0x09
    2d7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d82:	dc 01       	movw	r26, r24
    2d84:	cb 01       	movw	r24, r22
    2d86:	9e 83       	std	Y+6, r25	; 0x06
    2d88:	8d 83       	std	Y+5, r24	; 0x05
    2d8a:	8d 81       	ldd	r24, Y+5	; 0x05
    2d8c:	9e 81       	ldd	r25, Y+6	; 0x06
    2d8e:	9a 83       	std	Y+2, r25	; 0x02
    2d90:	89 83       	std	Y+1, r24	; 0x01
    2d92:	89 81       	ldd	r24, Y+1	; 0x01
    2d94:	9a 81       	ldd	r25, Y+2	; 0x02
    2d96:	01 97       	sbiw	r24, 0x01	; 1
    2d98:	f1 f7       	brne	.-4      	; 0x2d96 <LCD_sendCommand+0x8d6>
    2d9a:	9a 83       	std	Y+2, r25	; 0x02
    2d9c:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2d9e:	cd 59       	subi	r28, 0x9D	; 157
    2da0:	df 4f       	sbci	r29, 0xFF	; 255
    2da2:	0f b6       	in	r0, 0x3f	; 63
    2da4:	f8 94       	cli
    2da6:	de bf       	out	0x3e, r29	; 62
    2da8:	0f be       	out	0x3f, r0	; 63
    2daa:	cd bf       	out	0x3d, r28	; 61
    2dac:	cf 91       	pop	r28
    2dae:	df 91       	pop	r29
    2db0:	1f 91       	pop	r17
    2db2:	0f 91       	pop	r16
    2db4:	08 95       	ret

00002db6 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2db6:	0f 93       	push	r16
    2db8:	1f 93       	push	r17
    2dba:	df 93       	push	r29
    2dbc:	cf 93       	push	r28
    2dbe:	cd b7       	in	r28, 0x3d	; 61
    2dc0:	de b7       	in	r29, 0x3e	; 62
    2dc2:	c3 56       	subi	r28, 0x63	; 99
    2dc4:	d0 40       	sbci	r29, 0x00	; 0
    2dc6:	0f b6       	in	r0, 0x3f	; 63
    2dc8:	f8 94       	cli
    2dca:	de bf       	out	0x3e, r29	; 62
    2dcc:	0f be       	out	0x3f, r0	; 63
    2dce:	cd bf       	out	0x3d, r28	; 61
    2dd0:	fe 01       	movw	r30, r28
    2dd2:	ed 59       	subi	r30, 0x9D	; 157
    2dd4:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd6:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2dd8:	80 e0       	ldi	r24, 0x00	; 0
    2dda:	60 e0       	ldi	r22, 0x00	; 0
    2ddc:	41 e0       	ldi	r20, 0x01	; 1
    2dde:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <GPIO_writePin>
    2de2:	fe 01       	movw	r30, r28
    2de4:	e1 5a       	subi	r30, 0xA1	; 161
    2de6:	ff 4f       	sbci	r31, 0xFF	; 255
    2de8:	80 e0       	ldi	r24, 0x00	; 0
    2dea:	90 e0       	ldi	r25, 0x00	; 0
    2dec:	a0 e8       	ldi	r26, 0x80	; 128
    2dee:	bf e3       	ldi	r27, 0x3F	; 63
    2df0:	80 83       	st	Z, r24
    2df2:	91 83       	std	Z+1, r25	; 0x01
    2df4:	a2 83       	std	Z+2, r26	; 0x02
    2df6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2df8:	8e 01       	movw	r16, r28
    2dfa:	05 5a       	subi	r16, 0xA5	; 165
    2dfc:	1f 4f       	sbci	r17, 0xFF	; 255
    2dfe:	fe 01       	movw	r30, r28
    2e00:	e1 5a       	subi	r30, 0xA1	; 161
    2e02:	ff 4f       	sbci	r31, 0xFF	; 255
    2e04:	60 81       	ld	r22, Z
    2e06:	71 81       	ldd	r23, Z+1	; 0x01
    2e08:	82 81       	ldd	r24, Z+2	; 0x02
    2e0a:	93 81       	ldd	r25, Z+3	; 0x03
    2e0c:	20 e0       	ldi	r18, 0x00	; 0
    2e0e:	30 e0       	ldi	r19, 0x00	; 0
    2e10:	4a ef       	ldi	r20, 0xFA	; 250
    2e12:	54 e4       	ldi	r21, 0x44	; 68
    2e14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e18:	dc 01       	movw	r26, r24
    2e1a:	cb 01       	movw	r24, r22
    2e1c:	f8 01       	movw	r30, r16
    2e1e:	80 83       	st	Z, r24
    2e20:	91 83       	std	Z+1, r25	; 0x01
    2e22:	a2 83       	std	Z+2, r26	; 0x02
    2e24:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e26:	fe 01       	movw	r30, r28
    2e28:	e5 5a       	subi	r30, 0xA5	; 165
    2e2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e2c:	60 81       	ld	r22, Z
    2e2e:	71 81       	ldd	r23, Z+1	; 0x01
    2e30:	82 81       	ldd	r24, Z+2	; 0x02
    2e32:	93 81       	ldd	r25, Z+3	; 0x03
    2e34:	20 e0       	ldi	r18, 0x00	; 0
    2e36:	30 e0       	ldi	r19, 0x00	; 0
    2e38:	40 e8       	ldi	r20, 0x80	; 128
    2e3a:	5f e3       	ldi	r21, 0x3F	; 63
    2e3c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e40:	88 23       	and	r24, r24
    2e42:	44 f4       	brge	.+16     	; 0x2e54 <LCD_displayCharacter+0x9e>
		__ticks = 1;
    2e44:	fe 01       	movw	r30, r28
    2e46:	e7 5a       	subi	r30, 0xA7	; 167
    2e48:	ff 4f       	sbci	r31, 0xFF	; 255
    2e4a:	81 e0       	ldi	r24, 0x01	; 1
    2e4c:	90 e0       	ldi	r25, 0x00	; 0
    2e4e:	91 83       	std	Z+1, r25	; 0x01
    2e50:	80 83       	st	Z, r24
    2e52:	64 c0       	rjmp	.+200    	; 0x2f1c <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    2e54:	fe 01       	movw	r30, r28
    2e56:	e5 5a       	subi	r30, 0xA5	; 165
    2e58:	ff 4f       	sbci	r31, 0xFF	; 255
    2e5a:	60 81       	ld	r22, Z
    2e5c:	71 81       	ldd	r23, Z+1	; 0x01
    2e5e:	82 81       	ldd	r24, Z+2	; 0x02
    2e60:	93 81       	ldd	r25, Z+3	; 0x03
    2e62:	20 e0       	ldi	r18, 0x00	; 0
    2e64:	3f ef       	ldi	r19, 0xFF	; 255
    2e66:	4f e7       	ldi	r20, 0x7F	; 127
    2e68:	57 e4       	ldi	r21, 0x47	; 71
    2e6a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e6e:	18 16       	cp	r1, r24
    2e70:	0c f0       	brlt	.+2      	; 0x2e74 <LCD_displayCharacter+0xbe>
    2e72:	43 c0       	rjmp	.+134    	; 0x2efa <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e74:	fe 01       	movw	r30, r28
    2e76:	e1 5a       	subi	r30, 0xA1	; 161
    2e78:	ff 4f       	sbci	r31, 0xFF	; 255
    2e7a:	60 81       	ld	r22, Z
    2e7c:	71 81       	ldd	r23, Z+1	; 0x01
    2e7e:	82 81       	ldd	r24, Z+2	; 0x02
    2e80:	93 81       	ldd	r25, Z+3	; 0x03
    2e82:	20 e0       	ldi	r18, 0x00	; 0
    2e84:	30 e0       	ldi	r19, 0x00	; 0
    2e86:	40 e2       	ldi	r20, 0x20	; 32
    2e88:	51 e4       	ldi	r21, 0x41	; 65
    2e8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e8e:	dc 01       	movw	r26, r24
    2e90:	cb 01       	movw	r24, r22
    2e92:	8e 01       	movw	r16, r28
    2e94:	07 5a       	subi	r16, 0xA7	; 167
    2e96:	1f 4f       	sbci	r17, 0xFF	; 255
    2e98:	bc 01       	movw	r22, r24
    2e9a:	cd 01       	movw	r24, r26
    2e9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ea0:	dc 01       	movw	r26, r24
    2ea2:	cb 01       	movw	r24, r22
    2ea4:	f8 01       	movw	r30, r16
    2ea6:	91 83       	std	Z+1, r25	; 0x01
    2ea8:	80 83       	st	Z, r24
    2eaa:	1f c0       	rjmp	.+62     	; 0x2eea <LCD_displayCharacter+0x134>
    2eac:	fe 01       	movw	r30, r28
    2eae:	e9 5a       	subi	r30, 0xA9	; 169
    2eb0:	ff 4f       	sbci	r31, 0xFF	; 255
    2eb2:	88 ec       	ldi	r24, 0xC8	; 200
    2eb4:	90 e0       	ldi	r25, 0x00	; 0
    2eb6:	91 83       	std	Z+1, r25	; 0x01
    2eb8:	80 83       	st	Z, r24
    2eba:	fe 01       	movw	r30, r28
    2ebc:	e9 5a       	subi	r30, 0xA9	; 169
    2ebe:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec0:	80 81       	ld	r24, Z
    2ec2:	91 81       	ldd	r25, Z+1	; 0x01
    2ec4:	01 97       	sbiw	r24, 0x01	; 1
    2ec6:	f1 f7       	brne	.-4      	; 0x2ec4 <LCD_displayCharacter+0x10e>
    2ec8:	fe 01       	movw	r30, r28
    2eca:	e9 5a       	subi	r30, 0xA9	; 169
    2ecc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ece:	91 83       	std	Z+1, r25	; 0x01
    2ed0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ed2:	de 01       	movw	r26, r28
    2ed4:	a7 5a       	subi	r26, 0xA7	; 167
    2ed6:	bf 4f       	sbci	r27, 0xFF	; 255
    2ed8:	fe 01       	movw	r30, r28
    2eda:	e7 5a       	subi	r30, 0xA7	; 167
    2edc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ede:	80 81       	ld	r24, Z
    2ee0:	91 81       	ldd	r25, Z+1	; 0x01
    2ee2:	01 97       	sbiw	r24, 0x01	; 1
    2ee4:	11 96       	adiw	r26, 0x01	; 1
    2ee6:	9c 93       	st	X, r25
    2ee8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2eea:	fe 01       	movw	r30, r28
    2eec:	e7 5a       	subi	r30, 0xA7	; 167
    2eee:	ff 4f       	sbci	r31, 0xFF	; 255
    2ef0:	80 81       	ld	r24, Z
    2ef2:	91 81       	ldd	r25, Z+1	; 0x01
    2ef4:	00 97       	sbiw	r24, 0x00	; 0
    2ef6:	d1 f6       	brne	.-76     	; 0x2eac <LCD_displayCharacter+0xf6>
    2ef8:	27 c0       	rjmp	.+78     	; 0x2f48 <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2efa:	8e 01       	movw	r16, r28
    2efc:	07 5a       	subi	r16, 0xA7	; 167
    2efe:	1f 4f       	sbci	r17, 0xFF	; 255
    2f00:	fe 01       	movw	r30, r28
    2f02:	e5 5a       	subi	r30, 0xA5	; 165
    2f04:	ff 4f       	sbci	r31, 0xFF	; 255
    2f06:	60 81       	ld	r22, Z
    2f08:	71 81       	ldd	r23, Z+1	; 0x01
    2f0a:	82 81       	ldd	r24, Z+2	; 0x02
    2f0c:	93 81       	ldd	r25, Z+3	; 0x03
    2f0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f12:	dc 01       	movw	r26, r24
    2f14:	cb 01       	movw	r24, r22
    2f16:	f8 01       	movw	r30, r16
    2f18:	91 83       	std	Z+1, r25	; 0x01
    2f1a:	80 83       	st	Z, r24
    2f1c:	de 01       	movw	r26, r28
    2f1e:	ab 5a       	subi	r26, 0xAB	; 171
    2f20:	bf 4f       	sbci	r27, 0xFF	; 255
    2f22:	fe 01       	movw	r30, r28
    2f24:	e7 5a       	subi	r30, 0xA7	; 167
    2f26:	ff 4f       	sbci	r31, 0xFF	; 255
    2f28:	80 81       	ld	r24, Z
    2f2a:	91 81       	ldd	r25, Z+1	; 0x01
    2f2c:	8d 93       	st	X+, r24
    2f2e:	9c 93       	st	X, r25
    2f30:	fe 01       	movw	r30, r28
    2f32:	eb 5a       	subi	r30, 0xAB	; 171
    2f34:	ff 4f       	sbci	r31, 0xFF	; 255
    2f36:	80 81       	ld	r24, Z
    2f38:	91 81       	ldd	r25, Z+1	; 0x01
    2f3a:	01 97       	sbiw	r24, 0x01	; 1
    2f3c:	f1 f7       	brne	.-4      	; 0x2f3a <LCD_displayCharacter+0x184>
    2f3e:	fe 01       	movw	r30, r28
    2f40:	eb 5a       	subi	r30, 0xAB	; 171
    2f42:	ff 4f       	sbci	r31, 0xFF	; 255
    2f44:	91 83       	std	Z+1, r25	; 0x01
    2f46:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2f48:	80 e0       	ldi	r24, 0x00	; 0
    2f4a:	61 e0       	ldi	r22, 0x01	; 1
    2f4c:	41 e0       	ldi	r20, 0x01	; 1
    2f4e:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <GPIO_writePin>
    2f52:	fe 01       	movw	r30, r28
    2f54:	ef 5a       	subi	r30, 0xAF	; 175
    2f56:	ff 4f       	sbci	r31, 0xFF	; 255
    2f58:	80 e0       	ldi	r24, 0x00	; 0
    2f5a:	90 e0       	ldi	r25, 0x00	; 0
    2f5c:	a0 e8       	ldi	r26, 0x80	; 128
    2f5e:	bf e3       	ldi	r27, 0x3F	; 63
    2f60:	80 83       	st	Z, r24
    2f62:	91 83       	std	Z+1, r25	; 0x01
    2f64:	a2 83       	std	Z+2, r26	; 0x02
    2f66:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f68:	8e 01       	movw	r16, r28
    2f6a:	03 5b       	subi	r16, 0xB3	; 179
    2f6c:	1f 4f       	sbci	r17, 0xFF	; 255
    2f6e:	fe 01       	movw	r30, r28
    2f70:	ef 5a       	subi	r30, 0xAF	; 175
    2f72:	ff 4f       	sbci	r31, 0xFF	; 255
    2f74:	60 81       	ld	r22, Z
    2f76:	71 81       	ldd	r23, Z+1	; 0x01
    2f78:	82 81       	ldd	r24, Z+2	; 0x02
    2f7a:	93 81       	ldd	r25, Z+3	; 0x03
    2f7c:	20 e0       	ldi	r18, 0x00	; 0
    2f7e:	30 e0       	ldi	r19, 0x00	; 0
    2f80:	4a ef       	ldi	r20, 0xFA	; 250
    2f82:	54 e4       	ldi	r21, 0x44	; 68
    2f84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f88:	dc 01       	movw	r26, r24
    2f8a:	cb 01       	movw	r24, r22
    2f8c:	f8 01       	movw	r30, r16
    2f8e:	80 83       	st	Z, r24
    2f90:	91 83       	std	Z+1, r25	; 0x01
    2f92:	a2 83       	std	Z+2, r26	; 0x02
    2f94:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f96:	fe 01       	movw	r30, r28
    2f98:	e3 5b       	subi	r30, 0xB3	; 179
    2f9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f9c:	60 81       	ld	r22, Z
    2f9e:	71 81       	ldd	r23, Z+1	; 0x01
    2fa0:	82 81       	ldd	r24, Z+2	; 0x02
    2fa2:	93 81       	ldd	r25, Z+3	; 0x03
    2fa4:	20 e0       	ldi	r18, 0x00	; 0
    2fa6:	30 e0       	ldi	r19, 0x00	; 0
    2fa8:	40 e8       	ldi	r20, 0x80	; 128
    2faa:	5f e3       	ldi	r21, 0x3F	; 63
    2fac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2fb0:	88 23       	and	r24, r24
    2fb2:	44 f4       	brge	.+16     	; 0x2fc4 <LCD_displayCharacter+0x20e>
		__ticks = 1;
    2fb4:	fe 01       	movw	r30, r28
    2fb6:	e5 5b       	subi	r30, 0xB5	; 181
    2fb8:	ff 4f       	sbci	r31, 0xFF	; 255
    2fba:	81 e0       	ldi	r24, 0x01	; 1
    2fbc:	90 e0       	ldi	r25, 0x00	; 0
    2fbe:	91 83       	std	Z+1, r25	; 0x01
    2fc0:	80 83       	st	Z, r24
    2fc2:	64 c0       	rjmp	.+200    	; 0x308c <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    2fc4:	fe 01       	movw	r30, r28
    2fc6:	e3 5b       	subi	r30, 0xB3	; 179
    2fc8:	ff 4f       	sbci	r31, 0xFF	; 255
    2fca:	60 81       	ld	r22, Z
    2fcc:	71 81       	ldd	r23, Z+1	; 0x01
    2fce:	82 81       	ldd	r24, Z+2	; 0x02
    2fd0:	93 81       	ldd	r25, Z+3	; 0x03
    2fd2:	20 e0       	ldi	r18, 0x00	; 0
    2fd4:	3f ef       	ldi	r19, 0xFF	; 255
    2fd6:	4f e7       	ldi	r20, 0x7F	; 127
    2fd8:	57 e4       	ldi	r21, 0x47	; 71
    2fda:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2fde:	18 16       	cp	r1, r24
    2fe0:	0c f0       	brlt	.+2      	; 0x2fe4 <LCD_displayCharacter+0x22e>
    2fe2:	43 c0       	rjmp	.+134    	; 0x306a <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fe4:	fe 01       	movw	r30, r28
    2fe6:	ef 5a       	subi	r30, 0xAF	; 175
    2fe8:	ff 4f       	sbci	r31, 0xFF	; 255
    2fea:	60 81       	ld	r22, Z
    2fec:	71 81       	ldd	r23, Z+1	; 0x01
    2fee:	82 81       	ldd	r24, Z+2	; 0x02
    2ff0:	93 81       	ldd	r25, Z+3	; 0x03
    2ff2:	20 e0       	ldi	r18, 0x00	; 0
    2ff4:	30 e0       	ldi	r19, 0x00	; 0
    2ff6:	40 e2       	ldi	r20, 0x20	; 32
    2ff8:	51 e4       	ldi	r21, 0x41	; 65
    2ffa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ffe:	dc 01       	movw	r26, r24
    3000:	cb 01       	movw	r24, r22
    3002:	8e 01       	movw	r16, r28
    3004:	05 5b       	subi	r16, 0xB5	; 181
    3006:	1f 4f       	sbci	r17, 0xFF	; 255
    3008:	bc 01       	movw	r22, r24
    300a:	cd 01       	movw	r24, r26
    300c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3010:	dc 01       	movw	r26, r24
    3012:	cb 01       	movw	r24, r22
    3014:	f8 01       	movw	r30, r16
    3016:	91 83       	std	Z+1, r25	; 0x01
    3018:	80 83       	st	Z, r24
    301a:	1f c0       	rjmp	.+62     	; 0x305a <LCD_displayCharacter+0x2a4>
    301c:	fe 01       	movw	r30, r28
    301e:	e7 5b       	subi	r30, 0xB7	; 183
    3020:	ff 4f       	sbci	r31, 0xFF	; 255
    3022:	88 ec       	ldi	r24, 0xC8	; 200
    3024:	90 e0       	ldi	r25, 0x00	; 0
    3026:	91 83       	std	Z+1, r25	; 0x01
    3028:	80 83       	st	Z, r24
    302a:	fe 01       	movw	r30, r28
    302c:	e7 5b       	subi	r30, 0xB7	; 183
    302e:	ff 4f       	sbci	r31, 0xFF	; 255
    3030:	80 81       	ld	r24, Z
    3032:	91 81       	ldd	r25, Z+1	; 0x01
    3034:	01 97       	sbiw	r24, 0x01	; 1
    3036:	f1 f7       	brne	.-4      	; 0x3034 <LCD_displayCharacter+0x27e>
    3038:	fe 01       	movw	r30, r28
    303a:	e7 5b       	subi	r30, 0xB7	; 183
    303c:	ff 4f       	sbci	r31, 0xFF	; 255
    303e:	91 83       	std	Z+1, r25	; 0x01
    3040:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3042:	de 01       	movw	r26, r28
    3044:	a5 5b       	subi	r26, 0xB5	; 181
    3046:	bf 4f       	sbci	r27, 0xFF	; 255
    3048:	fe 01       	movw	r30, r28
    304a:	e5 5b       	subi	r30, 0xB5	; 181
    304c:	ff 4f       	sbci	r31, 0xFF	; 255
    304e:	80 81       	ld	r24, Z
    3050:	91 81       	ldd	r25, Z+1	; 0x01
    3052:	01 97       	sbiw	r24, 0x01	; 1
    3054:	11 96       	adiw	r26, 0x01	; 1
    3056:	9c 93       	st	X, r25
    3058:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    305a:	fe 01       	movw	r30, r28
    305c:	e5 5b       	subi	r30, 0xB5	; 181
    305e:	ff 4f       	sbci	r31, 0xFF	; 255
    3060:	80 81       	ld	r24, Z
    3062:	91 81       	ldd	r25, Z+1	; 0x01
    3064:	00 97       	sbiw	r24, 0x00	; 0
    3066:	d1 f6       	brne	.-76     	; 0x301c <LCD_displayCharacter+0x266>
    3068:	27 c0       	rjmp	.+78     	; 0x30b8 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    306a:	8e 01       	movw	r16, r28
    306c:	05 5b       	subi	r16, 0xB5	; 181
    306e:	1f 4f       	sbci	r17, 0xFF	; 255
    3070:	fe 01       	movw	r30, r28
    3072:	e3 5b       	subi	r30, 0xB3	; 179
    3074:	ff 4f       	sbci	r31, 0xFF	; 255
    3076:	60 81       	ld	r22, Z
    3078:	71 81       	ldd	r23, Z+1	; 0x01
    307a:	82 81       	ldd	r24, Z+2	; 0x02
    307c:	93 81       	ldd	r25, Z+3	; 0x03
    307e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3082:	dc 01       	movw	r26, r24
    3084:	cb 01       	movw	r24, r22
    3086:	f8 01       	movw	r30, r16
    3088:	91 83       	std	Z+1, r25	; 0x01
    308a:	80 83       	st	Z, r24
    308c:	de 01       	movw	r26, r28
    308e:	a9 5b       	subi	r26, 0xB9	; 185
    3090:	bf 4f       	sbci	r27, 0xFF	; 255
    3092:	fe 01       	movw	r30, r28
    3094:	e5 5b       	subi	r30, 0xB5	; 181
    3096:	ff 4f       	sbci	r31, 0xFF	; 255
    3098:	80 81       	ld	r24, Z
    309a:	91 81       	ldd	r25, Z+1	; 0x01
    309c:	8d 93       	st	X+, r24
    309e:	9c 93       	st	X, r25
    30a0:	fe 01       	movw	r30, r28
    30a2:	e9 5b       	subi	r30, 0xB9	; 185
    30a4:	ff 4f       	sbci	r31, 0xFF	; 255
    30a6:	80 81       	ld	r24, Z
    30a8:	91 81       	ldd	r25, Z+1	; 0x01
    30aa:	01 97       	sbiw	r24, 0x01	; 1
    30ac:	f1 f7       	brne	.-4      	; 0x30aa <LCD_displayCharacter+0x2f4>
    30ae:	fe 01       	movw	r30, r28
    30b0:	e9 5b       	subi	r30, 0xB9	; 185
    30b2:	ff 4f       	sbci	r31, 0xFF	; 255
    30b4:	91 83       	std	Z+1, r25	; 0x01
    30b6:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
    30b8:	fe 01       	movw	r30, r28
    30ba:	ed 59       	subi	r30, 0x9D	; 157
    30bc:	ff 4f       	sbci	r31, 0xFF	; 255
    30be:	80 81       	ld	r24, Z
    30c0:	88 2f       	mov	r24, r24
    30c2:	90 e0       	ldi	r25, 0x00	; 0
    30c4:	80 71       	andi	r24, 0x10	; 16
    30c6:	90 70       	andi	r25, 0x00	; 0
    30c8:	95 95       	asr	r25
    30ca:	87 95       	ror	r24
    30cc:	95 95       	asr	r25
    30ce:	87 95       	ror	r24
    30d0:	95 95       	asr	r25
    30d2:	87 95       	ror	r24
    30d4:	95 95       	asr	r25
    30d6:	87 95       	ror	r24
    30d8:	98 2f       	mov	r25, r24
    30da:	80 e0       	ldi	r24, 0x00	; 0
    30dc:	62 e0       	ldi	r22, 0x02	; 2
    30de:	49 2f       	mov	r20, r25
    30e0:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
    30e4:	fe 01       	movw	r30, r28
    30e6:	ed 59       	subi	r30, 0x9D	; 157
    30e8:	ff 4f       	sbci	r31, 0xFF	; 255
    30ea:	80 81       	ld	r24, Z
    30ec:	88 2f       	mov	r24, r24
    30ee:	90 e0       	ldi	r25, 0x00	; 0
    30f0:	80 72       	andi	r24, 0x20	; 32
    30f2:	90 70       	andi	r25, 0x00	; 0
    30f4:	95 95       	asr	r25
    30f6:	87 95       	ror	r24
    30f8:	95 95       	asr	r25
    30fa:	87 95       	ror	r24
    30fc:	95 95       	asr	r25
    30fe:	87 95       	ror	r24
    3100:	95 95       	asr	r25
    3102:	87 95       	ror	r24
    3104:	95 95       	asr	r25
    3106:	87 95       	ror	r24
    3108:	98 2f       	mov	r25, r24
    310a:	80 e0       	ldi	r24, 0x00	; 0
    310c:	63 e0       	ldi	r22, 0x03	; 3
    310e:	49 2f       	mov	r20, r25
    3110:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
    3114:	fe 01       	movw	r30, r28
    3116:	ed 59       	subi	r30, 0x9D	; 157
    3118:	ff 4f       	sbci	r31, 0xFF	; 255
    311a:	80 81       	ld	r24, Z
    311c:	88 2f       	mov	r24, r24
    311e:	90 e0       	ldi	r25, 0x00	; 0
    3120:	80 74       	andi	r24, 0x40	; 64
    3122:	90 70       	andi	r25, 0x00	; 0
    3124:	08 2e       	mov	r0, r24
    3126:	89 2f       	mov	r24, r25
    3128:	00 0c       	add	r0, r0
    312a:	88 1f       	adc	r24, r24
    312c:	99 0b       	sbc	r25, r25
    312e:	00 0c       	add	r0, r0
    3130:	88 1f       	adc	r24, r24
    3132:	99 1f       	adc	r25, r25
    3134:	98 2f       	mov	r25, r24
    3136:	80 e0       	ldi	r24, 0x00	; 0
    3138:	64 e0       	ldi	r22, 0x04	; 4
    313a:	49 2f       	mov	r20, r25
    313c:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
    3140:	fe 01       	movw	r30, r28
    3142:	ed 59       	subi	r30, 0x9D	; 157
    3144:	ff 4f       	sbci	r31, 0xFF	; 255
    3146:	80 81       	ld	r24, Z
    3148:	98 2f       	mov	r25, r24
    314a:	99 1f       	adc	r25, r25
    314c:	99 27       	eor	r25, r25
    314e:	99 1f       	adc	r25, r25
    3150:	80 e0       	ldi	r24, 0x00	; 0
    3152:	65 e0       	ldi	r22, 0x05	; 5
    3154:	49 2f       	mov	r20, r25
    3156:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <GPIO_writePin>
    315a:	fe 01       	movw	r30, r28
    315c:	ed 5b       	subi	r30, 0xBD	; 189
    315e:	ff 4f       	sbci	r31, 0xFF	; 255
    3160:	80 e0       	ldi	r24, 0x00	; 0
    3162:	90 e0       	ldi	r25, 0x00	; 0
    3164:	a0 e8       	ldi	r26, 0x80	; 128
    3166:	bf e3       	ldi	r27, 0x3F	; 63
    3168:	80 83       	st	Z, r24
    316a:	91 83       	std	Z+1, r25	; 0x01
    316c:	a2 83       	std	Z+2, r26	; 0x02
    316e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3170:	8e 01       	movw	r16, r28
    3172:	01 5c       	subi	r16, 0xC1	; 193
    3174:	1f 4f       	sbci	r17, 0xFF	; 255
    3176:	fe 01       	movw	r30, r28
    3178:	ed 5b       	subi	r30, 0xBD	; 189
    317a:	ff 4f       	sbci	r31, 0xFF	; 255
    317c:	60 81       	ld	r22, Z
    317e:	71 81       	ldd	r23, Z+1	; 0x01
    3180:	82 81       	ldd	r24, Z+2	; 0x02
    3182:	93 81       	ldd	r25, Z+3	; 0x03
    3184:	20 e0       	ldi	r18, 0x00	; 0
    3186:	30 e0       	ldi	r19, 0x00	; 0
    3188:	4a ef       	ldi	r20, 0xFA	; 250
    318a:	54 e4       	ldi	r21, 0x44	; 68
    318c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3190:	dc 01       	movw	r26, r24
    3192:	cb 01       	movw	r24, r22
    3194:	f8 01       	movw	r30, r16
    3196:	80 83       	st	Z, r24
    3198:	91 83       	std	Z+1, r25	; 0x01
    319a:	a2 83       	std	Z+2, r26	; 0x02
    319c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    319e:	fe 01       	movw	r30, r28
    31a0:	ff 96       	adiw	r30, 0x3f	; 63
    31a2:	60 81       	ld	r22, Z
    31a4:	71 81       	ldd	r23, Z+1	; 0x01
    31a6:	82 81       	ldd	r24, Z+2	; 0x02
    31a8:	93 81       	ldd	r25, Z+3	; 0x03
    31aa:	20 e0       	ldi	r18, 0x00	; 0
    31ac:	30 e0       	ldi	r19, 0x00	; 0
    31ae:	40 e8       	ldi	r20, 0x80	; 128
    31b0:	5f e3       	ldi	r21, 0x3F	; 63
    31b2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    31b6:	88 23       	and	r24, r24
    31b8:	2c f4       	brge	.+10     	; 0x31c4 <LCD_displayCharacter+0x40e>
		__ticks = 1;
    31ba:	81 e0       	ldi	r24, 0x01	; 1
    31bc:	90 e0       	ldi	r25, 0x00	; 0
    31be:	9e af       	std	Y+62, r25	; 0x3e
    31c0:	8d af       	std	Y+61, r24	; 0x3d
    31c2:	46 c0       	rjmp	.+140    	; 0x3250 <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    31c4:	fe 01       	movw	r30, r28
    31c6:	ff 96       	adiw	r30, 0x3f	; 63
    31c8:	60 81       	ld	r22, Z
    31ca:	71 81       	ldd	r23, Z+1	; 0x01
    31cc:	82 81       	ldd	r24, Z+2	; 0x02
    31ce:	93 81       	ldd	r25, Z+3	; 0x03
    31d0:	20 e0       	ldi	r18, 0x00	; 0
    31d2:	3f ef       	ldi	r19, 0xFF	; 255
    31d4:	4f e7       	ldi	r20, 0x7F	; 127
    31d6:	57 e4       	ldi	r21, 0x47	; 71
    31d8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    31dc:	18 16       	cp	r1, r24
    31de:	64 f5       	brge	.+88     	; 0x3238 <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31e0:	fe 01       	movw	r30, r28
    31e2:	ed 5b       	subi	r30, 0xBD	; 189
    31e4:	ff 4f       	sbci	r31, 0xFF	; 255
    31e6:	60 81       	ld	r22, Z
    31e8:	71 81       	ldd	r23, Z+1	; 0x01
    31ea:	82 81       	ldd	r24, Z+2	; 0x02
    31ec:	93 81       	ldd	r25, Z+3	; 0x03
    31ee:	20 e0       	ldi	r18, 0x00	; 0
    31f0:	30 e0       	ldi	r19, 0x00	; 0
    31f2:	40 e2       	ldi	r20, 0x20	; 32
    31f4:	51 e4       	ldi	r21, 0x41	; 65
    31f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31fa:	dc 01       	movw	r26, r24
    31fc:	cb 01       	movw	r24, r22
    31fe:	bc 01       	movw	r22, r24
    3200:	cd 01       	movw	r24, r26
    3202:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3206:	dc 01       	movw	r26, r24
    3208:	cb 01       	movw	r24, r22
    320a:	9e af       	std	Y+62, r25	; 0x3e
    320c:	8d af       	std	Y+61, r24	; 0x3d
    320e:	0f c0       	rjmp	.+30     	; 0x322e <LCD_displayCharacter+0x478>
    3210:	88 ec       	ldi	r24, 0xC8	; 200
    3212:	90 e0       	ldi	r25, 0x00	; 0
    3214:	9c af       	std	Y+60, r25	; 0x3c
    3216:	8b af       	std	Y+59, r24	; 0x3b
    3218:	8b ad       	ldd	r24, Y+59	; 0x3b
    321a:	9c ad       	ldd	r25, Y+60	; 0x3c
    321c:	01 97       	sbiw	r24, 0x01	; 1
    321e:	f1 f7       	brne	.-4      	; 0x321c <LCD_displayCharacter+0x466>
    3220:	9c af       	std	Y+60, r25	; 0x3c
    3222:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3224:	8d ad       	ldd	r24, Y+61	; 0x3d
    3226:	9e ad       	ldd	r25, Y+62	; 0x3e
    3228:	01 97       	sbiw	r24, 0x01	; 1
    322a:	9e af       	std	Y+62, r25	; 0x3e
    322c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    322e:	8d ad       	ldd	r24, Y+61	; 0x3d
    3230:	9e ad       	ldd	r25, Y+62	; 0x3e
    3232:	00 97       	sbiw	r24, 0x00	; 0
    3234:	69 f7       	brne	.-38     	; 0x3210 <LCD_displayCharacter+0x45a>
    3236:	16 c0       	rjmp	.+44     	; 0x3264 <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3238:	fe 01       	movw	r30, r28
    323a:	ff 96       	adiw	r30, 0x3f	; 63
    323c:	60 81       	ld	r22, Z
    323e:	71 81       	ldd	r23, Z+1	; 0x01
    3240:	82 81       	ldd	r24, Z+2	; 0x02
    3242:	93 81       	ldd	r25, Z+3	; 0x03
    3244:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3248:	dc 01       	movw	r26, r24
    324a:	cb 01       	movw	r24, r22
    324c:	9e af       	std	Y+62, r25	; 0x3e
    324e:	8d af       	std	Y+61, r24	; 0x3d
    3250:	8d ad       	ldd	r24, Y+61	; 0x3d
    3252:	9e ad       	ldd	r25, Y+62	; 0x3e
    3254:	9a af       	std	Y+58, r25	; 0x3a
    3256:	89 af       	std	Y+57, r24	; 0x39
    3258:	89 ad       	ldd	r24, Y+57	; 0x39
    325a:	9a ad       	ldd	r25, Y+58	; 0x3a
    325c:	01 97       	sbiw	r24, 0x01	; 1
    325e:	f1 f7       	brne	.-4      	; 0x325c <LCD_displayCharacter+0x4a6>
    3260:	9a af       	std	Y+58, r25	; 0x3a
    3262:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    3264:	80 e0       	ldi	r24, 0x00	; 0
    3266:	61 e0       	ldi	r22, 0x01	; 1
    3268:	40 e0       	ldi	r20, 0x00	; 0
    326a:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <GPIO_writePin>
    326e:	80 e0       	ldi	r24, 0x00	; 0
    3270:	90 e0       	ldi	r25, 0x00	; 0
    3272:	a0 e8       	ldi	r26, 0x80	; 128
    3274:	bf e3       	ldi	r27, 0x3F	; 63
    3276:	8d ab       	std	Y+53, r24	; 0x35
    3278:	9e ab       	std	Y+54, r25	; 0x36
    327a:	af ab       	std	Y+55, r26	; 0x37
    327c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    327e:	6d a9       	ldd	r22, Y+53	; 0x35
    3280:	7e a9       	ldd	r23, Y+54	; 0x36
    3282:	8f a9       	ldd	r24, Y+55	; 0x37
    3284:	98 ad       	ldd	r25, Y+56	; 0x38
    3286:	20 e0       	ldi	r18, 0x00	; 0
    3288:	30 e0       	ldi	r19, 0x00	; 0
    328a:	4a ef       	ldi	r20, 0xFA	; 250
    328c:	54 e4       	ldi	r21, 0x44	; 68
    328e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3292:	dc 01       	movw	r26, r24
    3294:	cb 01       	movw	r24, r22
    3296:	89 ab       	std	Y+49, r24	; 0x31
    3298:	9a ab       	std	Y+50, r25	; 0x32
    329a:	ab ab       	std	Y+51, r26	; 0x33
    329c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    329e:	69 a9       	ldd	r22, Y+49	; 0x31
    32a0:	7a a9       	ldd	r23, Y+50	; 0x32
    32a2:	8b a9       	ldd	r24, Y+51	; 0x33
    32a4:	9c a9       	ldd	r25, Y+52	; 0x34
    32a6:	20 e0       	ldi	r18, 0x00	; 0
    32a8:	30 e0       	ldi	r19, 0x00	; 0
    32aa:	40 e8       	ldi	r20, 0x80	; 128
    32ac:	5f e3       	ldi	r21, 0x3F	; 63
    32ae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    32b2:	88 23       	and	r24, r24
    32b4:	2c f4       	brge	.+10     	; 0x32c0 <LCD_displayCharacter+0x50a>
		__ticks = 1;
    32b6:	81 e0       	ldi	r24, 0x01	; 1
    32b8:	90 e0       	ldi	r25, 0x00	; 0
    32ba:	98 ab       	std	Y+48, r25	; 0x30
    32bc:	8f a7       	std	Y+47, r24	; 0x2f
    32be:	3f c0       	rjmp	.+126    	; 0x333e <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    32c0:	69 a9       	ldd	r22, Y+49	; 0x31
    32c2:	7a a9       	ldd	r23, Y+50	; 0x32
    32c4:	8b a9       	ldd	r24, Y+51	; 0x33
    32c6:	9c a9       	ldd	r25, Y+52	; 0x34
    32c8:	20 e0       	ldi	r18, 0x00	; 0
    32ca:	3f ef       	ldi	r19, 0xFF	; 255
    32cc:	4f e7       	ldi	r20, 0x7F	; 127
    32ce:	57 e4       	ldi	r21, 0x47	; 71
    32d0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    32d4:	18 16       	cp	r1, r24
    32d6:	4c f5       	brge	.+82     	; 0x332a <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32d8:	6d a9       	ldd	r22, Y+53	; 0x35
    32da:	7e a9       	ldd	r23, Y+54	; 0x36
    32dc:	8f a9       	ldd	r24, Y+55	; 0x37
    32de:	98 ad       	ldd	r25, Y+56	; 0x38
    32e0:	20 e0       	ldi	r18, 0x00	; 0
    32e2:	30 e0       	ldi	r19, 0x00	; 0
    32e4:	40 e2       	ldi	r20, 0x20	; 32
    32e6:	51 e4       	ldi	r21, 0x41	; 65
    32e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32ec:	dc 01       	movw	r26, r24
    32ee:	cb 01       	movw	r24, r22
    32f0:	bc 01       	movw	r22, r24
    32f2:	cd 01       	movw	r24, r26
    32f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32f8:	dc 01       	movw	r26, r24
    32fa:	cb 01       	movw	r24, r22
    32fc:	98 ab       	std	Y+48, r25	; 0x30
    32fe:	8f a7       	std	Y+47, r24	; 0x2f
    3300:	0f c0       	rjmp	.+30     	; 0x3320 <LCD_displayCharacter+0x56a>
    3302:	88 ec       	ldi	r24, 0xC8	; 200
    3304:	90 e0       	ldi	r25, 0x00	; 0
    3306:	9e a7       	std	Y+46, r25	; 0x2e
    3308:	8d a7       	std	Y+45, r24	; 0x2d
    330a:	8d a5       	ldd	r24, Y+45	; 0x2d
    330c:	9e a5       	ldd	r25, Y+46	; 0x2e
    330e:	01 97       	sbiw	r24, 0x01	; 1
    3310:	f1 f7       	brne	.-4      	; 0x330e <LCD_displayCharacter+0x558>
    3312:	9e a7       	std	Y+46, r25	; 0x2e
    3314:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3316:	8f a5       	ldd	r24, Y+47	; 0x2f
    3318:	98 a9       	ldd	r25, Y+48	; 0x30
    331a:	01 97       	sbiw	r24, 0x01	; 1
    331c:	98 ab       	std	Y+48, r25	; 0x30
    331e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3320:	8f a5       	ldd	r24, Y+47	; 0x2f
    3322:	98 a9       	ldd	r25, Y+48	; 0x30
    3324:	00 97       	sbiw	r24, 0x00	; 0
    3326:	69 f7       	brne	.-38     	; 0x3302 <LCD_displayCharacter+0x54c>
    3328:	14 c0       	rjmp	.+40     	; 0x3352 <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    332a:	69 a9       	ldd	r22, Y+49	; 0x31
    332c:	7a a9       	ldd	r23, Y+50	; 0x32
    332e:	8b a9       	ldd	r24, Y+51	; 0x33
    3330:	9c a9       	ldd	r25, Y+52	; 0x34
    3332:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3336:	dc 01       	movw	r26, r24
    3338:	cb 01       	movw	r24, r22
    333a:	98 ab       	std	Y+48, r25	; 0x30
    333c:	8f a7       	std	Y+47, r24	; 0x2f
    333e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3340:	98 a9       	ldd	r25, Y+48	; 0x30
    3342:	9c a7       	std	Y+44, r25	; 0x2c
    3344:	8b a7       	std	Y+43, r24	; 0x2b
    3346:	8b a5       	ldd	r24, Y+43	; 0x2b
    3348:	9c a5       	ldd	r25, Y+44	; 0x2c
    334a:	01 97       	sbiw	r24, 0x01	; 1
    334c:	f1 f7       	brne	.-4      	; 0x334a <LCD_displayCharacter+0x594>
    334e:	9c a7       	std	Y+44, r25	; 0x2c
    3350:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    3352:	80 e0       	ldi	r24, 0x00	; 0
    3354:	61 e0       	ldi	r22, 0x01	; 1
    3356:	41 e0       	ldi	r20, 0x01	; 1
    3358:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <GPIO_writePin>
    335c:	80 e0       	ldi	r24, 0x00	; 0
    335e:	90 e0       	ldi	r25, 0x00	; 0
    3360:	a0 e8       	ldi	r26, 0x80	; 128
    3362:	bf e3       	ldi	r27, 0x3F	; 63
    3364:	8f a3       	std	Y+39, r24	; 0x27
    3366:	98 a7       	std	Y+40, r25	; 0x28
    3368:	a9 a7       	std	Y+41, r26	; 0x29
    336a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    336c:	6f a1       	ldd	r22, Y+39	; 0x27
    336e:	78 a5       	ldd	r23, Y+40	; 0x28
    3370:	89 a5       	ldd	r24, Y+41	; 0x29
    3372:	9a a5       	ldd	r25, Y+42	; 0x2a
    3374:	20 e0       	ldi	r18, 0x00	; 0
    3376:	30 e0       	ldi	r19, 0x00	; 0
    3378:	4a ef       	ldi	r20, 0xFA	; 250
    337a:	54 e4       	ldi	r21, 0x44	; 68
    337c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3380:	dc 01       	movw	r26, r24
    3382:	cb 01       	movw	r24, r22
    3384:	8b a3       	std	Y+35, r24	; 0x23
    3386:	9c a3       	std	Y+36, r25	; 0x24
    3388:	ad a3       	std	Y+37, r26	; 0x25
    338a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    338c:	6b a1       	ldd	r22, Y+35	; 0x23
    338e:	7c a1       	ldd	r23, Y+36	; 0x24
    3390:	8d a1       	ldd	r24, Y+37	; 0x25
    3392:	9e a1       	ldd	r25, Y+38	; 0x26
    3394:	20 e0       	ldi	r18, 0x00	; 0
    3396:	30 e0       	ldi	r19, 0x00	; 0
    3398:	40 e8       	ldi	r20, 0x80	; 128
    339a:	5f e3       	ldi	r21, 0x3F	; 63
    339c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    33a0:	88 23       	and	r24, r24
    33a2:	2c f4       	brge	.+10     	; 0x33ae <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    33a4:	81 e0       	ldi	r24, 0x01	; 1
    33a6:	90 e0       	ldi	r25, 0x00	; 0
    33a8:	9a a3       	std	Y+34, r25	; 0x22
    33aa:	89 a3       	std	Y+33, r24	; 0x21
    33ac:	3f c0       	rjmp	.+126    	; 0x342c <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    33ae:	6b a1       	ldd	r22, Y+35	; 0x23
    33b0:	7c a1       	ldd	r23, Y+36	; 0x24
    33b2:	8d a1       	ldd	r24, Y+37	; 0x25
    33b4:	9e a1       	ldd	r25, Y+38	; 0x26
    33b6:	20 e0       	ldi	r18, 0x00	; 0
    33b8:	3f ef       	ldi	r19, 0xFF	; 255
    33ba:	4f e7       	ldi	r20, 0x7F	; 127
    33bc:	57 e4       	ldi	r21, 0x47	; 71
    33be:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    33c2:	18 16       	cp	r1, r24
    33c4:	4c f5       	brge	.+82     	; 0x3418 <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33c6:	6f a1       	ldd	r22, Y+39	; 0x27
    33c8:	78 a5       	ldd	r23, Y+40	; 0x28
    33ca:	89 a5       	ldd	r24, Y+41	; 0x29
    33cc:	9a a5       	ldd	r25, Y+42	; 0x2a
    33ce:	20 e0       	ldi	r18, 0x00	; 0
    33d0:	30 e0       	ldi	r19, 0x00	; 0
    33d2:	40 e2       	ldi	r20, 0x20	; 32
    33d4:	51 e4       	ldi	r21, 0x41	; 65
    33d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33da:	dc 01       	movw	r26, r24
    33dc:	cb 01       	movw	r24, r22
    33de:	bc 01       	movw	r22, r24
    33e0:	cd 01       	movw	r24, r26
    33e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33e6:	dc 01       	movw	r26, r24
    33e8:	cb 01       	movw	r24, r22
    33ea:	9a a3       	std	Y+34, r25	; 0x22
    33ec:	89 a3       	std	Y+33, r24	; 0x21
    33ee:	0f c0       	rjmp	.+30     	; 0x340e <LCD_displayCharacter+0x658>
    33f0:	88 ec       	ldi	r24, 0xC8	; 200
    33f2:	90 e0       	ldi	r25, 0x00	; 0
    33f4:	98 a3       	std	Y+32, r25	; 0x20
    33f6:	8f 8f       	std	Y+31, r24	; 0x1f
    33f8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    33fa:	98 a1       	ldd	r25, Y+32	; 0x20
    33fc:	01 97       	sbiw	r24, 0x01	; 1
    33fe:	f1 f7       	brne	.-4      	; 0x33fc <LCD_displayCharacter+0x646>
    3400:	98 a3       	std	Y+32, r25	; 0x20
    3402:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3404:	89 a1       	ldd	r24, Y+33	; 0x21
    3406:	9a a1       	ldd	r25, Y+34	; 0x22
    3408:	01 97       	sbiw	r24, 0x01	; 1
    340a:	9a a3       	std	Y+34, r25	; 0x22
    340c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    340e:	89 a1       	ldd	r24, Y+33	; 0x21
    3410:	9a a1       	ldd	r25, Y+34	; 0x22
    3412:	00 97       	sbiw	r24, 0x00	; 0
    3414:	69 f7       	brne	.-38     	; 0x33f0 <LCD_displayCharacter+0x63a>
    3416:	14 c0       	rjmp	.+40     	; 0x3440 <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3418:	6b a1       	ldd	r22, Y+35	; 0x23
    341a:	7c a1       	ldd	r23, Y+36	; 0x24
    341c:	8d a1       	ldd	r24, Y+37	; 0x25
    341e:	9e a1       	ldd	r25, Y+38	; 0x26
    3420:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3424:	dc 01       	movw	r26, r24
    3426:	cb 01       	movw	r24, r22
    3428:	9a a3       	std	Y+34, r25	; 0x22
    342a:	89 a3       	std	Y+33, r24	; 0x21
    342c:	89 a1       	ldd	r24, Y+33	; 0x21
    342e:	9a a1       	ldd	r25, Y+34	; 0x22
    3430:	9e 8f       	std	Y+30, r25	; 0x1e
    3432:	8d 8f       	std	Y+29, r24	; 0x1d
    3434:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3436:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3438:	01 97       	sbiw	r24, 0x01	; 1
    343a:	f1 f7       	brne	.-4      	; 0x3438 <LCD_displayCharacter+0x682>
    343c:	9e 8f       	std	Y+30, r25	; 0x1e
    343e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
    3440:	fe 01       	movw	r30, r28
    3442:	ed 59       	subi	r30, 0x9D	; 157
    3444:	ff 4f       	sbci	r31, 0xFF	; 255
    3446:	80 81       	ld	r24, Z
    3448:	98 2f       	mov	r25, r24
    344a:	91 70       	andi	r25, 0x01	; 1
    344c:	80 e0       	ldi	r24, 0x00	; 0
    344e:	62 e0       	ldi	r22, 0x02	; 2
    3450:	49 2f       	mov	r20, r25
    3452:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
    3456:	fe 01       	movw	r30, r28
    3458:	ed 59       	subi	r30, 0x9D	; 157
    345a:	ff 4f       	sbci	r31, 0xFF	; 255
    345c:	80 81       	ld	r24, Z
    345e:	88 2f       	mov	r24, r24
    3460:	90 e0       	ldi	r25, 0x00	; 0
    3462:	82 70       	andi	r24, 0x02	; 2
    3464:	90 70       	andi	r25, 0x00	; 0
    3466:	95 95       	asr	r25
    3468:	87 95       	ror	r24
    346a:	98 2f       	mov	r25, r24
    346c:	80 e0       	ldi	r24, 0x00	; 0
    346e:	63 e0       	ldi	r22, 0x03	; 3
    3470:	49 2f       	mov	r20, r25
    3472:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
    3476:	fe 01       	movw	r30, r28
    3478:	ed 59       	subi	r30, 0x9D	; 157
    347a:	ff 4f       	sbci	r31, 0xFF	; 255
    347c:	80 81       	ld	r24, Z
    347e:	88 2f       	mov	r24, r24
    3480:	90 e0       	ldi	r25, 0x00	; 0
    3482:	84 70       	andi	r24, 0x04	; 4
    3484:	90 70       	andi	r25, 0x00	; 0
    3486:	95 95       	asr	r25
    3488:	87 95       	ror	r24
    348a:	95 95       	asr	r25
    348c:	87 95       	ror	r24
    348e:	98 2f       	mov	r25, r24
    3490:	80 e0       	ldi	r24, 0x00	; 0
    3492:	64 e0       	ldi	r22, 0x04	; 4
    3494:	49 2f       	mov	r20, r25
    3496:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
    349a:	fe 01       	movw	r30, r28
    349c:	ed 59       	subi	r30, 0x9D	; 157
    349e:	ff 4f       	sbci	r31, 0xFF	; 255
    34a0:	80 81       	ld	r24, Z
    34a2:	88 2f       	mov	r24, r24
    34a4:	90 e0       	ldi	r25, 0x00	; 0
    34a6:	88 70       	andi	r24, 0x08	; 8
    34a8:	90 70       	andi	r25, 0x00	; 0
    34aa:	95 95       	asr	r25
    34ac:	87 95       	ror	r24
    34ae:	95 95       	asr	r25
    34b0:	87 95       	ror	r24
    34b2:	95 95       	asr	r25
    34b4:	87 95       	ror	r24
    34b6:	98 2f       	mov	r25, r24
    34b8:	80 e0       	ldi	r24, 0x00	; 0
    34ba:	65 e0       	ldi	r22, 0x05	; 5
    34bc:	49 2f       	mov	r20, r25
    34be:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <GPIO_writePin>
    34c2:	80 e0       	ldi	r24, 0x00	; 0
    34c4:	90 e0       	ldi	r25, 0x00	; 0
    34c6:	a0 e8       	ldi	r26, 0x80	; 128
    34c8:	bf e3       	ldi	r27, 0x3F	; 63
    34ca:	89 8f       	std	Y+25, r24	; 0x19
    34cc:	9a 8f       	std	Y+26, r25	; 0x1a
    34ce:	ab 8f       	std	Y+27, r26	; 0x1b
    34d0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34d2:	69 8d       	ldd	r22, Y+25	; 0x19
    34d4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    34d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    34d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    34da:	20 e0       	ldi	r18, 0x00	; 0
    34dc:	30 e0       	ldi	r19, 0x00	; 0
    34de:	4a ef       	ldi	r20, 0xFA	; 250
    34e0:	54 e4       	ldi	r21, 0x44	; 68
    34e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34e6:	dc 01       	movw	r26, r24
    34e8:	cb 01       	movw	r24, r22
    34ea:	8d 8b       	std	Y+21, r24	; 0x15
    34ec:	9e 8b       	std	Y+22, r25	; 0x16
    34ee:	af 8b       	std	Y+23, r26	; 0x17
    34f0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    34f2:	6d 89       	ldd	r22, Y+21	; 0x15
    34f4:	7e 89       	ldd	r23, Y+22	; 0x16
    34f6:	8f 89       	ldd	r24, Y+23	; 0x17
    34f8:	98 8d       	ldd	r25, Y+24	; 0x18
    34fa:	20 e0       	ldi	r18, 0x00	; 0
    34fc:	30 e0       	ldi	r19, 0x00	; 0
    34fe:	40 e8       	ldi	r20, 0x80	; 128
    3500:	5f e3       	ldi	r21, 0x3F	; 63
    3502:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3506:	88 23       	and	r24, r24
    3508:	2c f4       	brge	.+10     	; 0x3514 <LCD_displayCharacter+0x75e>
		__ticks = 1;
    350a:	81 e0       	ldi	r24, 0x01	; 1
    350c:	90 e0       	ldi	r25, 0x00	; 0
    350e:	9c 8b       	std	Y+20, r25	; 0x14
    3510:	8b 8b       	std	Y+19, r24	; 0x13
    3512:	3f c0       	rjmp	.+126    	; 0x3592 <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    3514:	6d 89       	ldd	r22, Y+21	; 0x15
    3516:	7e 89       	ldd	r23, Y+22	; 0x16
    3518:	8f 89       	ldd	r24, Y+23	; 0x17
    351a:	98 8d       	ldd	r25, Y+24	; 0x18
    351c:	20 e0       	ldi	r18, 0x00	; 0
    351e:	3f ef       	ldi	r19, 0xFF	; 255
    3520:	4f e7       	ldi	r20, 0x7F	; 127
    3522:	57 e4       	ldi	r21, 0x47	; 71
    3524:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3528:	18 16       	cp	r1, r24
    352a:	4c f5       	brge	.+82     	; 0x357e <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    352c:	69 8d       	ldd	r22, Y+25	; 0x19
    352e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3530:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3532:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3534:	20 e0       	ldi	r18, 0x00	; 0
    3536:	30 e0       	ldi	r19, 0x00	; 0
    3538:	40 e2       	ldi	r20, 0x20	; 32
    353a:	51 e4       	ldi	r21, 0x41	; 65
    353c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3540:	dc 01       	movw	r26, r24
    3542:	cb 01       	movw	r24, r22
    3544:	bc 01       	movw	r22, r24
    3546:	cd 01       	movw	r24, r26
    3548:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    354c:	dc 01       	movw	r26, r24
    354e:	cb 01       	movw	r24, r22
    3550:	9c 8b       	std	Y+20, r25	; 0x14
    3552:	8b 8b       	std	Y+19, r24	; 0x13
    3554:	0f c0       	rjmp	.+30     	; 0x3574 <LCD_displayCharacter+0x7be>
    3556:	88 ec       	ldi	r24, 0xC8	; 200
    3558:	90 e0       	ldi	r25, 0x00	; 0
    355a:	9a 8b       	std	Y+18, r25	; 0x12
    355c:	89 8b       	std	Y+17, r24	; 0x11
    355e:	89 89       	ldd	r24, Y+17	; 0x11
    3560:	9a 89       	ldd	r25, Y+18	; 0x12
    3562:	01 97       	sbiw	r24, 0x01	; 1
    3564:	f1 f7       	brne	.-4      	; 0x3562 <LCD_displayCharacter+0x7ac>
    3566:	9a 8b       	std	Y+18, r25	; 0x12
    3568:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    356a:	8b 89       	ldd	r24, Y+19	; 0x13
    356c:	9c 89       	ldd	r25, Y+20	; 0x14
    356e:	01 97       	sbiw	r24, 0x01	; 1
    3570:	9c 8b       	std	Y+20, r25	; 0x14
    3572:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3574:	8b 89       	ldd	r24, Y+19	; 0x13
    3576:	9c 89       	ldd	r25, Y+20	; 0x14
    3578:	00 97       	sbiw	r24, 0x00	; 0
    357a:	69 f7       	brne	.-38     	; 0x3556 <LCD_displayCharacter+0x7a0>
    357c:	14 c0       	rjmp	.+40     	; 0x35a6 <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    357e:	6d 89       	ldd	r22, Y+21	; 0x15
    3580:	7e 89       	ldd	r23, Y+22	; 0x16
    3582:	8f 89       	ldd	r24, Y+23	; 0x17
    3584:	98 8d       	ldd	r25, Y+24	; 0x18
    3586:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    358a:	dc 01       	movw	r26, r24
    358c:	cb 01       	movw	r24, r22
    358e:	9c 8b       	std	Y+20, r25	; 0x14
    3590:	8b 8b       	std	Y+19, r24	; 0x13
    3592:	8b 89       	ldd	r24, Y+19	; 0x13
    3594:	9c 89       	ldd	r25, Y+20	; 0x14
    3596:	98 8b       	std	Y+16, r25	; 0x10
    3598:	8f 87       	std	Y+15, r24	; 0x0f
    359a:	8f 85       	ldd	r24, Y+15	; 0x0f
    359c:	98 89       	ldd	r25, Y+16	; 0x10
    359e:	01 97       	sbiw	r24, 0x01	; 1
    35a0:	f1 f7       	brne	.-4      	; 0x359e <LCD_displayCharacter+0x7e8>
    35a2:	98 8b       	std	Y+16, r25	; 0x10
    35a4:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    35a6:	80 e0       	ldi	r24, 0x00	; 0
    35a8:	61 e0       	ldi	r22, 0x01	; 1
    35aa:	40 e0       	ldi	r20, 0x00	; 0
    35ac:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <GPIO_writePin>
    35b0:	80 e0       	ldi	r24, 0x00	; 0
    35b2:	90 e0       	ldi	r25, 0x00	; 0
    35b4:	a0 e8       	ldi	r26, 0x80	; 128
    35b6:	bf e3       	ldi	r27, 0x3F	; 63
    35b8:	8b 87       	std	Y+11, r24	; 0x0b
    35ba:	9c 87       	std	Y+12, r25	; 0x0c
    35bc:	ad 87       	std	Y+13, r26	; 0x0d
    35be:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    35c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    35c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    35c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    35c8:	20 e0       	ldi	r18, 0x00	; 0
    35ca:	30 e0       	ldi	r19, 0x00	; 0
    35cc:	4a ef       	ldi	r20, 0xFA	; 250
    35ce:	54 e4       	ldi	r21, 0x44	; 68
    35d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35d4:	dc 01       	movw	r26, r24
    35d6:	cb 01       	movw	r24, r22
    35d8:	8f 83       	std	Y+7, r24	; 0x07
    35da:	98 87       	std	Y+8, r25	; 0x08
    35dc:	a9 87       	std	Y+9, r26	; 0x09
    35de:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    35e0:	6f 81       	ldd	r22, Y+7	; 0x07
    35e2:	78 85       	ldd	r23, Y+8	; 0x08
    35e4:	89 85       	ldd	r24, Y+9	; 0x09
    35e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    35e8:	20 e0       	ldi	r18, 0x00	; 0
    35ea:	30 e0       	ldi	r19, 0x00	; 0
    35ec:	40 e8       	ldi	r20, 0x80	; 128
    35ee:	5f e3       	ldi	r21, 0x3F	; 63
    35f0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    35f4:	88 23       	and	r24, r24
    35f6:	2c f4       	brge	.+10     	; 0x3602 <LCD_displayCharacter+0x84c>
		__ticks = 1;
    35f8:	81 e0       	ldi	r24, 0x01	; 1
    35fa:	90 e0       	ldi	r25, 0x00	; 0
    35fc:	9e 83       	std	Y+6, r25	; 0x06
    35fe:	8d 83       	std	Y+5, r24	; 0x05
    3600:	3f c0       	rjmp	.+126    	; 0x3680 <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    3602:	6f 81       	ldd	r22, Y+7	; 0x07
    3604:	78 85       	ldd	r23, Y+8	; 0x08
    3606:	89 85       	ldd	r24, Y+9	; 0x09
    3608:	9a 85       	ldd	r25, Y+10	; 0x0a
    360a:	20 e0       	ldi	r18, 0x00	; 0
    360c:	3f ef       	ldi	r19, 0xFF	; 255
    360e:	4f e7       	ldi	r20, 0x7F	; 127
    3610:	57 e4       	ldi	r21, 0x47	; 71
    3612:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3616:	18 16       	cp	r1, r24
    3618:	4c f5       	brge	.+82     	; 0x366c <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    361a:	6b 85       	ldd	r22, Y+11	; 0x0b
    361c:	7c 85       	ldd	r23, Y+12	; 0x0c
    361e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3620:	9e 85       	ldd	r25, Y+14	; 0x0e
    3622:	20 e0       	ldi	r18, 0x00	; 0
    3624:	30 e0       	ldi	r19, 0x00	; 0
    3626:	40 e2       	ldi	r20, 0x20	; 32
    3628:	51 e4       	ldi	r21, 0x41	; 65
    362a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    362e:	dc 01       	movw	r26, r24
    3630:	cb 01       	movw	r24, r22
    3632:	bc 01       	movw	r22, r24
    3634:	cd 01       	movw	r24, r26
    3636:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    363a:	dc 01       	movw	r26, r24
    363c:	cb 01       	movw	r24, r22
    363e:	9e 83       	std	Y+6, r25	; 0x06
    3640:	8d 83       	std	Y+5, r24	; 0x05
    3642:	0f c0       	rjmp	.+30     	; 0x3662 <LCD_displayCharacter+0x8ac>
    3644:	88 ec       	ldi	r24, 0xC8	; 200
    3646:	90 e0       	ldi	r25, 0x00	; 0
    3648:	9c 83       	std	Y+4, r25	; 0x04
    364a:	8b 83       	std	Y+3, r24	; 0x03
    364c:	8b 81       	ldd	r24, Y+3	; 0x03
    364e:	9c 81       	ldd	r25, Y+4	; 0x04
    3650:	01 97       	sbiw	r24, 0x01	; 1
    3652:	f1 f7       	brne	.-4      	; 0x3650 <LCD_displayCharacter+0x89a>
    3654:	9c 83       	std	Y+4, r25	; 0x04
    3656:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3658:	8d 81       	ldd	r24, Y+5	; 0x05
    365a:	9e 81       	ldd	r25, Y+6	; 0x06
    365c:	01 97       	sbiw	r24, 0x01	; 1
    365e:	9e 83       	std	Y+6, r25	; 0x06
    3660:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3662:	8d 81       	ldd	r24, Y+5	; 0x05
    3664:	9e 81       	ldd	r25, Y+6	; 0x06
    3666:	00 97       	sbiw	r24, 0x00	; 0
    3668:	69 f7       	brne	.-38     	; 0x3644 <LCD_displayCharacter+0x88e>
    366a:	14 c0       	rjmp	.+40     	; 0x3694 <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    366c:	6f 81       	ldd	r22, Y+7	; 0x07
    366e:	78 85       	ldd	r23, Y+8	; 0x08
    3670:	89 85       	ldd	r24, Y+9	; 0x09
    3672:	9a 85       	ldd	r25, Y+10	; 0x0a
    3674:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3678:	dc 01       	movw	r26, r24
    367a:	cb 01       	movw	r24, r22
    367c:	9e 83       	std	Y+6, r25	; 0x06
    367e:	8d 83       	std	Y+5, r24	; 0x05
    3680:	8d 81       	ldd	r24, Y+5	; 0x05
    3682:	9e 81       	ldd	r25, Y+6	; 0x06
    3684:	9a 83       	std	Y+2, r25	; 0x02
    3686:	89 83       	std	Y+1, r24	; 0x01
    3688:	89 81       	ldd	r24, Y+1	; 0x01
    368a:	9a 81       	ldd	r25, Y+2	; 0x02
    368c:	01 97       	sbiw	r24, 0x01	; 1
    368e:	f1 f7       	brne	.-4      	; 0x368c <LCD_displayCharacter+0x8d6>
    3690:	9a 83       	std	Y+2, r25	; 0x02
    3692:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    3694:	cd 59       	subi	r28, 0x9D	; 157
    3696:	df 4f       	sbci	r29, 0xFF	; 255
    3698:	0f b6       	in	r0, 0x3f	; 63
    369a:	f8 94       	cli
    369c:	de bf       	out	0x3e, r29	; 62
    369e:	0f be       	out	0x3f, r0	; 63
    36a0:	cd bf       	out	0x3d, r28	; 61
    36a2:	cf 91       	pop	r28
    36a4:	df 91       	pop	r29
    36a6:	1f 91       	pop	r17
    36a8:	0f 91       	pop	r16
    36aa:	08 95       	ret

000036ac <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    36ac:	df 93       	push	r29
    36ae:	cf 93       	push	r28
    36b0:	00 d0       	rcall	.+0      	; 0x36b2 <LCD_displayString+0x6>
    36b2:	0f 92       	push	r0
    36b4:	cd b7       	in	r28, 0x3d	; 61
    36b6:	de b7       	in	r29, 0x3e	; 62
    36b8:	9b 83       	std	Y+3, r25	; 0x03
    36ba:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    36bc:	19 82       	std	Y+1, r1	; 0x01
    36be:	0e c0       	rjmp	.+28     	; 0x36dc <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    36c0:	89 81       	ldd	r24, Y+1	; 0x01
    36c2:	28 2f       	mov	r18, r24
    36c4:	30 e0       	ldi	r19, 0x00	; 0
    36c6:	8a 81       	ldd	r24, Y+2	; 0x02
    36c8:	9b 81       	ldd	r25, Y+3	; 0x03
    36ca:	fc 01       	movw	r30, r24
    36cc:	e2 0f       	add	r30, r18
    36ce:	f3 1f       	adc	r31, r19
    36d0:	80 81       	ld	r24, Z
    36d2:	0e 94 db 16 	call	0x2db6	; 0x2db6 <LCD_displayCharacter>
		i++;
    36d6:	89 81       	ldd	r24, Y+1	; 0x01
    36d8:	8f 5f       	subi	r24, 0xFF	; 255
    36da:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    36dc:	89 81       	ldd	r24, Y+1	; 0x01
    36de:	28 2f       	mov	r18, r24
    36e0:	30 e0       	ldi	r19, 0x00	; 0
    36e2:	8a 81       	ldd	r24, Y+2	; 0x02
    36e4:	9b 81       	ldd	r25, Y+3	; 0x03
    36e6:	fc 01       	movw	r30, r24
    36e8:	e2 0f       	add	r30, r18
    36ea:	f3 1f       	adc	r31, r19
    36ec:	80 81       	ld	r24, Z
    36ee:	88 23       	and	r24, r24
    36f0:	39 f7       	brne	.-50     	; 0x36c0 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    36f2:	0f 90       	pop	r0
    36f4:	0f 90       	pop	r0
    36f6:	0f 90       	pop	r0
    36f8:	cf 91       	pop	r28
    36fa:	df 91       	pop	r29
    36fc:	08 95       	ret

000036fe <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    36fe:	df 93       	push	r29
    3700:	cf 93       	push	r28
    3702:	00 d0       	rcall	.+0      	; 0x3704 <LCD_moveCursor+0x6>
    3704:	00 d0       	rcall	.+0      	; 0x3706 <LCD_moveCursor+0x8>
    3706:	0f 92       	push	r0
    3708:	cd b7       	in	r28, 0x3d	; 61
    370a:	de b7       	in	r29, 0x3e	; 62
    370c:	8a 83       	std	Y+2, r24	; 0x02
    370e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    3710:	8a 81       	ldd	r24, Y+2	; 0x02
    3712:	28 2f       	mov	r18, r24
    3714:	30 e0       	ldi	r19, 0x00	; 0
    3716:	3d 83       	std	Y+5, r19	; 0x05
    3718:	2c 83       	std	Y+4, r18	; 0x04
    371a:	8c 81       	ldd	r24, Y+4	; 0x04
    371c:	9d 81       	ldd	r25, Y+5	; 0x05
    371e:	81 30       	cpi	r24, 0x01	; 1
    3720:	91 05       	cpc	r25, r1
    3722:	c1 f0       	breq	.+48     	; 0x3754 <LCD_moveCursor+0x56>
    3724:	2c 81       	ldd	r18, Y+4	; 0x04
    3726:	3d 81       	ldd	r19, Y+5	; 0x05
    3728:	22 30       	cpi	r18, 0x02	; 2
    372a:	31 05       	cpc	r19, r1
    372c:	2c f4       	brge	.+10     	; 0x3738 <LCD_moveCursor+0x3a>
    372e:	8c 81       	ldd	r24, Y+4	; 0x04
    3730:	9d 81       	ldd	r25, Y+5	; 0x05
    3732:	00 97       	sbiw	r24, 0x00	; 0
    3734:	61 f0       	breq	.+24     	; 0x374e <LCD_moveCursor+0x50>
    3736:	19 c0       	rjmp	.+50     	; 0x376a <LCD_moveCursor+0x6c>
    3738:	2c 81       	ldd	r18, Y+4	; 0x04
    373a:	3d 81       	ldd	r19, Y+5	; 0x05
    373c:	22 30       	cpi	r18, 0x02	; 2
    373e:	31 05       	cpc	r19, r1
    3740:	69 f0       	breq	.+26     	; 0x375c <LCD_moveCursor+0x5e>
    3742:	8c 81       	ldd	r24, Y+4	; 0x04
    3744:	9d 81       	ldd	r25, Y+5	; 0x05
    3746:	83 30       	cpi	r24, 0x03	; 3
    3748:	91 05       	cpc	r25, r1
    374a:	61 f0       	breq	.+24     	; 0x3764 <LCD_moveCursor+0x66>
    374c:	0e c0       	rjmp	.+28     	; 0x376a <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    374e:	8b 81       	ldd	r24, Y+3	; 0x03
    3750:	89 83       	std	Y+1, r24	; 0x01
    3752:	0b c0       	rjmp	.+22     	; 0x376a <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    3754:	8b 81       	ldd	r24, Y+3	; 0x03
    3756:	80 5c       	subi	r24, 0xC0	; 192
    3758:	89 83       	std	Y+1, r24	; 0x01
    375a:	07 c0       	rjmp	.+14     	; 0x376a <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    375c:	8b 81       	ldd	r24, Y+3	; 0x03
    375e:	80 5f       	subi	r24, 0xF0	; 240
    3760:	89 83       	std	Y+1, r24	; 0x01
    3762:	03 c0       	rjmp	.+6      	; 0x376a <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    3764:	8b 81       	ldd	r24, Y+3	; 0x03
    3766:	80 5b       	subi	r24, 0xB0	; 176
    3768:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    376a:	89 81       	ldd	r24, Y+1	; 0x01
    376c:	80 68       	ori	r24, 0x80	; 128
    376e:	0e 94 60 12 	call	0x24c0	; 0x24c0 <LCD_sendCommand>
}
    3772:	0f 90       	pop	r0
    3774:	0f 90       	pop	r0
    3776:	0f 90       	pop	r0
    3778:	0f 90       	pop	r0
    377a:	0f 90       	pop	r0
    377c:	cf 91       	pop	r28
    377e:	df 91       	pop	r29
    3780:	08 95       	ret

00003782 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    3782:	df 93       	push	r29
    3784:	cf 93       	push	r28
    3786:	00 d0       	rcall	.+0      	; 0x3788 <LCD_displayStringRowColumn+0x6>
    3788:	00 d0       	rcall	.+0      	; 0x378a <LCD_displayStringRowColumn+0x8>
    378a:	cd b7       	in	r28, 0x3d	; 61
    378c:	de b7       	in	r29, 0x3e	; 62
    378e:	89 83       	std	Y+1, r24	; 0x01
    3790:	6a 83       	std	Y+2, r22	; 0x02
    3792:	5c 83       	std	Y+4, r21	; 0x04
    3794:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    3796:	89 81       	ldd	r24, Y+1	; 0x01
    3798:	6a 81       	ldd	r22, Y+2	; 0x02
    379a:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    379e:	8b 81       	ldd	r24, Y+3	; 0x03
    37a0:	9c 81       	ldd	r25, Y+4	; 0x04
    37a2:	0e 94 56 1b 	call	0x36ac	; 0x36ac <LCD_displayString>
}
    37a6:	0f 90       	pop	r0
    37a8:	0f 90       	pop	r0
    37aa:	0f 90       	pop	r0
    37ac:	0f 90       	pop	r0
    37ae:	cf 91       	pop	r28
    37b0:	df 91       	pop	r29
    37b2:	08 95       	ret

000037b4 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    37b4:	df 93       	push	r29
    37b6:	cf 93       	push	r28
    37b8:	cd b7       	in	r28, 0x3d	; 61
    37ba:	de b7       	in	r29, 0x3e	; 62
    37bc:	62 97       	sbiw	r28, 0x12	; 18
    37be:	0f b6       	in	r0, 0x3f	; 63
    37c0:	f8 94       	cli
    37c2:	de bf       	out	0x3e, r29	; 62
    37c4:	0f be       	out	0x3f, r0	; 63
    37c6:	cd bf       	out	0x3d, r28	; 61
    37c8:	9a 8b       	std	Y+18, r25	; 0x12
    37ca:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    37cc:	89 89       	ldd	r24, Y+17	; 0x11
    37ce:	9a 89       	ldd	r25, Y+18	; 0x12
    37d0:	9e 01       	movw	r18, r28
    37d2:	2f 5f       	subi	r18, 0xFF	; 255
    37d4:	3f 4f       	sbci	r19, 0xFF	; 255
    37d6:	b9 01       	movw	r22, r18
    37d8:	4a e0       	ldi	r20, 0x0A	; 10
    37da:	50 e0       	ldi	r21, 0x00	; 0
    37dc:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <itoa>
   LCD_displayString(buff); /* Display the string */
    37e0:	ce 01       	movw	r24, r28
    37e2:	01 96       	adiw	r24, 0x01	; 1
    37e4:	0e 94 56 1b 	call	0x36ac	; 0x36ac <LCD_displayString>
}
    37e8:	62 96       	adiw	r28, 0x12	; 18
    37ea:	0f b6       	in	r0, 0x3f	; 63
    37ec:	f8 94       	cli
    37ee:	de bf       	out	0x3e, r29	; 62
    37f0:	0f be       	out	0x3f, r0	; 63
    37f2:	cd bf       	out	0x3d, r28	; 61
    37f4:	cf 91       	pop	r28
    37f6:	df 91       	pop	r29
    37f8:	08 95       	ret

000037fa <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    37fa:	df 93       	push	r29
    37fc:	cf 93       	push	r28
    37fe:	cd b7       	in	r28, 0x3d	; 61
    3800:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    3802:	81 e0       	ldi	r24, 0x01	; 1
    3804:	0e 94 60 12 	call	0x24c0	; 0x24c0 <LCD_sendCommand>
}
    3808:	cf 91       	pop	r28
    380a:	df 91       	pop	r29
    380c:	08 95       	ret

0000380e <PWM_Timer0_Start>:
#include "std_types.h"
#include "common_macros.h"
#include "gpio.h"
#include <avr/io.h>

void PWM_Timer0_Start(uint8 duty_cycle){
    380e:	0f 93       	push	r16
    3810:	1f 93       	push	r17
    3812:	df 93       	push	r29
    3814:	cf 93       	push	r28
    3816:	0f 92       	push	r0
    3818:	cd b7       	in	r28, 0x3d	; 61
    381a:	de b7       	in	r29, 0x3e	; 62
    381c:	89 83       	std	Y+1, r24	; 0x01

	// Configure PB3/OC0 as output pin --> pin where the PWM signal is generated from MC
	DDRB  = DDRB | (1<<PB3);
    381e:	a7 e3       	ldi	r26, 0x37	; 55
    3820:	b0 e0       	ldi	r27, 0x00	; 0
    3822:	e7 e3       	ldi	r30, 0x37	; 55
    3824:	f0 e0       	ldi	r31, 0x00	; 0
    3826:	80 81       	ld	r24, Z
    3828:	88 60       	ori	r24, 0x08	; 8
    382a:	8c 93       	st	X, r24
		 * 1. Fast PWM mode FOC0=0
		 * 2. Fast PWM Mode WGM01=1 & WGM00=1
		 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
		 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
		 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
    382c:	e3 e5       	ldi	r30, 0x53	; 83
    382e:	f0 e0       	ldi	r31, 0x00	; 0
    3830:	8a e6       	ldi	r24, 0x6A	; 106
    3832:	80 83       	st	Z, r24
	TCNT0 = 0; // Set Timer Initial Value to 0
    3834:	e2 e5       	ldi	r30, 0x52	; 82
    3836:	f0 e0       	ldi	r31, 0x00	; 0
    3838:	10 82       	st	Z, r1

	OCR0  = (uint8)(((float32)duty_cycle/100)*255);  // Set Compare Value
    383a:	0c e5       	ldi	r16, 0x5C	; 92
    383c:	10 e0       	ldi	r17, 0x00	; 0
    383e:	89 81       	ldd	r24, Y+1	; 0x01
    3840:	88 2f       	mov	r24, r24
    3842:	90 e0       	ldi	r25, 0x00	; 0
    3844:	a0 e0       	ldi	r26, 0x00	; 0
    3846:	b0 e0       	ldi	r27, 0x00	; 0
    3848:	bc 01       	movw	r22, r24
    384a:	cd 01       	movw	r24, r26
    384c:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    3850:	dc 01       	movw	r26, r24
    3852:	cb 01       	movw	r24, r22
    3854:	bc 01       	movw	r22, r24
    3856:	cd 01       	movw	r24, r26
    3858:	20 e0       	ldi	r18, 0x00	; 0
    385a:	30 e0       	ldi	r19, 0x00	; 0
    385c:	48 ec       	ldi	r20, 0xC8	; 200
    385e:	52 e4       	ldi	r21, 0x42	; 66
    3860:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3864:	dc 01       	movw	r26, r24
    3866:	cb 01       	movw	r24, r22
    3868:	bc 01       	movw	r22, r24
    386a:	cd 01       	movw	r24, r26
    386c:	20 e0       	ldi	r18, 0x00	; 0
    386e:	30 e0       	ldi	r19, 0x00	; 0
    3870:	4f e7       	ldi	r20, 0x7F	; 127
    3872:	53 e4       	ldi	r21, 0x43	; 67
    3874:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3878:	dc 01       	movw	r26, r24
    387a:	cb 01       	movw	r24, r22
    387c:	bc 01       	movw	r22, r24
    387e:	cd 01       	movw	r24, r26
    3880:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3884:	dc 01       	movw	r26, r24
    3886:	cb 01       	movw	r24, r22
    3888:	f8 01       	movw	r30, r16
    388a:	80 83       	st	Z, r24


}
    388c:	0f 90       	pop	r0
    388e:	cf 91       	pop	r28
    3890:	df 91       	pop	r29
    3892:	1f 91       	pop	r17
    3894:	0f 91       	pop	r16
    3896:	08 95       	ret

00003898 <__vector_7>:

/* Global variables to hold the address of the call back function in the application */
static volatile void (*g_callBackPtr)(void) = NULL_PTR;

ISR(TIMER1_COMPA_vect)
{
    3898:	1f 92       	push	r1
    389a:	0f 92       	push	r0
    389c:	0f b6       	in	r0, 0x3f	; 63
    389e:	0f 92       	push	r0
    38a0:	11 24       	eor	r1, r1
    38a2:	2f 93       	push	r18
    38a4:	3f 93       	push	r19
    38a6:	4f 93       	push	r20
    38a8:	5f 93       	push	r21
    38aa:	6f 93       	push	r22
    38ac:	7f 93       	push	r23
    38ae:	8f 93       	push	r24
    38b0:	9f 93       	push	r25
    38b2:	af 93       	push	r26
    38b4:	bf 93       	push	r27
    38b6:	ef 93       	push	r30
    38b8:	ff 93       	push	r31
    38ba:	df 93       	push	r29
    38bc:	cf 93       	push	r28
    38be:	cd b7       	in	r28, 0x3d	; 61
    38c0:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    38c2:	80 91 8b 01 	lds	r24, 0x018B
    38c6:	90 91 8c 01 	lds	r25, 0x018C
    38ca:	00 97       	sbiw	r24, 0x00	; 0
    38cc:	29 f0       	breq	.+10     	; 0x38d8 <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    38ce:	e0 91 8b 01 	lds	r30, 0x018B
    38d2:	f0 91 8c 01 	lds	r31, 0x018C
    38d6:	09 95       	icall
	}
}
    38d8:	cf 91       	pop	r28
    38da:	df 91       	pop	r29
    38dc:	ff 91       	pop	r31
    38de:	ef 91       	pop	r30
    38e0:	bf 91       	pop	r27
    38e2:	af 91       	pop	r26
    38e4:	9f 91       	pop	r25
    38e6:	8f 91       	pop	r24
    38e8:	7f 91       	pop	r23
    38ea:	6f 91       	pop	r22
    38ec:	5f 91       	pop	r21
    38ee:	4f 91       	pop	r20
    38f0:	3f 91       	pop	r19
    38f2:	2f 91       	pop	r18
    38f4:	0f 90       	pop	r0
    38f6:	0f be       	out	0x3f, r0	; 63
    38f8:	0f 90       	pop	r0
    38fa:	1f 90       	pop	r1
    38fc:	18 95       	reti

000038fe <__vector_9>:

ISR(TIMER1_OVF_vect)
{
    38fe:	1f 92       	push	r1
    3900:	0f 92       	push	r0
    3902:	0f b6       	in	r0, 0x3f	; 63
    3904:	0f 92       	push	r0
    3906:	11 24       	eor	r1, r1
    3908:	2f 93       	push	r18
    390a:	3f 93       	push	r19
    390c:	4f 93       	push	r20
    390e:	5f 93       	push	r21
    3910:	6f 93       	push	r22
    3912:	7f 93       	push	r23
    3914:	8f 93       	push	r24
    3916:	9f 93       	push	r25
    3918:	af 93       	push	r26
    391a:	bf 93       	push	r27
    391c:	ef 93       	push	r30
    391e:	ff 93       	push	r31
    3920:	df 93       	push	r29
    3922:	cf 93       	push	r28
    3924:	cd b7       	in	r28, 0x3d	; 61
    3926:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    3928:	80 91 8b 01 	lds	r24, 0x018B
    392c:	90 91 8c 01 	lds	r25, 0x018C
    3930:	00 97       	sbiw	r24, 0x00	; 0
    3932:	29 f0       	breq	.+10     	; 0x393e <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    3934:	e0 91 8b 01 	lds	r30, 0x018B
    3938:	f0 91 8c 01 	lds	r31, 0x018C
    393c:	09 95       	icall
	}
}
    393e:	cf 91       	pop	r28
    3940:	df 91       	pop	r29
    3942:	ff 91       	pop	r31
    3944:	ef 91       	pop	r30
    3946:	bf 91       	pop	r27
    3948:	af 91       	pop	r26
    394a:	9f 91       	pop	r25
    394c:	8f 91       	pop	r24
    394e:	7f 91       	pop	r23
    3950:	6f 91       	pop	r22
    3952:	5f 91       	pop	r21
    3954:	4f 91       	pop	r20
    3956:	3f 91       	pop	r19
    3958:	2f 91       	pop	r18
    395a:	0f 90       	pop	r0
    395c:	0f be       	out	0x3f, r0	; 63
    395e:	0f 90       	pop	r0
    3960:	1f 90       	pop	r1
    3962:	18 95       	reti

00003964 <Timer1_init>:

void Timer1_init(const Timer1_ConfigType * Config_Ptr){
    3964:	df 93       	push	r29
    3966:	cf 93       	push	r28
    3968:	00 d0       	rcall	.+0      	; 0x396a <Timer1_init+0x6>
    396a:	cd b7       	in	r28, 0x3d	; 61
    396c:	de b7       	in	r29, 0x3e	; 62
    396e:	9a 83       	std	Y+2, r25	; 0x02
    3970:	89 83       	std	Y+1, r24	; 0x01

	TCNT1 = Config_Ptr -> initial_value;
    3972:	ac e4       	ldi	r26, 0x4C	; 76
    3974:	b0 e0       	ldi	r27, 0x00	; 0
    3976:	e9 81       	ldd	r30, Y+1	; 0x01
    3978:	fa 81       	ldd	r31, Y+2	; 0x02
    397a:	80 81       	ld	r24, Z
    397c:	91 81       	ldd	r25, Z+1	; 0x01
    397e:	11 96       	adiw	r26, 0x01	; 1
    3980:	9c 93       	st	X, r25
    3982:	8e 93       	st	-X, r24

	if((Config_Ptr -> mode) == NORMAL){
    3984:	e9 81       	ldd	r30, Y+1	; 0x01
    3986:	fa 81       	ldd	r31, Y+2	; 0x02
    3988:	85 81       	ldd	r24, Z+5	; 0x05
    398a:	88 23       	and	r24, r24
    398c:	d9 f4       	brne	.+54     	; 0x39c4 <Timer1_init+0x60>
		TCCR1A |= (1<<FOC1A) |(1<<FOC1B);
    398e:	af e4       	ldi	r26, 0x4F	; 79
    3990:	b0 e0       	ldi	r27, 0x00	; 0
    3992:	ef e4       	ldi	r30, 0x4F	; 79
    3994:	f0 e0       	ldi	r31, 0x00	; 0
    3996:	80 81       	ld	r24, Z
    3998:	8c 60       	ori	r24, 0x0C	; 12
    399a:	8c 93       	st	X, r24
		TCCR1B = (TCCR1B & 0xF8) | ((Config_Ptr -> prescaler));
    399c:	ae e4       	ldi	r26, 0x4E	; 78
    399e:	b0 e0       	ldi	r27, 0x00	; 0
    39a0:	ee e4       	ldi	r30, 0x4E	; 78
    39a2:	f0 e0       	ldi	r31, 0x00	; 0
    39a4:	80 81       	ld	r24, Z
    39a6:	98 2f       	mov	r25, r24
    39a8:	98 7f       	andi	r25, 0xF8	; 248
    39aa:	e9 81       	ldd	r30, Y+1	; 0x01
    39ac:	fa 81       	ldd	r31, Y+2	; 0x02
    39ae:	84 81       	ldd	r24, Z+4	; 0x04
    39b0:	89 2b       	or	r24, r25
    39b2:	8c 93       	st	X, r24
		TIMSK |= (1<<TOIE1);
    39b4:	a9 e5       	ldi	r26, 0x59	; 89
    39b6:	b0 e0       	ldi	r27, 0x00	; 0
    39b8:	e9 e5       	ldi	r30, 0x59	; 89
    39ba:	f0 e0       	ldi	r31, 0x00	; 0
    39bc:	80 81       	ld	r24, Z
    39be:	84 60       	ori	r24, 0x04	; 4
    39c0:	8c 93       	st	X, r24
    39c2:	3a c0       	rjmp	.+116    	; 0x3a38 <Timer1_init+0xd4>
	}
	else if((Config_Ptr -> mode) == CTC){
    39c4:	e9 81       	ldd	r30, Y+1	; 0x01
    39c6:	fa 81       	ldd	r31, Y+2	; 0x02
    39c8:	85 81       	ldd	r24, Z+5	; 0x05
    39ca:	84 30       	cpi	r24, 0x04	; 4
    39cc:	a9 f5       	brne	.+106    	; 0x3a38 <Timer1_init+0xd4>
		TCCR1A |= (1<<FOC1A) |(1<<FOC1B);
    39ce:	af e4       	ldi	r26, 0x4F	; 79
    39d0:	b0 e0       	ldi	r27, 0x00	; 0
    39d2:	ef e4       	ldi	r30, 0x4F	; 79
    39d4:	f0 e0       	ldi	r31, 0x00	; 0
    39d6:	80 81       	ld	r24, Z
    39d8:	8c 60       	ori	r24, 0x0C	; 12
    39da:	8c 93       	st	X, r24
		TCCR1B = (TCCR1B & 0xE7) | (((Config_Ptr -> mode)&0xFC)<<1);
    39dc:	ae e4       	ldi	r26, 0x4E	; 78
    39de:	b0 e0       	ldi	r27, 0x00	; 0
    39e0:	ee e4       	ldi	r30, 0x4E	; 78
    39e2:	f0 e0       	ldi	r31, 0x00	; 0
    39e4:	80 81       	ld	r24, Z
    39e6:	28 2f       	mov	r18, r24
    39e8:	27 7e       	andi	r18, 0xE7	; 231
    39ea:	e9 81       	ldd	r30, Y+1	; 0x01
    39ec:	fa 81       	ldd	r31, Y+2	; 0x02
    39ee:	85 81       	ldd	r24, Z+5	; 0x05
    39f0:	88 2f       	mov	r24, r24
    39f2:	90 e0       	ldi	r25, 0x00	; 0
    39f4:	8c 7f       	andi	r24, 0xFC	; 252
    39f6:	90 70       	andi	r25, 0x00	; 0
    39f8:	88 0f       	add	r24, r24
    39fa:	99 1f       	adc	r25, r25
    39fc:	82 2b       	or	r24, r18
    39fe:	8c 93       	st	X, r24
		TCCR1B = (TCCR1B & 0xF8) | ((Config_Ptr -> prescaler));
    3a00:	ae e4       	ldi	r26, 0x4E	; 78
    3a02:	b0 e0       	ldi	r27, 0x00	; 0
    3a04:	ee e4       	ldi	r30, 0x4E	; 78
    3a06:	f0 e0       	ldi	r31, 0x00	; 0
    3a08:	80 81       	ld	r24, Z
    3a0a:	98 2f       	mov	r25, r24
    3a0c:	98 7f       	andi	r25, 0xF8	; 248
    3a0e:	e9 81       	ldd	r30, Y+1	; 0x01
    3a10:	fa 81       	ldd	r31, Y+2	; 0x02
    3a12:	84 81       	ldd	r24, Z+4	; 0x04
    3a14:	89 2b       	or	r24, r25
    3a16:	8c 93       	st	X, r24
		OCR1A = Config_Ptr -> compare_value;
    3a18:	aa e4       	ldi	r26, 0x4A	; 74
    3a1a:	b0 e0       	ldi	r27, 0x00	; 0
    3a1c:	e9 81       	ldd	r30, Y+1	; 0x01
    3a1e:	fa 81       	ldd	r31, Y+2	; 0x02
    3a20:	82 81       	ldd	r24, Z+2	; 0x02
    3a22:	93 81       	ldd	r25, Z+3	; 0x03
    3a24:	11 96       	adiw	r26, 0x01	; 1
    3a26:	9c 93       	st	X, r25
    3a28:	8e 93       	st	-X, r24
		TIMSK |= (1<<OCIE1A);
    3a2a:	a9 e5       	ldi	r26, 0x59	; 89
    3a2c:	b0 e0       	ldi	r27, 0x00	; 0
    3a2e:	e9 e5       	ldi	r30, 0x59	; 89
    3a30:	f0 e0       	ldi	r31, 0x00	; 0
    3a32:	80 81       	ld	r24, Z
    3a34:	80 61       	ori	r24, 0x10	; 16
    3a36:	8c 93       	st	X, r24
	}

}
    3a38:	0f 90       	pop	r0
    3a3a:	0f 90       	pop	r0
    3a3c:	cf 91       	pop	r28
    3a3e:	df 91       	pop	r29
    3a40:	08 95       	ret

00003a42 <Timer1_deInit>:

void Timer1_deInit(void){
    3a42:	df 93       	push	r29
    3a44:	cf 93       	push	r28
    3a46:	cd b7       	in	r28, 0x3d	; 61
    3a48:	de b7       	in	r29, 0x3e	; 62
	TCNT1=0;
    3a4a:	ec e4       	ldi	r30, 0x4C	; 76
    3a4c:	f0 e0       	ldi	r31, 0x00	; 0
    3a4e:	11 82       	std	Z+1, r1	; 0x01
    3a50:	10 82       	st	Z, r1
	OCR1A=0;
    3a52:	ea e4       	ldi	r30, 0x4A	; 74
    3a54:	f0 e0       	ldi	r31, 0x00	; 0
    3a56:	11 82       	std	Z+1, r1	; 0x01
    3a58:	10 82       	st	Z, r1
	TCCR1A=0;
    3a5a:	ef e4       	ldi	r30, 0x4F	; 79
    3a5c:	f0 e0       	ldi	r31, 0x00	; 0
    3a5e:	10 82       	st	Z, r1
	TCCR1B=0;
    3a60:	ee e4       	ldi	r30, 0x4E	; 78
    3a62:	f0 e0       	ldi	r31, 0x00	; 0
    3a64:	10 82       	st	Z, r1
	TIMSK &= ~(1<<TOIE1) & ~(1<<OCIE1A);
    3a66:	a9 e5       	ldi	r26, 0x59	; 89
    3a68:	b0 e0       	ldi	r27, 0x00	; 0
    3a6a:	e9 e5       	ldi	r30, 0x59	; 89
    3a6c:	f0 e0       	ldi	r31, 0x00	; 0
    3a6e:	80 81       	ld	r24, Z
    3a70:	8b 7e       	andi	r24, 0xEB	; 235
    3a72:	8c 93       	st	X, r24
}
    3a74:	cf 91       	pop	r28
    3a76:	df 91       	pop	r29
    3a78:	08 95       	ret

00003a7a <Timer1_setCallBack>:

void Timer1_setCallBack(void(*a_ptr)(void)){
    3a7a:	df 93       	push	r29
    3a7c:	cf 93       	push	r28
    3a7e:	00 d0       	rcall	.+0      	; 0x3a80 <Timer1_setCallBack+0x6>
    3a80:	cd b7       	in	r28, 0x3d	; 61
    3a82:	de b7       	in	r29, 0x3e	; 62
    3a84:	9a 83       	std	Y+2, r25	; 0x02
    3a86:	89 83       	std	Y+1, r24	; 0x01

	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    3a88:	89 81       	ldd	r24, Y+1	; 0x01
    3a8a:	9a 81       	ldd	r25, Y+2	; 0x02
    3a8c:	90 93 8c 01 	sts	0x018C, r25
    3a90:	80 93 8b 01 	sts	0x018B, r24

}
    3a94:	0f 90       	pop	r0
    3a96:	0f 90       	pop	r0
    3a98:	cf 91       	pop	r28
    3a9a:	df 91       	pop	r29
    3a9c:	08 95       	ret

00003a9e <TWI_init>:
#include "twi.h"
#include "common_macros.h"
#include <avr/io.h>

void TWI_init(const TWI_ConfigType * Config_Ptr)
{
    3a9e:	df 93       	push	r29
    3aa0:	cf 93       	push	r28
    3aa2:	00 d0       	rcall	.+0      	; 0x3aa4 <TWI_init+0x6>
    3aa4:	cd b7       	in	r28, 0x3d	; 61
    3aa6:	de b7       	in	r29, 0x3e	; 62
    3aa8:	9a 83       	std	Y+2, r25	; 0x02
    3aaa:	89 83       	std	Y+1, r24	; 0x01
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = (Config_Ptr ->bit_rate);
    3aac:	a0 e2       	ldi	r26, 0x20	; 32
    3aae:	b0 e0       	ldi	r27, 0x00	; 0
    3ab0:	e9 81       	ldd	r30, Y+1	; 0x01
    3ab2:	fa 81       	ldd	r31, Y+2	; 0x02
    3ab4:	81 81       	ldd	r24, Z+1	; 0x01
    3ab6:	8c 93       	st	X, r24
	TWSR = 0x00;
    3ab8:	e1 e2       	ldi	r30, 0x21	; 33
    3aba:	f0 e0       	ldi	r31, 0x00	; 0
    3abc:	10 82       	st	Z, r1
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = (Config_Ptr ->address); // my address = 0x01 :)
    3abe:	a2 e2       	ldi	r26, 0x22	; 34
    3ac0:	b0 e0       	ldi	r27, 0x00	; 0
    3ac2:	e9 81       	ldd	r30, Y+1	; 0x01
    3ac4:	fa 81       	ldd	r31, Y+2	; 0x02
    3ac6:	80 81       	ld	r24, Z
    3ac8:	8c 93       	st	X, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    3aca:	e6 e5       	ldi	r30, 0x56	; 86
    3acc:	f0 e0       	ldi	r31, 0x00	; 0
    3ace:	84 e0       	ldi	r24, 0x04	; 4
    3ad0:	80 83       	st	Z, r24
}
    3ad2:	0f 90       	pop	r0
    3ad4:	0f 90       	pop	r0
    3ad6:	cf 91       	pop	r28
    3ad8:	df 91       	pop	r29
    3ada:	08 95       	ret

00003adc <TWI_start>:

void TWI_start(void)
{
    3adc:	df 93       	push	r29
    3ade:	cf 93       	push	r28
    3ae0:	cd b7       	in	r28, 0x3d	; 61
    3ae2:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    3ae4:	e6 e5       	ldi	r30, 0x56	; 86
    3ae6:	f0 e0       	ldi	r31, 0x00	; 0
    3ae8:	84 ea       	ldi	r24, 0xA4	; 164
    3aea:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    3aec:	e6 e5       	ldi	r30, 0x56	; 86
    3aee:	f0 e0       	ldi	r31, 0x00	; 0
    3af0:	80 81       	ld	r24, Z
    3af2:	88 23       	and	r24, r24
    3af4:	dc f7       	brge	.-10     	; 0x3aec <TWI_start+0x10>
}
    3af6:	cf 91       	pop	r28
    3af8:	df 91       	pop	r29
    3afa:	08 95       	ret

00003afc <TWI_stop>:

void TWI_stop(void)
{
    3afc:	df 93       	push	r29
    3afe:	cf 93       	push	r28
    3b00:	cd b7       	in	r28, 0x3d	; 61
    3b02:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    3b04:	e6 e5       	ldi	r30, 0x56	; 86
    3b06:	f0 e0       	ldi	r31, 0x00	; 0
    3b08:	84 e9       	ldi	r24, 0x94	; 148
    3b0a:	80 83       	st	Z, r24
}
    3b0c:	cf 91       	pop	r28
    3b0e:	df 91       	pop	r29
    3b10:	08 95       	ret

00003b12 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    3b12:	df 93       	push	r29
    3b14:	cf 93       	push	r28
    3b16:	0f 92       	push	r0
    3b18:	cd b7       	in	r28, 0x3d	; 61
    3b1a:	de b7       	in	r29, 0x3e	; 62
    3b1c:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    3b1e:	e3 e2       	ldi	r30, 0x23	; 35
    3b20:	f0 e0       	ldi	r31, 0x00	; 0
    3b22:	89 81       	ldd	r24, Y+1	; 0x01
    3b24:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    3b26:	e6 e5       	ldi	r30, 0x56	; 86
    3b28:	f0 e0       	ldi	r31, 0x00	; 0
    3b2a:	84 e8       	ldi	r24, 0x84	; 132
    3b2c:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    3b2e:	e6 e5       	ldi	r30, 0x56	; 86
    3b30:	f0 e0       	ldi	r31, 0x00	; 0
    3b32:	80 81       	ld	r24, Z
    3b34:	88 23       	and	r24, r24
    3b36:	dc f7       	brge	.-10     	; 0x3b2e <TWI_writeByte+0x1c>
}
    3b38:	0f 90       	pop	r0
    3b3a:	cf 91       	pop	r28
    3b3c:	df 91       	pop	r29
    3b3e:	08 95       	ret

00003b40 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    3b40:	df 93       	push	r29
    3b42:	cf 93       	push	r28
    3b44:	cd b7       	in	r28, 0x3d	; 61
    3b46:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    3b48:	e6 e5       	ldi	r30, 0x56	; 86
    3b4a:	f0 e0       	ldi	r31, 0x00	; 0
    3b4c:	84 ec       	ldi	r24, 0xC4	; 196
    3b4e:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    3b50:	e6 e5       	ldi	r30, 0x56	; 86
    3b52:	f0 e0       	ldi	r31, 0x00	; 0
    3b54:	80 81       	ld	r24, Z
    3b56:	88 23       	and	r24, r24
    3b58:	dc f7       	brge	.-10     	; 0x3b50 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    3b5a:	e3 e2       	ldi	r30, 0x23	; 35
    3b5c:	f0 e0       	ldi	r31, 0x00	; 0
    3b5e:	80 81       	ld	r24, Z
}
    3b60:	cf 91       	pop	r28
    3b62:	df 91       	pop	r29
    3b64:	08 95       	ret

00003b66 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    3b66:	df 93       	push	r29
    3b68:	cf 93       	push	r28
    3b6a:	cd b7       	in	r28, 0x3d	; 61
    3b6c:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    3b6e:	e6 e5       	ldi	r30, 0x56	; 86
    3b70:	f0 e0       	ldi	r31, 0x00	; 0
    3b72:	84 e8       	ldi	r24, 0x84	; 132
    3b74:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    3b76:	e6 e5       	ldi	r30, 0x56	; 86
    3b78:	f0 e0       	ldi	r31, 0x00	; 0
    3b7a:	80 81       	ld	r24, Z
    3b7c:	88 23       	and	r24, r24
    3b7e:	dc f7       	brge	.-10     	; 0x3b76 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    3b80:	e3 e2       	ldi	r30, 0x23	; 35
    3b82:	f0 e0       	ldi	r31, 0x00	; 0
    3b84:	80 81       	ld	r24, Z
}
    3b86:	cf 91       	pop	r28
    3b88:	df 91       	pop	r29
    3b8a:	08 95       	ret

00003b8c <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    3b8c:	df 93       	push	r29
    3b8e:	cf 93       	push	r28
    3b90:	0f 92       	push	r0
    3b92:	cd b7       	in	r28, 0x3d	; 61
    3b94:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    3b96:	e1 e2       	ldi	r30, 0x21	; 33
    3b98:	f0 e0       	ldi	r31, 0x00	; 0
    3b9a:	80 81       	ld	r24, Z
    3b9c:	88 7f       	andi	r24, 0xF8	; 248
    3b9e:	89 83       	std	Y+1, r24	; 0x01
    return status;
    3ba0:	89 81       	ldd	r24, Y+1	; 0x01
}
    3ba2:	0f 90       	pop	r0
    3ba4:	cf 91       	pop	r28
    3ba6:	df 91       	pop	r29
    3ba8:	08 95       	ret

00003baa <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    3baa:	df 93       	push	r29
    3bac:	cf 93       	push	r28
    3bae:	00 d0       	rcall	.+0      	; 0x3bb0 <UART_init+0x6>
    3bb0:	00 d0       	rcall	.+0      	; 0x3bb2 <UART_init+0x8>
    3bb2:	cd b7       	in	r28, 0x3d	; 61
    3bb4:	de b7       	in	r29, 0x3e	; 62
    3bb6:	9c 83       	std	Y+4, r25	; 0x04
    3bb8:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    3bba:	1a 82       	std	Y+2, r1	; 0x02
    3bbc:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    3bbe:	eb e2       	ldi	r30, 0x2B	; 43
    3bc0:	f0 e0       	ldi	r31, 0x00	; 0
    3bc2:	82 e0       	ldi	r24, 0x02	; 2
    3bc4:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = DYNAMIC CONFIG
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    3bc6:	ea e2       	ldi	r30, 0x2A	; 42
    3bc8:	f0 e0       	ldi	r31, 0x00	; 0
    3bca:	88 e1       	ldi	r24, 0x18	; 24
    3bcc:	80 83       	st	Z, r24
	UCSRB = (UCSRB & 0xFE) | (((Config_Ptr -> bit_data)&0x04)<<UCSZ2);
    3bce:	aa e2       	ldi	r26, 0x2A	; 42
    3bd0:	b0 e0       	ldi	r27, 0x00	; 0
    3bd2:	ea e2       	ldi	r30, 0x2A	; 42
    3bd4:	f0 e0       	ldi	r31, 0x00	; 0
    3bd6:	80 81       	ld	r24, Z
    3bd8:	28 2f       	mov	r18, r24
    3bda:	2e 7f       	andi	r18, 0xFE	; 254
    3bdc:	eb 81       	ldd	r30, Y+3	; 0x03
    3bde:	fc 81       	ldd	r31, Y+4	; 0x04
    3be0:	81 81       	ldd	r24, Z+1	; 0x01
    3be2:	88 2f       	mov	r24, r24
    3be4:	90 e0       	ldi	r25, 0x00	; 0
    3be6:	84 70       	andi	r24, 0x04	; 4
    3be8:	90 70       	andi	r25, 0x00	; 0
    3bea:	88 0f       	add	r24, r24
    3bec:	99 1f       	adc	r25, r25
    3bee:	88 0f       	add	r24, r24
    3bf0:	99 1f       	adc	r25, r25
    3bf2:	82 2b       	or	r24, r18
    3bf4:	8c 93       	st	X, r24
	 MODE
	 PARITY
	 CHARACTER SIZE
	 STOP BIT
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL);
    3bf6:	e0 e4       	ldi	r30, 0x40	; 64
    3bf8:	f0 e0       	ldi	r31, 0x00	; 0
    3bfa:	80 e8       	ldi	r24, 0x80	; 128
    3bfc:	80 83       	st	Z, r24
	UCSRC = (UCSRC & 0xBF) | ((Config_Ptr -> mode)<<UMSEL);
    3bfe:	a0 e4       	ldi	r26, 0x40	; 64
    3c00:	b0 e0       	ldi	r27, 0x00	; 0
    3c02:	e0 e4       	ldi	r30, 0x40	; 64
    3c04:	f0 e0       	ldi	r31, 0x00	; 0
    3c06:	80 81       	ld	r24, Z
    3c08:	28 2f       	mov	r18, r24
    3c0a:	2f 7b       	andi	r18, 0xBF	; 191
    3c0c:	eb 81       	ldd	r30, Y+3	; 0x03
    3c0e:	fc 81       	ldd	r31, Y+4	; 0x04
    3c10:	80 81       	ld	r24, Z
    3c12:	88 2f       	mov	r24, r24
    3c14:	90 e0       	ldi	r25, 0x00	; 0
    3c16:	00 24       	eor	r0, r0
    3c18:	96 95       	lsr	r25
    3c1a:	87 95       	ror	r24
    3c1c:	07 94       	ror	r0
    3c1e:	96 95       	lsr	r25
    3c20:	87 95       	ror	r24
    3c22:	07 94       	ror	r0
    3c24:	98 2f       	mov	r25, r24
    3c26:	80 2d       	mov	r24, r0
    3c28:	82 2b       	or	r24, r18
    3c2a:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xCF) | ((Config_Ptr -> parity)<<UPM0);
    3c2c:	a0 e4       	ldi	r26, 0x40	; 64
    3c2e:	b0 e0       	ldi	r27, 0x00	; 0
    3c30:	e0 e4       	ldi	r30, 0x40	; 64
    3c32:	f0 e0       	ldi	r31, 0x00	; 0
    3c34:	80 81       	ld	r24, Z
    3c36:	28 2f       	mov	r18, r24
    3c38:	2f 7c       	andi	r18, 0xCF	; 207
    3c3a:	eb 81       	ldd	r30, Y+3	; 0x03
    3c3c:	fc 81       	ldd	r31, Y+4	; 0x04
    3c3e:	82 81       	ldd	r24, Z+2	; 0x02
    3c40:	88 2f       	mov	r24, r24
    3c42:	90 e0       	ldi	r25, 0x00	; 0
    3c44:	82 95       	swap	r24
    3c46:	92 95       	swap	r25
    3c48:	90 7f       	andi	r25, 0xF0	; 240
    3c4a:	98 27       	eor	r25, r24
    3c4c:	80 7f       	andi	r24, 0xF0	; 240
    3c4e:	98 27       	eor	r25, r24
    3c50:	82 2b       	or	r24, r18
    3c52:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF9) | ((((Config_Ptr -> bit_data))&0x03)<<UCSZ0);
    3c54:	a0 e4       	ldi	r26, 0x40	; 64
    3c56:	b0 e0       	ldi	r27, 0x00	; 0
    3c58:	e0 e4       	ldi	r30, 0x40	; 64
    3c5a:	f0 e0       	ldi	r31, 0x00	; 0
    3c5c:	80 81       	ld	r24, Z
    3c5e:	28 2f       	mov	r18, r24
    3c60:	29 7f       	andi	r18, 0xF9	; 249
    3c62:	eb 81       	ldd	r30, Y+3	; 0x03
    3c64:	fc 81       	ldd	r31, Y+4	; 0x04
    3c66:	81 81       	ldd	r24, Z+1	; 0x01
    3c68:	88 2f       	mov	r24, r24
    3c6a:	90 e0       	ldi	r25, 0x00	; 0
    3c6c:	83 70       	andi	r24, 0x03	; 3
    3c6e:	90 70       	andi	r25, 0x00	; 0
    3c70:	88 0f       	add	r24, r24
    3c72:	99 1f       	adc	r25, r25
    3c74:	82 2b       	or	r24, r18
    3c76:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF7) | ((Config_Ptr -> stop_bit)<<USBS);
    3c78:	a0 e4       	ldi	r26, 0x40	; 64
    3c7a:	b0 e0       	ldi	r27, 0x00	; 0
    3c7c:	e0 e4       	ldi	r30, 0x40	; 64
    3c7e:	f0 e0       	ldi	r31, 0x00	; 0
    3c80:	80 81       	ld	r24, Z
    3c82:	28 2f       	mov	r18, r24
    3c84:	27 7f       	andi	r18, 0xF7	; 247
    3c86:	eb 81       	ldd	r30, Y+3	; 0x03
    3c88:	fc 81       	ldd	r31, Y+4	; 0x04
    3c8a:	83 81       	ldd	r24, Z+3	; 0x03
    3c8c:	88 2f       	mov	r24, r24
    3c8e:	90 e0       	ldi	r25, 0x00	; 0
    3c90:	88 0f       	add	r24, r24
    3c92:	99 1f       	adc	r25, r25
    3c94:	88 0f       	add	r24, r24
    3c96:	99 1f       	adc	r25, r25
    3c98:	88 0f       	add	r24, r24
    3c9a:	99 1f       	adc	r25, r25
    3c9c:	82 2b       	or	r24, r18
    3c9e:	8c 93       	st	X, r24
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((Config_Ptr ->baud_rate) * 8UL))) - 1);
    3ca0:	eb 81       	ldd	r30, Y+3	; 0x03
    3ca2:	fc 81       	ldd	r31, Y+4	; 0x04
    3ca4:	84 81       	ldd	r24, Z+4	; 0x04
    3ca6:	95 81       	ldd	r25, Z+5	; 0x05
    3ca8:	a6 81       	ldd	r26, Z+6	; 0x06
    3caa:	b7 81       	ldd	r27, Z+7	; 0x07
    3cac:	88 0f       	add	r24, r24
    3cae:	99 1f       	adc	r25, r25
    3cb0:	aa 1f       	adc	r26, r26
    3cb2:	bb 1f       	adc	r27, r27
    3cb4:	88 0f       	add	r24, r24
    3cb6:	99 1f       	adc	r25, r25
    3cb8:	aa 1f       	adc	r26, r26
    3cba:	bb 1f       	adc	r27, r27
    3cbc:	88 0f       	add	r24, r24
    3cbe:	99 1f       	adc	r25, r25
    3cc0:	aa 1f       	adc	r26, r26
    3cc2:	bb 1f       	adc	r27, r27
    3cc4:	9c 01       	movw	r18, r24
    3cc6:	ad 01       	movw	r20, r26
    3cc8:	80 e0       	ldi	r24, 0x00	; 0
    3cca:	92 e1       	ldi	r25, 0x12	; 18
    3ccc:	aa e7       	ldi	r26, 0x7A	; 122
    3cce:	b0 e0       	ldi	r27, 0x00	; 0
    3cd0:	bc 01       	movw	r22, r24
    3cd2:	cd 01       	movw	r24, r26
    3cd4:	0e 94 15 1f 	call	0x3e2a	; 0x3e2a <__udivmodsi4>
    3cd8:	da 01       	movw	r26, r20
    3cda:	c9 01       	movw	r24, r18
    3cdc:	01 97       	sbiw	r24, 0x01	; 1
    3cde:	9a 83       	std	Y+2, r25	; 0x02
    3ce0:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    3ce2:	e0 e4       	ldi	r30, 0x40	; 64
    3ce4:	f0 e0       	ldi	r31, 0x00	; 0
    3ce6:	89 81       	ldd	r24, Y+1	; 0x01
    3ce8:	9a 81       	ldd	r25, Y+2	; 0x02
    3cea:	89 2f       	mov	r24, r25
    3cec:	99 27       	eor	r25, r25
    3cee:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    3cf0:	e9 e2       	ldi	r30, 0x29	; 41
    3cf2:	f0 e0       	ldi	r31, 0x00	; 0
    3cf4:	89 81       	ldd	r24, Y+1	; 0x01
    3cf6:	80 83       	st	Z, r24
}
    3cf8:	0f 90       	pop	r0
    3cfa:	0f 90       	pop	r0
    3cfc:	0f 90       	pop	r0
    3cfe:	0f 90       	pop	r0
    3d00:	cf 91       	pop	r28
    3d02:	df 91       	pop	r29
    3d04:	08 95       	ret

00003d06 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    3d06:	df 93       	push	r29
    3d08:	cf 93       	push	r28
    3d0a:	0f 92       	push	r0
    3d0c:	cd b7       	in	r28, 0x3d	; 61
    3d0e:	de b7       	in	r29, 0x3e	; 62
    3d10:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    3d12:	eb e2       	ldi	r30, 0x2B	; 43
    3d14:	f0 e0       	ldi	r31, 0x00	; 0
    3d16:	80 81       	ld	r24, Z
    3d18:	88 2f       	mov	r24, r24
    3d1a:	90 e0       	ldi	r25, 0x00	; 0
    3d1c:	80 72       	andi	r24, 0x20	; 32
    3d1e:	90 70       	andi	r25, 0x00	; 0
    3d20:	00 97       	sbiw	r24, 0x00	; 0
    3d22:	b9 f3       	breq	.-18     	; 0x3d12 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    3d24:	ec e2       	ldi	r30, 0x2C	; 44
    3d26:	f0 e0       	ldi	r31, 0x00	; 0
    3d28:	89 81       	ldd	r24, Y+1	; 0x01
    3d2a:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    3d2c:	0f 90       	pop	r0
    3d2e:	cf 91       	pop	r28
    3d30:	df 91       	pop	r29
    3d32:	08 95       	ret

00003d34 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    3d34:	df 93       	push	r29
    3d36:	cf 93       	push	r28
    3d38:	cd b7       	in	r28, 0x3d	; 61
    3d3a:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    3d3c:	eb e2       	ldi	r30, 0x2B	; 43
    3d3e:	f0 e0       	ldi	r31, 0x00	; 0
    3d40:	80 81       	ld	r24, Z
    3d42:	88 23       	and	r24, r24
    3d44:	dc f7       	brge	.-10     	; 0x3d3c <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    3d46:	ec e2       	ldi	r30, 0x2C	; 44
    3d48:	f0 e0       	ldi	r31, 0x00	; 0
    3d4a:	80 81       	ld	r24, Z
}
    3d4c:	cf 91       	pop	r28
    3d4e:	df 91       	pop	r29
    3d50:	08 95       	ret

00003d52 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    3d52:	df 93       	push	r29
    3d54:	cf 93       	push	r28
    3d56:	00 d0       	rcall	.+0      	; 0x3d58 <UART_sendString+0x6>
    3d58:	0f 92       	push	r0
    3d5a:	cd b7       	in	r28, 0x3d	; 61
    3d5c:	de b7       	in	r29, 0x3e	; 62
    3d5e:	9b 83       	std	Y+3, r25	; 0x03
    3d60:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3d62:	19 82       	std	Y+1, r1	; 0x01
    3d64:	0e c0       	rjmp	.+28     	; 0x3d82 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    3d66:	89 81       	ldd	r24, Y+1	; 0x01
    3d68:	28 2f       	mov	r18, r24
    3d6a:	30 e0       	ldi	r19, 0x00	; 0
    3d6c:	8a 81       	ldd	r24, Y+2	; 0x02
    3d6e:	9b 81       	ldd	r25, Y+3	; 0x03
    3d70:	fc 01       	movw	r30, r24
    3d72:	e2 0f       	add	r30, r18
    3d74:	f3 1f       	adc	r31, r19
    3d76:	80 81       	ld	r24, Z
    3d78:	0e 94 83 1e 	call	0x3d06	; 0x3d06 <UART_sendByte>
		i++;
    3d7c:	89 81       	ldd	r24, Y+1	; 0x01
    3d7e:	8f 5f       	subi	r24, 0xFF	; 255
    3d80:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    3d82:	89 81       	ldd	r24, Y+1	; 0x01
    3d84:	28 2f       	mov	r18, r24
    3d86:	30 e0       	ldi	r19, 0x00	; 0
    3d88:	8a 81       	ldd	r24, Y+2	; 0x02
    3d8a:	9b 81       	ldd	r25, Y+3	; 0x03
    3d8c:	fc 01       	movw	r30, r24
    3d8e:	e2 0f       	add	r30, r18
    3d90:	f3 1f       	adc	r31, r19
    3d92:	80 81       	ld	r24, Z
    3d94:	88 23       	and	r24, r24
    3d96:	39 f7       	brne	.-50     	; 0x3d66 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    3d98:	0f 90       	pop	r0
    3d9a:	0f 90       	pop	r0
    3d9c:	0f 90       	pop	r0
    3d9e:	cf 91       	pop	r28
    3da0:	df 91       	pop	r29
    3da2:	08 95       	ret

00003da4 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    3da4:	0f 93       	push	r16
    3da6:	1f 93       	push	r17
    3da8:	df 93       	push	r29
    3daa:	cf 93       	push	r28
    3dac:	00 d0       	rcall	.+0      	; 0x3dae <UART_receiveString+0xa>
    3dae:	0f 92       	push	r0
    3db0:	cd b7       	in	r28, 0x3d	; 61
    3db2:	de b7       	in	r29, 0x3e	; 62
    3db4:	9b 83       	std	Y+3, r25	; 0x03
    3db6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3db8:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    3dba:	89 81       	ldd	r24, Y+1	; 0x01
    3dbc:	28 2f       	mov	r18, r24
    3dbe:	30 e0       	ldi	r19, 0x00	; 0
    3dc0:	8a 81       	ldd	r24, Y+2	; 0x02
    3dc2:	9b 81       	ldd	r25, Y+3	; 0x03
    3dc4:	8c 01       	movw	r16, r24
    3dc6:	02 0f       	add	r16, r18
    3dc8:	13 1f       	adc	r17, r19
    3dca:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <UART_recieveByte>
    3dce:	f8 01       	movw	r30, r16
    3dd0:	80 83       	st	Z, r24
    3dd2:	0f c0       	rjmp	.+30     	; 0x3df2 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    3dd4:	89 81       	ldd	r24, Y+1	; 0x01
    3dd6:	8f 5f       	subi	r24, 0xFF	; 255
    3dd8:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    3dda:	89 81       	ldd	r24, Y+1	; 0x01
    3ddc:	28 2f       	mov	r18, r24
    3dde:	30 e0       	ldi	r19, 0x00	; 0
    3de0:	8a 81       	ldd	r24, Y+2	; 0x02
    3de2:	9b 81       	ldd	r25, Y+3	; 0x03
    3de4:	8c 01       	movw	r16, r24
    3de6:	02 0f       	add	r16, r18
    3de8:	13 1f       	adc	r17, r19
    3dea:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <UART_recieveByte>
    3dee:	f8 01       	movw	r30, r16
    3df0:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    3df2:	89 81       	ldd	r24, Y+1	; 0x01
    3df4:	28 2f       	mov	r18, r24
    3df6:	30 e0       	ldi	r19, 0x00	; 0
    3df8:	8a 81       	ldd	r24, Y+2	; 0x02
    3dfa:	9b 81       	ldd	r25, Y+3	; 0x03
    3dfc:	fc 01       	movw	r30, r24
    3dfe:	e2 0f       	add	r30, r18
    3e00:	f3 1f       	adc	r31, r19
    3e02:	80 81       	ld	r24, Z
    3e04:	83 32       	cpi	r24, 0x23	; 35
    3e06:	31 f7       	brne	.-52     	; 0x3dd4 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    3e08:	89 81       	ldd	r24, Y+1	; 0x01
    3e0a:	28 2f       	mov	r18, r24
    3e0c:	30 e0       	ldi	r19, 0x00	; 0
    3e0e:	8a 81       	ldd	r24, Y+2	; 0x02
    3e10:	9b 81       	ldd	r25, Y+3	; 0x03
    3e12:	fc 01       	movw	r30, r24
    3e14:	e2 0f       	add	r30, r18
    3e16:	f3 1f       	adc	r31, r19
    3e18:	10 82       	st	Z, r1
}
    3e1a:	0f 90       	pop	r0
    3e1c:	0f 90       	pop	r0
    3e1e:	0f 90       	pop	r0
    3e20:	cf 91       	pop	r28
    3e22:	df 91       	pop	r29
    3e24:	1f 91       	pop	r17
    3e26:	0f 91       	pop	r16
    3e28:	08 95       	ret

00003e2a <__udivmodsi4>:
    3e2a:	a1 e2       	ldi	r26, 0x21	; 33
    3e2c:	1a 2e       	mov	r1, r26
    3e2e:	aa 1b       	sub	r26, r26
    3e30:	bb 1b       	sub	r27, r27
    3e32:	fd 01       	movw	r30, r26
    3e34:	0d c0       	rjmp	.+26     	; 0x3e50 <__udivmodsi4_ep>

00003e36 <__udivmodsi4_loop>:
    3e36:	aa 1f       	adc	r26, r26
    3e38:	bb 1f       	adc	r27, r27
    3e3a:	ee 1f       	adc	r30, r30
    3e3c:	ff 1f       	adc	r31, r31
    3e3e:	a2 17       	cp	r26, r18
    3e40:	b3 07       	cpc	r27, r19
    3e42:	e4 07       	cpc	r30, r20
    3e44:	f5 07       	cpc	r31, r21
    3e46:	20 f0       	brcs	.+8      	; 0x3e50 <__udivmodsi4_ep>
    3e48:	a2 1b       	sub	r26, r18
    3e4a:	b3 0b       	sbc	r27, r19
    3e4c:	e4 0b       	sbc	r30, r20
    3e4e:	f5 0b       	sbc	r31, r21

00003e50 <__udivmodsi4_ep>:
    3e50:	66 1f       	adc	r22, r22
    3e52:	77 1f       	adc	r23, r23
    3e54:	88 1f       	adc	r24, r24
    3e56:	99 1f       	adc	r25, r25
    3e58:	1a 94       	dec	r1
    3e5a:	69 f7       	brne	.-38     	; 0x3e36 <__udivmodsi4_loop>
    3e5c:	60 95       	com	r22
    3e5e:	70 95       	com	r23
    3e60:	80 95       	com	r24
    3e62:	90 95       	com	r25
    3e64:	9b 01       	movw	r18, r22
    3e66:	ac 01       	movw	r20, r24
    3e68:	bd 01       	movw	r22, r26
    3e6a:	cf 01       	movw	r24, r30
    3e6c:	08 95       	ret

00003e6e <__prologue_saves__>:
    3e6e:	2f 92       	push	r2
    3e70:	3f 92       	push	r3
    3e72:	4f 92       	push	r4
    3e74:	5f 92       	push	r5
    3e76:	6f 92       	push	r6
    3e78:	7f 92       	push	r7
    3e7a:	8f 92       	push	r8
    3e7c:	9f 92       	push	r9
    3e7e:	af 92       	push	r10
    3e80:	bf 92       	push	r11
    3e82:	cf 92       	push	r12
    3e84:	df 92       	push	r13
    3e86:	ef 92       	push	r14
    3e88:	ff 92       	push	r15
    3e8a:	0f 93       	push	r16
    3e8c:	1f 93       	push	r17
    3e8e:	cf 93       	push	r28
    3e90:	df 93       	push	r29
    3e92:	cd b7       	in	r28, 0x3d	; 61
    3e94:	de b7       	in	r29, 0x3e	; 62
    3e96:	ca 1b       	sub	r28, r26
    3e98:	db 0b       	sbc	r29, r27
    3e9a:	0f b6       	in	r0, 0x3f	; 63
    3e9c:	f8 94       	cli
    3e9e:	de bf       	out	0x3e, r29	; 62
    3ea0:	0f be       	out	0x3f, r0	; 63
    3ea2:	cd bf       	out	0x3d, r28	; 61
    3ea4:	09 94       	ijmp

00003ea6 <__epilogue_restores__>:
    3ea6:	2a 88       	ldd	r2, Y+18	; 0x12
    3ea8:	39 88       	ldd	r3, Y+17	; 0x11
    3eaa:	48 88       	ldd	r4, Y+16	; 0x10
    3eac:	5f 84       	ldd	r5, Y+15	; 0x0f
    3eae:	6e 84       	ldd	r6, Y+14	; 0x0e
    3eb0:	7d 84       	ldd	r7, Y+13	; 0x0d
    3eb2:	8c 84       	ldd	r8, Y+12	; 0x0c
    3eb4:	9b 84       	ldd	r9, Y+11	; 0x0b
    3eb6:	aa 84       	ldd	r10, Y+10	; 0x0a
    3eb8:	b9 84       	ldd	r11, Y+9	; 0x09
    3eba:	c8 84       	ldd	r12, Y+8	; 0x08
    3ebc:	df 80       	ldd	r13, Y+7	; 0x07
    3ebe:	ee 80       	ldd	r14, Y+6	; 0x06
    3ec0:	fd 80       	ldd	r15, Y+5	; 0x05
    3ec2:	0c 81       	ldd	r16, Y+4	; 0x04
    3ec4:	1b 81       	ldd	r17, Y+3	; 0x03
    3ec6:	aa 81       	ldd	r26, Y+2	; 0x02
    3ec8:	b9 81       	ldd	r27, Y+1	; 0x01
    3eca:	ce 0f       	add	r28, r30
    3ecc:	d1 1d       	adc	r29, r1
    3ece:	0f b6       	in	r0, 0x3f	; 63
    3ed0:	f8 94       	cli
    3ed2:	de bf       	out	0x3e, r29	; 62
    3ed4:	0f be       	out	0x3f, r0	; 63
    3ed6:	cd bf       	out	0x3d, r28	; 61
    3ed8:	ed 01       	movw	r28, r26
    3eda:	08 95       	ret

00003edc <itoa>:
    3edc:	fb 01       	movw	r30, r22
    3ede:	9f 01       	movw	r18, r30
    3ee0:	e8 94       	clt
    3ee2:	42 30       	cpi	r20, 0x02	; 2
    3ee4:	c4 f0       	brlt	.+48     	; 0x3f16 <itoa+0x3a>
    3ee6:	45 32       	cpi	r20, 0x25	; 37
    3ee8:	b4 f4       	brge	.+44     	; 0x3f16 <itoa+0x3a>
    3eea:	4a 30       	cpi	r20, 0x0A	; 10
    3eec:	29 f4       	brne	.+10     	; 0x3ef8 <itoa+0x1c>
    3eee:	97 fb       	bst	r25, 7
    3ef0:	1e f4       	brtc	.+6      	; 0x3ef8 <itoa+0x1c>
    3ef2:	90 95       	com	r25
    3ef4:	81 95       	neg	r24
    3ef6:	9f 4f       	sbci	r25, 0xFF	; 255
    3ef8:	64 2f       	mov	r22, r20
    3efa:	77 27       	eor	r23, r23
    3efc:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <__udivmodhi4>
    3f00:	80 5d       	subi	r24, 0xD0	; 208
    3f02:	8a 33       	cpi	r24, 0x3A	; 58
    3f04:	0c f0       	brlt	.+2      	; 0x3f08 <itoa+0x2c>
    3f06:	89 5d       	subi	r24, 0xD9	; 217
    3f08:	81 93       	st	Z+, r24
    3f0a:	cb 01       	movw	r24, r22
    3f0c:	00 97       	sbiw	r24, 0x00	; 0
    3f0e:	a1 f7       	brne	.-24     	; 0x3ef8 <itoa+0x1c>
    3f10:	16 f4       	brtc	.+4      	; 0x3f16 <itoa+0x3a>
    3f12:	5d e2       	ldi	r21, 0x2D	; 45
    3f14:	51 93       	st	Z+, r21
    3f16:	10 82       	st	Z, r1
    3f18:	c9 01       	movw	r24, r18
    3f1a:	0c 94 8f 1f 	jmp	0x3f1e	; 0x3f1e <strrev>

00003f1e <strrev>:
    3f1e:	dc 01       	movw	r26, r24
    3f20:	fc 01       	movw	r30, r24
    3f22:	67 2f       	mov	r22, r23
    3f24:	71 91       	ld	r23, Z+
    3f26:	77 23       	and	r23, r23
    3f28:	e1 f7       	brne	.-8      	; 0x3f22 <strrev+0x4>
    3f2a:	32 97       	sbiw	r30, 0x02	; 2
    3f2c:	04 c0       	rjmp	.+8      	; 0x3f36 <strrev+0x18>
    3f2e:	7c 91       	ld	r23, X
    3f30:	6d 93       	st	X+, r22
    3f32:	70 83       	st	Z, r23
    3f34:	62 91       	ld	r22, -Z
    3f36:	ae 17       	cp	r26, r30
    3f38:	bf 07       	cpc	r27, r31
    3f3a:	c8 f3       	brcs	.-14     	; 0x3f2e <strrev+0x10>
    3f3c:	08 95       	ret

00003f3e <__udivmodhi4>:
    3f3e:	aa 1b       	sub	r26, r26
    3f40:	bb 1b       	sub	r27, r27
    3f42:	51 e1       	ldi	r21, 0x11	; 17
    3f44:	07 c0       	rjmp	.+14     	; 0x3f54 <__udivmodhi4_ep>

00003f46 <__udivmodhi4_loop>:
    3f46:	aa 1f       	adc	r26, r26
    3f48:	bb 1f       	adc	r27, r27
    3f4a:	a6 17       	cp	r26, r22
    3f4c:	b7 07       	cpc	r27, r23
    3f4e:	10 f0       	brcs	.+4      	; 0x3f54 <__udivmodhi4_ep>
    3f50:	a6 1b       	sub	r26, r22
    3f52:	b7 0b       	sbc	r27, r23

00003f54 <__udivmodhi4_ep>:
    3f54:	88 1f       	adc	r24, r24
    3f56:	99 1f       	adc	r25, r25
    3f58:	5a 95       	dec	r21
    3f5a:	a9 f7       	brne	.-22     	; 0x3f46 <__udivmodhi4_loop>
    3f5c:	80 95       	com	r24
    3f5e:	90 95       	com	r25
    3f60:	bc 01       	movw	r22, r24
    3f62:	cd 01       	movw	r24, r26
    3f64:	08 95       	ret

00003f66 <_exit>:
    3f66:	f8 94       	cli

00003f68 <__stop_program>:
    3f68:	ff cf       	rjmp	.-2      	; 0x3f68 <__stop_program>
