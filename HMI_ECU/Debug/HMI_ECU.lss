
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003950  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a0  00800060  00003950  000039e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  00800100  00800100  00003a84  2**0
                  ALLOC
  3 .stab         00002ff4  00000000  00000000  00003a84  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001175  00000000  00000000  00006a78  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007bed  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007d2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007e9d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009ae6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a9d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b780  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b8e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000bb6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c33b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 c5 19 	jmp	0x338a	; 0x338a <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 f8 19 	jmp	0x33f0	; 0x33f0 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e5       	ldi	r30, 0x50	; 80
      68:	f9 e3       	ldi	r31, 0x39	; 57
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 30       	cpi	r26, 0x00	; 0
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e0       	ldi	r26, 0x00	; 0
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 30       	cpi	r26, 0x0B	; 11
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b0 08 	call	0x1160	; 0x1160 <main>
      8a:	0c 94 a6 1c 	jmp	0x394c	; 0x394c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 2a 1c 	jmp	0x3854	; 0x3854 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a9 ee       	ldi	r26, 0xE9	; 233
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 46 1c 	jmp	0x388c	; 0x388c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 36 1c 	jmp	0x386c	; 0x386c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 52 1c 	jmp	0x38a4	; 0x38a4 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 36 1c 	jmp	0x386c	; 0x386c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 52 1c 	jmp	0x38a4	; 0x38a4 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 2a 1c 	jmp	0x3854	; 0x3854 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	89 ee       	ldi	r24, 0xE9	; 233
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 46 1c 	jmp	0x388c	; 0x388c <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 36 1c 	jmp	0x386c	; 0x386c <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 52 1c 	jmp	0x38a4	; 0x38a4 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 36 1c 	jmp	0x386c	; 0x386c <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 52 1c 	jmp	0x38a4	; 0x38a4 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 36 1c 	jmp	0x386c	; 0x386c <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 52 1c 	jmp	0x38a4	; 0x38a4 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 3a 1c 	jmp	0x3874	; 0x3874 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 56 1c 	jmp	0x38ac	; 0x38ac <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <sendFirstPass>:
//Global Variables
uint8 i,bool,key,g_passFailed,g_breach,g_count=0,g_breachCount=0,g_tick=0,g_seconds;

/*Function used to send the first pass from the user
and displaying '*' after every button the user pressed*/
void sendFirstPass(void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	6c 97       	sbiw	r28, 0x1c	; 28
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
     b5a:	0e 94 bb 19 	call	0x3376	; 0x3376 <LCD_clearScreen>
	LCD_displayString("plz enter pass:");
     b5e:	80 e6       	ldi	r24, 0x60	; 96
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	0e 94 14 19 	call	0x3228	; 0x3228 <LCD_displayString>
	LCD_moveCursor(1,0);
     b66:	81 e0       	ldi	r24, 0x01	; 1
     b68:	60 e0       	ldi	r22, 0x00	; 0
     b6a:	0e 94 3d 19 	call	0x327a	; 0x327a <LCD_moveCursor>

	for(i=0;i<PASS_SIZE;i++){
     b6e:	10 92 07 01 	sts	0x0107, r1
     b72:	8c c0       	rjmp	.+280    	; 0xc8c <sendFirstPass+0x146>


		key=KEYPAD_getPressedKey();
     b74:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <KEYPAD_getPressedKey>
     b78:	80 93 09 01 	sts	0x0109, r24
		//Checking if the pressed key is a number from 0 to 9
		if((key<0) || (key>9)){
     b7c:	80 91 09 01 	lds	r24, 0x0109
     b80:	8a 30       	cpi	r24, 0x0A	; 10
     b82:	30 f0       	brcs	.+12     	; 0xb90 <sendFirstPass+0x4a>
			i--;
     b84:	80 91 07 01 	lds	r24, 0x0107
     b88:	81 50       	subi	r24, 0x01	; 1
     b8a:	80 93 07 01 	sts	0x0107, r24
     b8e:	79 c0       	rjmp	.+242    	; 0xc82 <sendFirstPass+0x13c>
			continue;
		}
		/*
		 * sending first pass byte by byte
		 */
		LCD_displayCharacter('*');
     b90:	8a e2       	ldi	r24, 0x2A	; 42
     b92:	0e 94 99 14 	call	0x2932	; 0x2932 <LCD_displayCharacter>
		UART_sendByte(key);
     b96:	80 91 09 01 	lds	r24, 0x0109
     b9a:	0e 94 76 1b 	call	0x36ec	; 0x36ec <UART_sendByte>
     b9e:	80 e0       	ldi	r24, 0x00	; 0
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	aa ef       	ldi	r26, 0xFA	; 250
     ba4:	b3 e4       	ldi	r27, 0x43	; 67
     ba6:	89 8f       	std	Y+25, r24	; 0x19
     ba8:	9a 8f       	std	Y+26, r25	; 0x1a
     baa:	ab 8f       	std	Y+27, r26	; 0x1b
     bac:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bae:	69 8d       	ldd	r22, Y+25	; 0x19
     bb0:	7a 8d       	ldd	r23, Y+26	; 0x1a
     bb2:	8b 8d       	ldd	r24, Y+27	; 0x1b
     bb4:	9c 8d       	ldd	r25, Y+28	; 0x1c
     bb6:	20 e0       	ldi	r18, 0x00	; 0
     bb8:	30 e0       	ldi	r19, 0x00	; 0
     bba:	4a ef       	ldi	r20, 0xFA	; 250
     bbc:	54 e4       	ldi	r21, 0x44	; 68
     bbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bc2:	dc 01       	movw	r26, r24
     bc4:	cb 01       	movw	r24, r22
     bc6:	8d 8b       	std	Y+21, r24	; 0x15
     bc8:	9e 8b       	std	Y+22, r25	; 0x16
     bca:	af 8b       	std	Y+23, r26	; 0x17
     bcc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     bce:	6d 89       	ldd	r22, Y+21	; 0x15
     bd0:	7e 89       	ldd	r23, Y+22	; 0x16
     bd2:	8f 89       	ldd	r24, Y+23	; 0x17
     bd4:	98 8d       	ldd	r25, Y+24	; 0x18
     bd6:	20 e0       	ldi	r18, 0x00	; 0
     bd8:	30 e0       	ldi	r19, 0x00	; 0
     bda:	40 e8       	ldi	r20, 0x80	; 128
     bdc:	5f e3       	ldi	r21, 0x3F	; 63
     bde:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     be2:	88 23       	and	r24, r24
     be4:	2c f4       	brge	.+10     	; 0xbf0 <sendFirstPass+0xaa>
		__ticks = 1;
     be6:	81 e0       	ldi	r24, 0x01	; 1
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	9c 8b       	std	Y+20, r25	; 0x14
     bec:	8b 8b       	std	Y+19, r24	; 0x13
     bee:	3f c0       	rjmp	.+126    	; 0xc6e <sendFirstPass+0x128>
	else if (__tmp > 65535)
     bf0:	6d 89       	ldd	r22, Y+21	; 0x15
     bf2:	7e 89       	ldd	r23, Y+22	; 0x16
     bf4:	8f 89       	ldd	r24, Y+23	; 0x17
     bf6:	98 8d       	ldd	r25, Y+24	; 0x18
     bf8:	20 e0       	ldi	r18, 0x00	; 0
     bfa:	3f ef       	ldi	r19, 0xFF	; 255
     bfc:	4f e7       	ldi	r20, 0x7F	; 127
     bfe:	57 e4       	ldi	r21, 0x47	; 71
     c00:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c04:	18 16       	cp	r1, r24
     c06:	4c f5       	brge	.+82     	; 0xc5a <sendFirstPass+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c08:	69 8d       	ldd	r22, Y+25	; 0x19
     c0a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c0c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c0e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c10:	20 e0       	ldi	r18, 0x00	; 0
     c12:	30 e0       	ldi	r19, 0x00	; 0
     c14:	40 e2       	ldi	r20, 0x20	; 32
     c16:	51 e4       	ldi	r21, 0x41	; 65
     c18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c1c:	dc 01       	movw	r26, r24
     c1e:	cb 01       	movw	r24, r22
     c20:	bc 01       	movw	r22, r24
     c22:	cd 01       	movw	r24, r26
     c24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c28:	dc 01       	movw	r26, r24
     c2a:	cb 01       	movw	r24, r22
     c2c:	9c 8b       	std	Y+20, r25	; 0x14
     c2e:	8b 8b       	std	Y+19, r24	; 0x13
     c30:	0f c0       	rjmp	.+30     	; 0xc50 <sendFirstPass+0x10a>
     c32:	88 ec       	ldi	r24, 0xC8	; 200
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	9a 8b       	std	Y+18, r25	; 0x12
     c38:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c3a:	89 89       	ldd	r24, Y+17	; 0x11
     c3c:	9a 89       	ldd	r25, Y+18	; 0x12
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	f1 f7       	brne	.-4      	; 0xc3e <sendFirstPass+0xf8>
     c42:	9a 8b       	std	Y+18, r25	; 0x12
     c44:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c46:	8b 89       	ldd	r24, Y+19	; 0x13
     c48:	9c 89       	ldd	r25, Y+20	; 0x14
     c4a:	01 97       	sbiw	r24, 0x01	; 1
     c4c:	9c 8b       	std	Y+20, r25	; 0x14
     c4e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c50:	8b 89       	ldd	r24, Y+19	; 0x13
     c52:	9c 89       	ldd	r25, Y+20	; 0x14
     c54:	00 97       	sbiw	r24, 0x00	; 0
     c56:	69 f7       	brne	.-38     	; 0xc32 <sendFirstPass+0xec>
     c58:	14 c0       	rjmp	.+40     	; 0xc82 <sendFirstPass+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c5a:	6d 89       	ldd	r22, Y+21	; 0x15
     c5c:	7e 89       	ldd	r23, Y+22	; 0x16
     c5e:	8f 89       	ldd	r24, Y+23	; 0x17
     c60:	98 8d       	ldd	r25, Y+24	; 0x18
     c62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c66:	dc 01       	movw	r26, r24
     c68:	cb 01       	movw	r24, r22
     c6a:	9c 8b       	std	Y+20, r25	; 0x14
     c6c:	8b 8b       	std	Y+19, r24	; 0x13
     c6e:	8b 89       	ldd	r24, Y+19	; 0x13
     c70:	9c 89       	ldd	r25, Y+20	; 0x14
     c72:	98 8b       	std	Y+16, r25	; 0x10
     c74:	8f 87       	std	Y+15, r24	; 0x0f
     c76:	8f 85       	ldd	r24, Y+15	; 0x0f
     c78:	98 89       	ldd	r25, Y+16	; 0x10
     c7a:	01 97       	sbiw	r24, 0x01	; 1
     c7c:	f1 f7       	brne	.-4      	; 0xc7a <sendFirstPass+0x134>
     c7e:	98 8b       	std	Y+16, r25	; 0x10
     c80:	8f 87       	std	Y+15, r24	; 0x0f
void sendFirstPass(void){
	LCD_clearScreen();
	LCD_displayString("plz enter pass:");
	LCD_moveCursor(1,0);

	for(i=0;i<PASS_SIZE;i++){
     c82:	80 91 07 01 	lds	r24, 0x0107
     c86:	8f 5f       	subi	r24, 0xFF	; 255
     c88:	80 93 07 01 	sts	0x0107, r24
     c8c:	80 91 07 01 	lds	r24, 0x0107
     c90:	85 30       	cpi	r24, 0x05	; 5
     c92:	08 f4       	brcc	.+2      	; 0xc96 <sendFirstPass+0x150>
     c94:	6f cf       	rjmp	.-290    	; 0xb74 <sendFirstPass+0x2e>
     c96:	04 c0       	rjmp	.+8      	; 0xca0 <sendFirstPass+0x15a>

	/*
	 * making sure the user pressed = button before proceeding in the code
	 */
	while(key != '='){
		key=KEYPAD_getPressedKey();
     c98:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <KEYPAD_getPressedKey>
     c9c:	80 93 09 01 	sts	0x0109, r24
	}

	/*
	 * making sure the user pressed = button before proceeding in the code
	 */
	while(key != '='){
     ca0:	80 91 09 01 	lds	r24, 0x0109
     ca4:	8d 33       	cpi	r24, 0x3D	; 61
     ca6:	c1 f7       	brne	.-16     	; 0xc98 <sendFirstPass+0x152>
		key=KEYPAD_getPressedKey();
	}
	UART_sendByte(key);//sending '='
     ca8:	80 91 09 01 	lds	r24, 0x0109
     cac:	0e 94 76 1b 	call	0x36ec	; 0x36ec <UART_sendByte>
     cb0:	80 e0       	ldi	r24, 0x00	; 0
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	aa ef       	ldi	r26, 0xFA	; 250
     cb6:	b3 e4       	ldi	r27, 0x43	; 67
     cb8:	8b 87       	std	Y+11, r24	; 0x0b
     cba:	9c 87       	std	Y+12, r25	; 0x0c
     cbc:	ad 87       	std	Y+13, r26	; 0x0d
     cbe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cc0:	6b 85       	ldd	r22, Y+11	; 0x0b
     cc2:	7c 85       	ldd	r23, Y+12	; 0x0c
     cc4:	8d 85       	ldd	r24, Y+13	; 0x0d
     cc6:	9e 85       	ldd	r25, Y+14	; 0x0e
     cc8:	20 e0       	ldi	r18, 0x00	; 0
     cca:	30 e0       	ldi	r19, 0x00	; 0
     ccc:	4a ef       	ldi	r20, 0xFA	; 250
     cce:	54 e4       	ldi	r21, 0x44	; 68
     cd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cd4:	dc 01       	movw	r26, r24
     cd6:	cb 01       	movw	r24, r22
     cd8:	8f 83       	std	Y+7, r24	; 0x07
     cda:	98 87       	std	Y+8, r25	; 0x08
     cdc:	a9 87       	std	Y+9, r26	; 0x09
     cde:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ce0:	6f 81       	ldd	r22, Y+7	; 0x07
     ce2:	78 85       	ldd	r23, Y+8	; 0x08
     ce4:	89 85       	ldd	r24, Y+9	; 0x09
     ce6:	9a 85       	ldd	r25, Y+10	; 0x0a
     ce8:	20 e0       	ldi	r18, 0x00	; 0
     cea:	30 e0       	ldi	r19, 0x00	; 0
     cec:	40 e8       	ldi	r20, 0x80	; 128
     cee:	5f e3       	ldi	r21, 0x3F	; 63
     cf0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     cf4:	88 23       	and	r24, r24
     cf6:	2c f4       	brge	.+10     	; 0xd02 <sendFirstPass+0x1bc>
		__ticks = 1;
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	9e 83       	std	Y+6, r25	; 0x06
     cfe:	8d 83       	std	Y+5, r24	; 0x05
     d00:	3f c0       	rjmp	.+126    	; 0xd80 <sendFirstPass+0x23a>
	else if (__tmp > 65535)
     d02:	6f 81       	ldd	r22, Y+7	; 0x07
     d04:	78 85       	ldd	r23, Y+8	; 0x08
     d06:	89 85       	ldd	r24, Y+9	; 0x09
     d08:	9a 85       	ldd	r25, Y+10	; 0x0a
     d0a:	20 e0       	ldi	r18, 0x00	; 0
     d0c:	3f ef       	ldi	r19, 0xFF	; 255
     d0e:	4f e7       	ldi	r20, 0x7F	; 127
     d10:	57 e4       	ldi	r21, 0x47	; 71
     d12:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d16:	18 16       	cp	r1, r24
     d18:	4c f5       	brge	.+82     	; 0xd6c <sendFirstPass+0x226>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d1a:	6b 85       	ldd	r22, Y+11	; 0x0b
     d1c:	7c 85       	ldd	r23, Y+12	; 0x0c
     d1e:	8d 85       	ldd	r24, Y+13	; 0x0d
     d20:	9e 85       	ldd	r25, Y+14	; 0x0e
     d22:	20 e0       	ldi	r18, 0x00	; 0
     d24:	30 e0       	ldi	r19, 0x00	; 0
     d26:	40 e2       	ldi	r20, 0x20	; 32
     d28:	51 e4       	ldi	r21, 0x41	; 65
     d2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d2e:	dc 01       	movw	r26, r24
     d30:	cb 01       	movw	r24, r22
     d32:	bc 01       	movw	r22, r24
     d34:	cd 01       	movw	r24, r26
     d36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d3a:	dc 01       	movw	r26, r24
     d3c:	cb 01       	movw	r24, r22
     d3e:	9e 83       	std	Y+6, r25	; 0x06
     d40:	8d 83       	std	Y+5, r24	; 0x05
     d42:	0f c0       	rjmp	.+30     	; 0xd62 <sendFirstPass+0x21c>
     d44:	88 ec       	ldi	r24, 0xC8	; 200
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	9c 83       	std	Y+4, r25	; 0x04
     d4a:	8b 83       	std	Y+3, r24	; 0x03
     d4c:	8b 81       	ldd	r24, Y+3	; 0x03
     d4e:	9c 81       	ldd	r25, Y+4	; 0x04
     d50:	01 97       	sbiw	r24, 0x01	; 1
     d52:	f1 f7       	brne	.-4      	; 0xd50 <sendFirstPass+0x20a>
     d54:	9c 83       	std	Y+4, r25	; 0x04
     d56:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d58:	8d 81       	ldd	r24, Y+5	; 0x05
     d5a:	9e 81       	ldd	r25, Y+6	; 0x06
     d5c:	01 97       	sbiw	r24, 0x01	; 1
     d5e:	9e 83       	std	Y+6, r25	; 0x06
     d60:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d62:	8d 81       	ldd	r24, Y+5	; 0x05
     d64:	9e 81       	ldd	r25, Y+6	; 0x06
     d66:	00 97       	sbiw	r24, 0x00	; 0
     d68:	69 f7       	brne	.-38     	; 0xd44 <sendFirstPass+0x1fe>
     d6a:	14 c0       	rjmp	.+40     	; 0xd94 <sendFirstPass+0x24e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d6c:	6f 81       	ldd	r22, Y+7	; 0x07
     d6e:	78 85       	ldd	r23, Y+8	; 0x08
     d70:	89 85       	ldd	r24, Y+9	; 0x09
     d72:	9a 85       	ldd	r25, Y+10	; 0x0a
     d74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d78:	dc 01       	movw	r26, r24
     d7a:	cb 01       	movw	r24, r22
     d7c:	9e 83       	std	Y+6, r25	; 0x06
     d7e:	8d 83       	std	Y+5, r24	; 0x05
     d80:	8d 81       	ldd	r24, Y+5	; 0x05
     d82:	9e 81       	ldd	r25, Y+6	; 0x06
     d84:	9a 83       	std	Y+2, r25	; 0x02
     d86:	89 83       	std	Y+1, r24	; 0x01
     d88:	89 81       	ldd	r24, Y+1	; 0x01
     d8a:	9a 81       	ldd	r25, Y+2	; 0x02
     d8c:	01 97       	sbiw	r24, 0x01	; 1
     d8e:	f1 f7       	brne	.-4      	; 0xd8c <sendFirstPass+0x246>
     d90:	9a 83       	std	Y+2, r25	; 0x02
     d92:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
}
     d94:	6c 96       	adiw	r28, 0x1c	; 28
     d96:	0f b6       	in	r0, 0x3f	; 63
     d98:	f8 94       	cli
     d9a:	de bf       	out	0x3e, r29	; 62
     d9c:	0f be       	out	0x3f, r0	; 63
     d9e:	cd bf       	out	0x3d, r28	; 61
     da0:	cf 91       	pop	r28
     da2:	df 91       	pop	r29
     da4:	08 95       	ret

00000da6 <sendSecondPass>:

/*Function used to send the second pass from the user
and displaying '*' after every button the user pressed*/
void sendSecondPass(void){
     da6:	df 93       	push	r29
     da8:	cf 93       	push	r28
     daa:	cd b7       	in	r28, 0x3d	; 61
     dac:	de b7       	in	r29, 0x3e	; 62
     dae:	6c 97       	sbiw	r28, 0x1c	; 28
     db0:	0f b6       	in	r0, 0x3f	; 63
     db2:	f8 94       	cli
     db4:	de bf       	out	0x3e, r29	; 62
     db6:	0f be       	out	0x3f, r0	; 63
     db8:	cd bf       	out	0x3d, r28	; 61

	LCD_clearScreen();
     dba:	0e 94 bb 19 	call	0x3376	; 0x3376 <LCD_clearScreen>
	LCD_displayString("plz re-enter the");
     dbe:	80 e7       	ldi	r24, 0x70	; 112
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	0e 94 14 19 	call	0x3228	; 0x3228 <LCD_displayString>
	LCD_moveCursor(1,0);
     dc6:	81 e0       	ldi	r24, 0x01	; 1
     dc8:	60 e0       	ldi	r22, 0x00	; 0
     dca:	0e 94 3d 19 	call	0x327a	; 0x327a <LCD_moveCursor>
	LCD_displayString("same pass: ");
     dce:	81 e8       	ldi	r24, 0x81	; 129
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	0e 94 14 19 	call	0x3228	; 0x3228 <LCD_displayString>


	for(i=0;i<PASS_SIZE;i++){
     dd6:	10 92 07 01 	sts	0x0107, r1
     dda:	8c c0       	rjmp	.+280    	; 0xef4 <sendSecondPass+0x14e>

		key=KEYPAD_getPressedKey();
     ddc:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <KEYPAD_getPressedKey>
     de0:	80 93 09 01 	sts	0x0109, r24
		//Checking if the pressed key is a number from 0 to 9
		if((key<0) || (key>9)){
     de4:	80 91 09 01 	lds	r24, 0x0109
     de8:	8a 30       	cpi	r24, 0x0A	; 10
     dea:	30 f0       	brcs	.+12     	; 0xdf8 <sendSecondPass+0x52>
			i--;
     dec:	80 91 07 01 	lds	r24, 0x0107
     df0:	81 50       	subi	r24, 0x01	; 1
     df2:	80 93 07 01 	sts	0x0107, r24
     df6:	79 c0       	rjmp	.+242    	; 0xeea <sendSecondPass+0x144>
			continue;
		}
		/*
		 * sending second pass byte by byte
		 */
		LCD_displayCharacter('*');
     df8:	8a e2       	ldi	r24, 0x2A	; 42
     dfa:	0e 94 99 14 	call	0x2932	; 0x2932 <LCD_displayCharacter>

		UART_sendByte(key);
     dfe:	80 91 09 01 	lds	r24, 0x0109
     e02:	0e 94 76 1b 	call	0x36ec	; 0x36ec <UART_sendByte>
     e06:	80 e0       	ldi	r24, 0x00	; 0
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	aa ef       	ldi	r26, 0xFA	; 250
     e0c:	b3 e4       	ldi	r27, 0x43	; 67
     e0e:	89 8f       	std	Y+25, r24	; 0x19
     e10:	9a 8f       	std	Y+26, r25	; 0x1a
     e12:	ab 8f       	std	Y+27, r26	; 0x1b
     e14:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e16:	69 8d       	ldd	r22, Y+25	; 0x19
     e18:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e1a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e1c:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e1e:	20 e0       	ldi	r18, 0x00	; 0
     e20:	30 e0       	ldi	r19, 0x00	; 0
     e22:	4a ef       	ldi	r20, 0xFA	; 250
     e24:	54 e4       	ldi	r21, 0x44	; 68
     e26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e2a:	dc 01       	movw	r26, r24
     e2c:	cb 01       	movw	r24, r22
     e2e:	8d 8b       	std	Y+21, r24	; 0x15
     e30:	9e 8b       	std	Y+22, r25	; 0x16
     e32:	af 8b       	std	Y+23, r26	; 0x17
     e34:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     e36:	6d 89       	ldd	r22, Y+21	; 0x15
     e38:	7e 89       	ldd	r23, Y+22	; 0x16
     e3a:	8f 89       	ldd	r24, Y+23	; 0x17
     e3c:	98 8d       	ldd	r25, Y+24	; 0x18
     e3e:	20 e0       	ldi	r18, 0x00	; 0
     e40:	30 e0       	ldi	r19, 0x00	; 0
     e42:	40 e8       	ldi	r20, 0x80	; 128
     e44:	5f e3       	ldi	r21, 0x3F	; 63
     e46:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e4a:	88 23       	and	r24, r24
     e4c:	2c f4       	brge	.+10     	; 0xe58 <sendSecondPass+0xb2>
		__ticks = 1;
     e4e:	81 e0       	ldi	r24, 0x01	; 1
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	9c 8b       	std	Y+20, r25	; 0x14
     e54:	8b 8b       	std	Y+19, r24	; 0x13
     e56:	3f c0       	rjmp	.+126    	; 0xed6 <sendSecondPass+0x130>
	else if (__tmp > 65535)
     e58:	6d 89       	ldd	r22, Y+21	; 0x15
     e5a:	7e 89       	ldd	r23, Y+22	; 0x16
     e5c:	8f 89       	ldd	r24, Y+23	; 0x17
     e5e:	98 8d       	ldd	r25, Y+24	; 0x18
     e60:	20 e0       	ldi	r18, 0x00	; 0
     e62:	3f ef       	ldi	r19, 0xFF	; 255
     e64:	4f e7       	ldi	r20, 0x7F	; 127
     e66:	57 e4       	ldi	r21, 0x47	; 71
     e68:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e6c:	18 16       	cp	r1, r24
     e6e:	4c f5       	brge	.+82     	; 0xec2 <sendSecondPass+0x11c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e70:	69 8d       	ldd	r22, Y+25	; 0x19
     e72:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e74:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e76:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e78:	20 e0       	ldi	r18, 0x00	; 0
     e7a:	30 e0       	ldi	r19, 0x00	; 0
     e7c:	40 e2       	ldi	r20, 0x20	; 32
     e7e:	51 e4       	ldi	r21, 0x41	; 65
     e80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e84:	dc 01       	movw	r26, r24
     e86:	cb 01       	movw	r24, r22
     e88:	bc 01       	movw	r22, r24
     e8a:	cd 01       	movw	r24, r26
     e8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e90:	dc 01       	movw	r26, r24
     e92:	cb 01       	movw	r24, r22
     e94:	9c 8b       	std	Y+20, r25	; 0x14
     e96:	8b 8b       	std	Y+19, r24	; 0x13
     e98:	0f c0       	rjmp	.+30     	; 0xeb8 <sendSecondPass+0x112>
     e9a:	88 ec       	ldi	r24, 0xC8	; 200
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	9a 8b       	std	Y+18, r25	; 0x12
     ea0:	89 8b       	std	Y+17, r24	; 0x11
     ea2:	89 89       	ldd	r24, Y+17	; 0x11
     ea4:	9a 89       	ldd	r25, Y+18	; 0x12
     ea6:	01 97       	sbiw	r24, 0x01	; 1
     ea8:	f1 f7       	brne	.-4      	; 0xea6 <sendSecondPass+0x100>
     eaa:	9a 8b       	std	Y+18, r25	; 0x12
     eac:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     eae:	8b 89       	ldd	r24, Y+19	; 0x13
     eb0:	9c 89       	ldd	r25, Y+20	; 0x14
     eb2:	01 97       	sbiw	r24, 0x01	; 1
     eb4:	9c 8b       	std	Y+20, r25	; 0x14
     eb6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     eb8:	8b 89       	ldd	r24, Y+19	; 0x13
     eba:	9c 89       	ldd	r25, Y+20	; 0x14
     ebc:	00 97       	sbiw	r24, 0x00	; 0
     ebe:	69 f7       	brne	.-38     	; 0xe9a <sendSecondPass+0xf4>
     ec0:	14 c0       	rjmp	.+40     	; 0xeea <sendSecondPass+0x144>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ec2:	6d 89       	ldd	r22, Y+21	; 0x15
     ec4:	7e 89       	ldd	r23, Y+22	; 0x16
     ec6:	8f 89       	ldd	r24, Y+23	; 0x17
     ec8:	98 8d       	ldd	r25, Y+24	; 0x18
     eca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ece:	dc 01       	movw	r26, r24
     ed0:	cb 01       	movw	r24, r22
     ed2:	9c 8b       	std	Y+20, r25	; 0x14
     ed4:	8b 8b       	std	Y+19, r24	; 0x13
     ed6:	8b 89       	ldd	r24, Y+19	; 0x13
     ed8:	9c 89       	ldd	r25, Y+20	; 0x14
     eda:	98 8b       	std	Y+16, r25	; 0x10
     edc:	8f 87       	std	Y+15, r24	; 0x0f
     ede:	8f 85       	ldd	r24, Y+15	; 0x0f
     ee0:	98 89       	ldd	r25, Y+16	; 0x10
     ee2:	01 97       	sbiw	r24, 0x01	; 1
     ee4:	f1 f7       	brne	.-4      	; 0xee2 <sendSecondPass+0x13c>
     ee6:	98 8b       	std	Y+16, r25	; 0x10
     ee8:	8f 87       	std	Y+15, r24	; 0x0f
	LCD_displayString("plz re-enter the");
	LCD_moveCursor(1,0);
	LCD_displayString("same pass: ");


	for(i=0;i<PASS_SIZE;i++){
     eea:	80 91 07 01 	lds	r24, 0x0107
     eee:	8f 5f       	subi	r24, 0xFF	; 255
     ef0:	80 93 07 01 	sts	0x0107, r24
     ef4:	80 91 07 01 	lds	r24, 0x0107
     ef8:	85 30       	cpi	r24, 0x05	; 5
     efa:	08 f4       	brcc	.+2      	; 0xefe <sendSecondPass+0x158>
     efc:	6f cf       	rjmp	.-290    	; 0xddc <sendSecondPass+0x36>
     efe:	04 c0       	rjmp	.+8      	; 0xf08 <sendSecondPass+0x162>
	}
	/*
	 * making sure the user pressed = button before proceeding in the code
	 */
	while(key != '='){
		key=KEYPAD_getPressedKey();
     f00:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <KEYPAD_getPressedKey>
     f04:	80 93 09 01 	sts	0x0109, r24
		_delay_ms(500);
	}
	/*
	 * making sure the user pressed = button before proceeding in the code
	 */
	while(key != '='){
     f08:	80 91 09 01 	lds	r24, 0x0109
     f0c:	8d 33       	cpi	r24, 0x3D	; 61
     f0e:	c1 f7       	brne	.-16     	; 0xf00 <sendSecondPass+0x15a>
		key=KEYPAD_getPressedKey();
	}
	UART_sendByte(key);//sending '='
     f10:	80 91 09 01 	lds	r24, 0x0109
     f14:	0e 94 76 1b 	call	0x36ec	; 0x36ec <UART_sendByte>
     f18:	80 e0       	ldi	r24, 0x00	; 0
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	aa ef       	ldi	r26, 0xFA	; 250
     f1e:	b3 e4       	ldi	r27, 0x43	; 67
     f20:	8b 87       	std	Y+11, r24	; 0x0b
     f22:	9c 87       	std	Y+12, r25	; 0x0c
     f24:	ad 87       	std	Y+13, r26	; 0x0d
     f26:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f28:	6b 85       	ldd	r22, Y+11	; 0x0b
     f2a:	7c 85       	ldd	r23, Y+12	; 0x0c
     f2c:	8d 85       	ldd	r24, Y+13	; 0x0d
     f2e:	9e 85       	ldd	r25, Y+14	; 0x0e
     f30:	20 e0       	ldi	r18, 0x00	; 0
     f32:	30 e0       	ldi	r19, 0x00	; 0
     f34:	4a ef       	ldi	r20, 0xFA	; 250
     f36:	54 e4       	ldi	r21, 0x44	; 68
     f38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f3c:	dc 01       	movw	r26, r24
     f3e:	cb 01       	movw	r24, r22
     f40:	8f 83       	std	Y+7, r24	; 0x07
     f42:	98 87       	std	Y+8, r25	; 0x08
     f44:	a9 87       	std	Y+9, r26	; 0x09
     f46:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f48:	6f 81       	ldd	r22, Y+7	; 0x07
     f4a:	78 85       	ldd	r23, Y+8	; 0x08
     f4c:	89 85       	ldd	r24, Y+9	; 0x09
     f4e:	9a 85       	ldd	r25, Y+10	; 0x0a
     f50:	20 e0       	ldi	r18, 0x00	; 0
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	40 e8       	ldi	r20, 0x80	; 128
     f56:	5f e3       	ldi	r21, 0x3F	; 63
     f58:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f5c:	88 23       	and	r24, r24
     f5e:	2c f4       	brge	.+10     	; 0xf6a <sendSecondPass+0x1c4>
		__ticks = 1;
     f60:	81 e0       	ldi	r24, 0x01	; 1
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	9e 83       	std	Y+6, r25	; 0x06
     f66:	8d 83       	std	Y+5, r24	; 0x05
     f68:	3f c0       	rjmp	.+126    	; 0xfe8 <sendSecondPass+0x242>
	else if (__tmp > 65535)
     f6a:	6f 81       	ldd	r22, Y+7	; 0x07
     f6c:	78 85       	ldd	r23, Y+8	; 0x08
     f6e:	89 85       	ldd	r24, Y+9	; 0x09
     f70:	9a 85       	ldd	r25, Y+10	; 0x0a
     f72:	20 e0       	ldi	r18, 0x00	; 0
     f74:	3f ef       	ldi	r19, 0xFF	; 255
     f76:	4f e7       	ldi	r20, 0x7F	; 127
     f78:	57 e4       	ldi	r21, 0x47	; 71
     f7a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f7e:	18 16       	cp	r1, r24
     f80:	4c f5       	brge	.+82     	; 0xfd4 <sendSecondPass+0x22e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f82:	6b 85       	ldd	r22, Y+11	; 0x0b
     f84:	7c 85       	ldd	r23, Y+12	; 0x0c
     f86:	8d 85       	ldd	r24, Y+13	; 0x0d
     f88:	9e 85       	ldd	r25, Y+14	; 0x0e
     f8a:	20 e0       	ldi	r18, 0x00	; 0
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	40 e2       	ldi	r20, 0x20	; 32
     f90:	51 e4       	ldi	r21, 0x41	; 65
     f92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f96:	dc 01       	movw	r26, r24
     f98:	cb 01       	movw	r24, r22
     f9a:	bc 01       	movw	r22, r24
     f9c:	cd 01       	movw	r24, r26
     f9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fa2:	dc 01       	movw	r26, r24
     fa4:	cb 01       	movw	r24, r22
     fa6:	9e 83       	std	Y+6, r25	; 0x06
     fa8:	8d 83       	std	Y+5, r24	; 0x05
     faa:	0f c0       	rjmp	.+30     	; 0xfca <sendSecondPass+0x224>
     fac:	88 ec       	ldi	r24, 0xC8	; 200
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	9c 83       	std	Y+4, r25	; 0x04
     fb2:	8b 83       	std	Y+3, r24	; 0x03
     fb4:	8b 81       	ldd	r24, Y+3	; 0x03
     fb6:	9c 81       	ldd	r25, Y+4	; 0x04
     fb8:	01 97       	sbiw	r24, 0x01	; 1
     fba:	f1 f7       	brne	.-4      	; 0xfb8 <sendSecondPass+0x212>
     fbc:	9c 83       	std	Y+4, r25	; 0x04
     fbe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fc0:	8d 81       	ldd	r24, Y+5	; 0x05
     fc2:	9e 81       	ldd	r25, Y+6	; 0x06
     fc4:	01 97       	sbiw	r24, 0x01	; 1
     fc6:	9e 83       	std	Y+6, r25	; 0x06
     fc8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fca:	8d 81       	ldd	r24, Y+5	; 0x05
     fcc:	9e 81       	ldd	r25, Y+6	; 0x06
     fce:	00 97       	sbiw	r24, 0x00	; 0
     fd0:	69 f7       	brne	.-38     	; 0xfac <sendSecondPass+0x206>
     fd2:	14 c0       	rjmp	.+40     	; 0xffc <sendSecondPass+0x256>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fd4:	6f 81       	ldd	r22, Y+7	; 0x07
     fd6:	78 85       	ldd	r23, Y+8	; 0x08
     fd8:	89 85       	ldd	r24, Y+9	; 0x09
     fda:	9a 85       	ldd	r25, Y+10	; 0x0a
     fdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fe0:	dc 01       	movw	r26, r24
     fe2:	cb 01       	movw	r24, r22
     fe4:	9e 83       	std	Y+6, r25	; 0x06
     fe6:	8d 83       	std	Y+5, r24	; 0x05
     fe8:	8d 81       	ldd	r24, Y+5	; 0x05
     fea:	9e 81       	ldd	r25, Y+6	; 0x06
     fec:	9a 83       	std	Y+2, r25	; 0x02
     fee:	89 83       	std	Y+1, r24	; 0x01
     ff0:	89 81       	ldd	r24, Y+1	; 0x01
     ff2:	9a 81       	ldd	r25, Y+2	; 0x02
     ff4:	01 97       	sbiw	r24, 0x01	; 1
     ff6:	f1 f7       	brne	.-4      	; 0xff4 <sendSecondPass+0x24e>
     ff8:	9a 83       	std	Y+2, r25	; 0x02
     ffa:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
}
     ffc:	6c 96       	adiw	r28, 0x1c	; 28
     ffe:	0f b6       	in	r0, 0x3f	; 63
    1000:	f8 94       	cli
    1002:	de bf       	out	0x3e, r29	; 62
    1004:	0f be       	out	0x3f, r0	; 63
    1006:	cd bf       	out	0x3d, r28	; 61
    1008:	cf 91       	pop	r28
    100a:	df 91       	pop	r29
    100c:	08 95       	ret

0000100e <securityBreach>:
 * if not the a global variable g_breach count increments by 1 and if it reaches 3 then
 * we will consider it as a security breach
 *  and g_passFailed will take the value of SECURITY_BREACH
 */

void securityBreach(void){
    100e:	df 93       	push	r29
    1010:	cf 93       	push	r28
    1012:	cd b7       	in	r28, 0x3d	; 61
    1014:	de b7       	in	r29, 0x3e	; 62
    1016:	2e 97       	sbiw	r28, 0x0e	; 14
    1018:	0f b6       	in	r0, 0x3f	; 63
    101a:	f8 94       	cli
    101c:	de bf       	out	0x3e, r29	; 62
    101e:	0f be       	out	0x3f, r0	; 63
    1020:	cd bf       	out	0x3d, r28	; 61
	while(1){
		sendFirstPass();
    1022:	0e 94 a3 05 	call	0xb46	; 0xb46 <sendFirstPass>

		g_passFailed=UART_recieveByte();//receiving EEPROM COMPARE Value
    1026:	0e 94 8d 1b 	call	0x371a	; 0x371a <UART_recieveByte>
    102a:	80 93 05 01 	sts	0x0105, r24
    102e:	80 e0       	ldi	r24, 0x00	; 0
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	a0 e2       	ldi	r26, 0x20	; 32
    1034:	b1 e4       	ldi	r27, 0x41	; 65
    1036:	8b 87       	std	Y+11, r24	; 0x0b
    1038:	9c 87       	std	Y+12, r25	; 0x0c
    103a:	ad 87       	std	Y+13, r26	; 0x0d
    103c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    103e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1040:	7c 85       	ldd	r23, Y+12	; 0x0c
    1042:	8d 85       	ldd	r24, Y+13	; 0x0d
    1044:	9e 85       	ldd	r25, Y+14	; 0x0e
    1046:	20 e0       	ldi	r18, 0x00	; 0
    1048:	30 e0       	ldi	r19, 0x00	; 0
    104a:	4a ef       	ldi	r20, 0xFA	; 250
    104c:	54 e4       	ldi	r21, 0x44	; 68
    104e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1052:	dc 01       	movw	r26, r24
    1054:	cb 01       	movw	r24, r22
    1056:	8f 83       	std	Y+7, r24	; 0x07
    1058:	98 87       	std	Y+8, r25	; 0x08
    105a:	a9 87       	std	Y+9, r26	; 0x09
    105c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    105e:	6f 81       	ldd	r22, Y+7	; 0x07
    1060:	78 85       	ldd	r23, Y+8	; 0x08
    1062:	89 85       	ldd	r24, Y+9	; 0x09
    1064:	9a 85       	ldd	r25, Y+10	; 0x0a
    1066:	20 e0       	ldi	r18, 0x00	; 0
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	40 e8       	ldi	r20, 0x80	; 128
    106c:	5f e3       	ldi	r21, 0x3F	; 63
    106e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1072:	88 23       	and	r24, r24
    1074:	2c f4       	brge	.+10     	; 0x1080 <securityBreach+0x72>
		__ticks = 1;
    1076:	81 e0       	ldi	r24, 0x01	; 1
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	9e 83       	std	Y+6, r25	; 0x06
    107c:	8d 83       	std	Y+5, r24	; 0x05
    107e:	3f c0       	rjmp	.+126    	; 0x10fe <securityBreach+0xf0>
	else if (__tmp > 65535)
    1080:	6f 81       	ldd	r22, Y+7	; 0x07
    1082:	78 85       	ldd	r23, Y+8	; 0x08
    1084:	89 85       	ldd	r24, Y+9	; 0x09
    1086:	9a 85       	ldd	r25, Y+10	; 0x0a
    1088:	20 e0       	ldi	r18, 0x00	; 0
    108a:	3f ef       	ldi	r19, 0xFF	; 255
    108c:	4f e7       	ldi	r20, 0x7F	; 127
    108e:	57 e4       	ldi	r21, 0x47	; 71
    1090:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1094:	18 16       	cp	r1, r24
    1096:	4c f5       	brge	.+82     	; 0x10ea <securityBreach+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1098:	6b 85       	ldd	r22, Y+11	; 0x0b
    109a:	7c 85       	ldd	r23, Y+12	; 0x0c
    109c:	8d 85       	ldd	r24, Y+13	; 0x0d
    109e:	9e 85       	ldd	r25, Y+14	; 0x0e
    10a0:	20 e0       	ldi	r18, 0x00	; 0
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	40 e2       	ldi	r20, 0x20	; 32
    10a6:	51 e4       	ldi	r21, 0x41	; 65
    10a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10ac:	dc 01       	movw	r26, r24
    10ae:	cb 01       	movw	r24, r22
    10b0:	bc 01       	movw	r22, r24
    10b2:	cd 01       	movw	r24, r26
    10b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10b8:	dc 01       	movw	r26, r24
    10ba:	cb 01       	movw	r24, r22
    10bc:	9e 83       	std	Y+6, r25	; 0x06
    10be:	8d 83       	std	Y+5, r24	; 0x05
    10c0:	0f c0       	rjmp	.+30     	; 0x10e0 <securityBreach+0xd2>
    10c2:	88 ec       	ldi	r24, 0xC8	; 200
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	9c 83       	std	Y+4, r25	; 0x04
    10c8:	8b 83       	std	Y+3, r24	; 0x03
    10ca:	8b 81       	ldd	r24, Y+3	; 0x03
    10cc:	9c 81       	ldd	r25, Y+4	; 0x04
    10ce:	01 97       	sbiw	r24, 0x01	; 1
    10d0:	f1 f7       	brne	.-4      	; 0x10ce <securityBreach+0xc0>
    10d2:	9c 83       	std	Y+4, r25	; 0x04
    10d4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10d6:	8d 81       	ldd	r24, Y+5	; 0x05
    10d8:	9e 81       	ldd	r25, Y+6	; 0x06
    10da:	01 97       	sbiw	r24, 0x01	; 1
    10dc:	9e 83       	std	Y+6, r25	; 0x06
    10de:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10e0:	8d 81       	ldd	r24, Y+5	; 0x05
    10e2:	9e 81       	ldd	r25, Y+6	; 0x06
    10e4:	00 97       	sbiw	r24, 0x00	; 0
    10e6:	69 f7       	brne	.-38     	; 0x10c2 <securityBreach+0xb4>
    10e8:	14 c0       	rjmp	.+40     	; 0x1112 <securityBreach+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10ea:	6f 81       	ldd	r22, Y+7	; 0x07
    10ec:	78 85       	ldd	r23, Y+8	; 0x08
    10ee:	89 85       	ldd	r24, Y+9	; 0x09
    10f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    10f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10f6:	dc 01       	movw	r26, r24
    10f8:	cb 01       	movw	r24, r22
    10fa:	9e 83       	std	Y+6, r25	; 0x06
    10fc:	8d 83       	std	Y+5, r24	; 0x05
    10fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1100:	9e 81       	ldd	r25, Y+6	; 0x06
    1102:	9a 83       	std	Y+2, r25	; 0x02
    1104:	89 83       	std	Y+1, r24	; 0x01
    1106:	89 81       	ldd	r24, Y+1	; 0x01
    1108:	9a 81       	ldd	r25, Y+2	; 0x02
    110a:	01 97       	sbiw	r24, 0x01	; 1
    110c:	f1 f7       	brne	.-4      	; 0x110a <securityBreach+0xfc>
    110e:	9a 83       	std	Y+2, r25	; 0x02
    1110:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);


		if(g_passFailed == NO_SECURITY_BREACH){
    1112:	80 91 05 01 	lds	r24, 0x0105
    1116:	81 30       	cpi	r24, 0x01	; 1
    1118:	71 f0       	breq	.+28     	; 0x1136 <securityBreach+0x128>
			break;
		}
		g_breachCount++;
    111a:	80 91 01 01 	lds	r24, 0x0101
    111e:	8f 5f       	subi	r24, 0xFF	; 255
    1120:	80 93 01 01 	sts	0x0101, r24
		if(g_breachCount==3){
    1124:	80 91 01 01 	lds	r24, 0x0101
    1128:	83 30       	cpi	r24, 0x03	; 3
    112a:	29 f0       	breq	.+10     	; 0x1136 <securityBreach+0x128>
			break;
		}
		g_passFailed=SECURITY_BREACH;
    112c:	10 92 05 01 	sts	0x0105, r1

		LCD_clearScreen();
    1130:	0e 94 bb 19 	call	0x3376	; 0x3376 <LCD_clearScreen>
    1134:	76 cf       	rjmp	.-276    	; 0x1022 <securityBreach+0x14>
	}
}
    1136:	2e 96       	adiw	r28, 0x0e	; 14
    1138:	0f b6       	in	r0, 0x3f	; 63
    113a:	f8 94       	cli
    113c:	de bf       	out	0x3e, r29	; 62
    113e:	0f be       	out	0x3f, r0	; 63
    1140:	cd bf       	out	0x3d, r28	; 61
    1142:	cf 91       	pop	r28
    1144:	df 91       	pop	r29
    1146:	08 95       	ret

00001148 <APP_tickCounter>:

/*
 * this is the timer call back function in case of compare mode
 */
void APP_tickCounter(void){
    1148:	df 93       	push	r29
    114a:	cf 93       	push	r28
    114c:	cd b7       	in	r28, 0x3d	; 61
    114e:	de b7       	in	r29, 0x3e	; 62
	g_tick++;//every second is equivalent to one tick 1sec=1tick
    1150:	80 91 02 01 	lds	r24, 0x0102
    1154:	8f 5f       	subi	r24, 0xFF	; 255
    1156:	80 93 02 01 	sts	0x0102, r24
}
    115a:	cf 91       	pop	r28
    115c:	df 91       	pop	r29
    115e:	08 95       	ret

00001160 <main>:


int main(void){
    1160:	df 93       	push	r29
    1162:	cf 93       	push	r28
    1164:	cd b7       	in	r28, 0x3d	; 61
    1166:	de b7       	in	r29, 0x3e	; 62
    1168:	e4 97       	sbiw	r28, 0x34	; 52
    116a:	0f b6       	in	r0, 0x3f	; 63
    116c:	f8 94       	cli
    116e:	de bf       	out	0x3e, r29	; 62
    1170:	0f be       	out	0x3f, r0	; 63
    1172:	cd bf       	out	0x3d, r28	; 61
	SET_BIT(SREG,7);//enabling global interrupt bit "I-Bit"
    1174:	af e5       	ldi	r26, 0x5F	; 95
    1176:	b0 e0       	ldi	r27, 0x00	; 0
    1178:	ef e5       	ldi	r30, 0x5F	; 95
    117a:	f0 e0       	ldi	r31, 0x00	; 0
    117c:	80 81       	ld	r24, Z
    117e:	80 68       	ori	r24, 0x80	; 128
    1180:	8c 93       	st	X, r24
	UART_ConfigType UART_Configurations = {ASYNCHRONOUS,EIGHT_BIT,EVEN_PARITY,ONE_BIT,9600}; //configures the UART dynamically
    1182:	ce 01       	movw	r24, r28
    1184:	4d 96       	adiw	r24, 0x1d	; 29
    1186:	9c a7       	std	Y+44, r25	; 0x2c
    1188:	8b a7       	std	Y+43, r24	; 0x2b
    118a:	e7 ef       	ldi	r30, 0xF7	; 247
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	fe a7       	std	Y+46, r31	; 0x2e
    1190:	ed a7       	std	Y+45, r30	; 0x2d
    1192:	f8 e0       	ldi	r31, 0x08	; 8
    1194:	ff a7       	std	Y+47, r31	; 0x2f
    1196:	ed a5       	ldd	r30, Y+45	; 0x2d
    1198:	fe a5       	ldd	r31, Y+46	; 0x2e
    119a:	00 80       	ld	r0, Z
    119c:	8d a5       	ldd	r24, Y+45	; 0x2d
    119e:	9e a5       	ldd	r25, Y+46	; 0x2e
    11a0:	01 96       	adiw	r24, 0x01	; 1
    11a2:	9e a7       	std	Y+46, r25	; 0x2e
    11a4:	8d a7       	std	Y+45, r24	; 0x2d
    11a6:	eb a5       	ldd	r30, Y+43	; 0x2b
    11a8:	fc a5       	ldd	r31, Y+44	; 0x2c
    11aa:	00 82       	st	Z, r0
    11ac:	8b a5       	ldd	r24, Y+43	; 0x2b
    11ae:	9c a5       	ldd	r25, Y+44	; 0x2c
    11b0:	01 96       	adiw	r24, 0x01	; 1
    11b2:	9c a7       	std	Y+44, r25	; 0x2c
    11b4:	8b a7       	std	Y+43, r24	; 0x2b
    11b6:	9f a5       	ldd	r25, Y+47	; 0x2f
    11b8:	91 50       	subi	r25, 0x01	; 1
    11ba:	9f a7       	std	Y+47, r25	; 0x2f
    11bc:	ef a5       	ldd	r30, Y+47	; 0x2f
    11be:	ee 23       	and	r30, r30
    11c0:	51 f7       	brne	.-44     	; 0x1196 <main+0x36>
	Timer1_ConfigType TIMER1_Configurations = {0,31249,F_CPU_256,CTC};//configures TIMER1 Dynamically
    11c2:	ce 01       	movw	r24, r28
    11c4:	85 96       	adiw	r24, 0x25	; 37
    11c6:	99 ab       	std	Y+49, r25	; 0x31
    11c8:	88 ab       	std	Y+48, r24	; 0x30
    11ca:	e1 ef       	ldi	r30, 0xF1	; 241
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	fb ab       	std	Y+51, r31	; 0x33
    11d0:	ea ab       	std	Y+50, r30	; 0x32
    11d2:	f6 e0       	ldi	r31, 0x06	; 6
    11d4:	fc ab       	std	Y+52, r31	; 0x34
    11d6:	ea a9       	ldd	r30, Y+50	; 0x32
    11d8:	fb a9       	ldd	r31, Y+51	; 0x33
    11da:	00 80       	ld	r0, Z
    11dc:	8a a9       	ldd	r24, Y+50	; 0x32
    11de:	9b a9       	ldd	r25, Y+51	; 0x33
    11e0:	01 96       	adiw	r24, 0x01	; 1
    11e2:	9b ab       	std	Y+51, r25	; 0x33
    11e4:	8a ab       	std	Y+50, r24	; 0x32
    11e6:	e8 a9       	ldd	r30, Y+48	; 0x30
    11e8:	f9 a9       	ldd	r31, Y+49	; 0x31
    11ea:	00 82       	st	Z, r0
    11ec:	88 a9       	ldd	r24, Y+48	; 0x30
    11ee:	99 a9       	ldd	r25, Y+49	; 0x31
    11f0:	01 96       	adiw	r24, 0x01	; 1
    11f2:	99 ab       	std	Y+49, r25	; 0x31
    11f4:	88 ab       	std	Y+48, r24	; 0x30
    11f6:	9c a9       	ldd	r25, Y+52	; 0x34
    11f8:	91 50       	subi	r25, 0x01	; 1
    11fa:	9c ab       	std	Y+52, r25	; 0x34
    11fc:	ec a9       	ldd	r30, Y+52	; 0x34
    11fe:	ee 23       	and	r30, r30
    1200:	51 f7       	brne	.-44     	; 0x11d6 <main+0x76>

	//initializing used drivers
	Timer1_init(&TIMER1_Configurations);
    1202:	ce 01       	movw	r24, r28
    1204:	85 96       	adiw	r24, 0x25	; 37
    1206:	0e 94 2b 1a 	call	0x3456	; 0x3456 <Timer1_init>
	Timer1_setCallBack(APP_tickCounter);//sending address of the call back function
    120a:	84 ea       	ldi	r24, 0xA4	; 164
    120c:	98 e0       	ldi	r25, 0x08	; 8
    120e:	0e 94 b6 1a 	call	0x356c	; 0x356c <Timer1_setCallBack>
	LCD_init();
    1212:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <LCD_init>
	UART_init(&UART_Configurations);
    1216:	ce 01       	movw	r24, r28
    1218:	4d 96       	adiw	r24, 0x1d	; 29
    121a:	0e 94 c8 1a 	call	0x3590	; 0x3590 <UART_init>


	while(1){
		//initial values
		g_passFailed=0;
    121e:	10 92 05 01 	sts	0x0105, r1
		g_breachCount=0;
    1222:	10 92 01 01 	sts	0x0101, r1

		//sending first pass and second pass
		sendFirstPass();
    1226:	0e 94 a3 05 	call	0xb46	; 0xb46 <sendFirstPass>

		sendSecondPass();
    122a:	0e 94 d3 06 	call	0xda6	; 0xda6 <sendSecondPass>

		//receiving value of compare between first pass and second pass
		bool=UART_recieveByte();
    122e:	0e 94 8d 1b 	call	0x371a	; 0x371a <UART_recieveByte>
    1232:	80 93 06 01 	sts	0x0106, r24
    1236:	80 e0       	ldi	r24, 0x00	; 0
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	a0 e2       	ldi	r26, 0x20	; 32
    123c:	b1 e4       	ldi	r27, 0x41	; 65
    123e:	89 8f       	std	Y+25, r24	; 0x19
    1240:	9a 8f       	std	Y+26, r25	; 0x1a
    1242:	ab 8f       	std	Y+27, r26	; 0x1b
    1244:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1246:	69 8d       	ldd	r22, Y+25	; 0x19
    1248:	7a 8d       	ldd	r23, Y+26	; 0x1a
    124a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    124c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    124e:	20 e0       	ldi	r18, 0x00	; 0
    1250:	30 e0       	ldi	r19, 0x00	; 0
    1252:	4a ef       	ldi	r20, 0xFA	; 250
    1254:	54 e4       	ldi	r21, 0x44	; 68
    1256:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    125a:	dc 01       	movw	r26, r24
    125c:	cb 01       	movw	r24, r22
    125e:	8d 8b       	std	Y+21, r24	; 0x15
    1260:	9e 8b       	std	Y+22, r25	; 0x16
    1262:	af 8b       	std	Y+23, r26	; 0x17
    1264:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1266:	6d 89       	ldd	r22, Y+21	; 0x15
    1268:	7e 89       	ldd	r23, Y+22	; 0x16
    126a:	8f 89       	ldd	r24, Y+23	; 0x17
    126c:	98 8d       	ldd	r25, Y+24	; 0x18
    126e:	20 e0       	ldi	r18, 0x00	; 0
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	40 e8       	ldi	r20, 0x80	; 128
    1274:	5f e3       	ldi	r21, 0x3F	; 63
    1276:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    127a:	88 23       	and	r24, r24
    127c:	2c f4       	brge	.+10     	; 0x1288 <main+0x128>
		__ticks = 1;
    127e:	81 e0       	ldi	r24, 0x01	; 1
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	9c 8b       	std	Y+20, r25	; 0x14
    1284:	8b 8b       	std	Y+19, r24	; 0x13
    1286:	3f c0       	rjmp	.+126    	; 0x1306 <main+0x1a6>
	else if (__tmp > 65535)
    1288:	6d 89       	ldd	r22, Y+21	; 0x15
    128a:	7e 89       	ldd	r23, Y+22	; 0x16
    128c:	8f 89       	ldd	r24, Y+23	; 0x17
    128e:	98 8d       	ldd	r25, Y+24	; 0x18
    1290:	20 e0       	ldi	r18, 0x00	; 0
    1292:	3f ef       	ldi	r19, 0xFF	; 255
    1294:	4f e7       	ldi	r20, 0x7F	; 127
    1296:	57 e4       	ldi	r21, 0x47	; 71
    1298:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    129c:	18 16       	cp	r1, r24
    129e:	4c f5       	brge	.+82     	; 0x12f2 <main+0x192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12a0:	69 8d       	ldd	r22, Y+25	; 0x19
    12a2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12a4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12a6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12a8:	20 e0       	ldi	r18, 0x00	; 0
    12aa:	30 e0       	ldi	r19, 0x00	; 0
    12ac:	40 e2       	ldi	r20, 0x20	; 32
    12ae:	51 e4       	ldi	r21, 0x41	; 65
    12b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12b4:	dc 01       	movw	r26, r24
    12b6:	cb 01       	movw	r24, r22
    12b8:	bc 01       	movw	r22, r24
    12ba:	cd 01       	movw	r24, r26
    12bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12c0:	dc 01       	movw	r26, r24
    12c2:	cb 01       	movw	r24, r22
    12c4:	9c 8b       	std	Y+20, r25	; 0x14
    12c6:	8b 8b       	std	Y+19, r24	; 0x13
    12c8:	0f c0       	rjmp	.+30     	; 0x12e8 <main+0x188>
    12ca:	88 ec       	ldi	r24, 0xC8	; 200
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	9a 8b       	std	Y+18, r25	; 0x12
    12d0:	89 8b       	std	Y+17, r24	; 0x11
    12d2:	89 89       	ldd	r24, Y+17	; 0x11
    12d4:	9a 89       	ldd	r25, Y+18	; 0x12
    12d6:	01 97       	sbiw	r24, 0x01	; 1
    12d8:	f1 f7       	brne	.-4      	; 0x12d6 <main+0x176>
    12da:	9a 8b       	std	Y+18, r25	; 0x12
    12dc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12de:	8b 89       	ldd	r24, Y+19	; 0x13
    12e0:	9c 89       	ldd	r25, Y+20	; 0x14
    12e2:	01 97       	sbiw	r24, 0x01	; 1
    12e4:	9c 8b       	std	Y+20, r25	; 0x14
    12e6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12e8:	8b 89       	ldd	r24, Y+19	; 0x13
    12ea:	9c 89       	ldd	r25, Y+20	; 0x14
    12ec:	00 97       	sbiw	r24, 0x00	; 0
    12ee:	69 f7       	brne	.-38     	; 0x12ca <main+0x16a>
    12f0:	14 c0       	rjmp	.+40     	; 0x131a <main+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12f2:	6d 89       	ldd	r22, Y+21	; 0x15
    12f4:	7e 89       	ldd	r23, Y+22	; 0x16
    12f6:	8f 89       	ldd	r24, Y+23	; 0x17
    12f8:	98 8d       	ldd	r25, Y+24	; 0x18
    12fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12fe:	dc 01       	movw	r26, r24
    1300:	cb 01       	movw	r24, r22
    1302:	9c 8b       	std	Y+20, r25	; 0x14
    1304:	8b 8b       	std	Y+19, r24	; 0x13
    1306:	8b 89       	ldd	r24, Y+19	; 0x13
    1308:	9c 89       	ldd	r25, Y+20	; 0x14
    130a:	98 8b       	std	Y+16, r25	; 0x10
    130c:	8f 87       	std	Y+15, r24	; 0x0f
    130e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1310:	98 89       	ldd	r25, Y+16	; 0x10
    1312:	01 97       	sbiw	r24, 0x01	; 1
    1314:	f1 f7       	brne	.-4      	; 0x1312 <main+0x1b2>
    1316:	98 8b       	std	Y+16, r25	; 0x10
    1318:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(10);

		/* if the compare was success then proceed the code
		 * if not then ask the user for the passwords again
		 */
		if(bool == SUCCESS){
    131a:	80 91 06 01 	lds	r24, 0x0106
    131e:	81 30       	cpi	r24, 0x01	; 1
    1320:	09 f0       	breq	.+2      	; 0x1324 <main+0x1c4>
    1322:	7d cf       	rjmp	.-262    	; 0x121e <main+0xbe>

			while(1){
				LCD_clearScreen();
    1324:	0e 94 bb 19 	call	0x3376	; 0x3376 <LCD_clearScreen>
				LCD_displayString("+ : Open Door");
    1328:	8d e8       	ldi	r24, 0x8D	; 141
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	0e 94 14 19 	call	0x3228	; 0x3228 <LCD_displayString>
				LCD_moveCursor(1,0);
    1330:	81 e0       	ldi	r24, 0x01	; 1
    1332:	60 e0       	ldi	r22, 0x00	; 0
    1334:	0e 94 3d 19 	call	0x327a	; 0x327a <LCD_moveCursor>
				LCD_displayString("- : Change Pass");
    1338:	8b e9       	ldi	r24, 0x9B	; 155
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	0e 94 14 19 	call	0x3228	; 0x3228 <LCD_displayString>

				//making sure the pressed button was '+' or '-'
				while(1){
					key=KEYPAD_getPressedKey();
    1340:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <KEYPAD_getPressedKey>
    1344:	80 93 09 01 	sts	0x0109, r24
					if(key == '+' || key=='-'){
    1348:	80 91 09 01 	lds	r24, 0x0109
    134c:	8b 32       	cpi	r24, 0x2B	; 43
    134e:	21 f0       	breq	.+8      	; 0x1358 <main+0x1f8>
    1350:	80 91 09 01 	lds	r24, 0x0109
    1354:	8d 32       	cpi	r24, 0x2D	; 45
    1356:	a1 f7       	brne	.-24     	; 0x1340 <main+0x1e0>
						break;
					}
				}
				//sending + or -
				UART_sendByte(key);
    1358:	80 91 09 01 	lds	r24, 0x0109
    135c:	0e 94 76 1b 	call	0x36ec	; 0x36ec <UART_sendByte>
    1360:	80 e0       	ldi	r24, 0x00	; 0
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	a0 e2       	ldi	r26, 0x20	; 32
    1366:	b1 e4       	ldi	r27, 0x41	; 65
    1368:	8b 87       	std	Y+11, r24	; 0x0b
    136a:	9c 87       	std	Y+12, r25	; 0x0c
    136c:	ad 87       	std	Y+13, r26	; 0x0d
    136e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1370:	6b 85       	ldd	r22, Y+11	; 0x0b
    1372:	7c 85       	ldd	r23, Y+12	; 0x0c
    1374:	8d 85       	ldd	r24, Y+13	; 0x0d
    1376:	9e 85       	ldd	r25, Y+14	; 0x0e
    1378:	20 e0       	ldi	r18, 0x00	; 0
    137a:	30 e0       	ldi	r19, 0x00	; 0
    137c:	4a ef       	ldi	r20, 0xFA	; 250
    137e:	54 e4       	ldi	r21, 0x44	; 68
    1380:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1384:	dc 01       	movw	r26, r24
    1386:	cb 01       	movw	r24, r22
    1388:	8f 83       	std	Y+7, r24	; 0x07
    138a:	98 87       	std	Y+8, r25	; 0x08
    138c:	a9 87       	std	Y+9, r26	; 0x09
    138e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1390:	6f 81       	ldd	r22, Y+7	; 0x07
    1392:	78 85       	ldd	r23, Y+8	; 0x08
    1394:	89 85       	ldd	r24, Y+9	; 0x09
    1396:	9a 85       	ldd	r25, Y+10	; 0x0a
    1398:	20 e0       	ldi	r18, 0x00	; 0
    139a:	30 e0       	ldi	r19, 0x00	; 0
    139c:	40 e8       	ldi	r20, 0x80	; 128
    139e:	5f e3       	ldi	r21, 0x3F	; 63
    13a0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13a4:	88 23       	and	r24, r24
    13a6:	2c f4       	brge	.+10     	; 0x13b2 <main+0x252>
		__ticks = 1;
    13a8:	81 e0       	ldi	r24, 0x01	; 1
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	9e 83       	std	Y+6, r25	; 0x06
    13ae:	8d 83       	std	Y+5, r24	; 0x05
    13b0:	3f c0       	rjmp	.+126    	; 0x1430 <main+0x2d0>
	else if (__tmp > 65535)
    13b2:	6f 81       	ldd	r22, Y+7	; 0x07
    13b4:	78 85       	ldd	r23, Y+8	; 0x08
    13b6:	89 85       	ldd	r24, Y+9	; 0x09
    13b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    13ba:	20 e0       	ldi	r18, 0x00	; 0
    13bc:	3f ef       	ldi	r19, 0xFF	; 255
    13be:	4f e7       	ldi	r20, 0x7F	; 127
    13c0:	57 e4       	ldi	r21, 0x47	; 71
    13c2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13c6:	18 16       	cp	r1, r24
    13c8:	4c f5       	brge	.+82     	; 0x141c <main+0x2bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    13cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    13ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    13d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    13d2:	20 e0       	ldi	r18, 0x00	; 0
    13d4:	30 e0       	ldi	r19, 0x00	; 0
    13d6:	40 e2       	ldi	r20, 0x20	; 32
    13d8:	51 e4       	ldi	r21, 0x41	; 65
    13da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13de:	dc 01       	movw	r26, r24
    13e0:	cb 01       	movw	r24, r22
    13e2:	bc 01       	movw	r22, r24
    13e4:	cd 01       	movw	r24, r26
    13e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13ea:	dc 01       	movw	r26, r24
    13ec:	cb 01       	movw	r24, r22
    13ee:	9e 83       	std	Y+6, r25	; 0x06
    13f0:	8d 83       	std	Y+5, r24	; 0x05
    13f2:	0f c0       	rjmp	.+30     	; 0x1412 <main+0x2b2>
    13f4:	88 ec       	ldi	r24, 0xC8	; 200
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	9c 83       	std	Y+4, r25	; 0x04
    13fa:	8b 83       	std	Y+3, r24	; 0x03
    13fc:	8b 81       	ldd	r24, Y+3	; 0x03
    13fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1400:	01 97       	sbiw	r24, 0x01	; 1
    1402:	f1 f7       	brne	.-4      	; 0x1400 <main+0x2a0>
    1404:	9c 83       	std	Y+4, r25	; 0x04
    1406:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1408:	8d 81       	ldd	r24, Y+5	; 0x05
    140a:	9e 81       	ldd	r25, Y+6	; 0x06
    140c:	01 97       	sbiw	r24, 0x01	; 1
    140e:	9e 83       	std	Y+6, r25	; 0x06
    1410:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1412:	8d 81       	ldd	r24, Y+5	; 0x05
    1414:	9e 81       	ldd	r25, Y+6	; 0x06
    1416:	00 97       	sbiw	r24, 0x00	; 0
    1418:	69 f7       	brne	.-38     	; 0x13f4 <main+0x294>
    141a:	14 c0       	rjmp	.+40     	; 0x1444 <main+0x2e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    141c:	6f 81       	ldd	r22, Y+7	; 0x07
    141e:	78 85       	ldd	r23, Y+8	; 0x08
    1420:	89 85       	ldd	r24, Y+9	; 0x09
    1422:	9a 85       	ldd	r25, Y+10	; 0x0a
    1424:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1428:	dc 01       	movw	r26, r24
    142a:	cb 01       	movw	r24, r22
    142c:	9e 83       	std	Y+6, r25	; 0x06
    142e:	8d 83       	std	Y+5, r24	; 0x05
    1430:	8d 81       	ldd	r24, Y+5	; 0x05
    1432:	9e 81       	ldd	r25, Y+6	; 0x06
    1434:	9a 83       	std	Y+2, r25	; 0x02
    1436:	89 83       	std	Y+1, r24	; 0x01
    1438:	89 81       	ldd	r24, Y+1	; 0x01
    143a:	9a 81       	ldd	r25, Y+2	; 0x02
    143c:	01 97       	sbiw	r24, 0x01	; 1
    143e:	f1 f7       	brne	.-4      	; 0x143c <main+0x2dc>
    1440:	9a 83       	std	Y+2, r25	; 0x02
    1442:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(10);
				g_count=0;
    1444:	10 92 00 01 	sts	0x0100, r1
				if(key == '-'){
    1448:	80 91 09 01 	lds	r24, 0x0109
    144c:	8d 32       	cpi	r24, 0x2D	; 45
    144e:	f9 f4       	brne	.+62     	; 0x148e <main+0x32e>
					while(1){
						//checking if security breach occurred
						securityBreach();
    1450:	0e 94 07 08 	call	0x100e	; 0x100e <securityBreach>

						if(g_passFailed==SECURITY_BREACH && g_breachCount == 3){
    1454:	80 91 05 01 	lds	r24, 0x0105
    1458:	88 23       	and	r24, r24
    145a:	99 f4       	brne	.+38     	; 0x1482 <main+0x322>
    145c:	80 91 01 01 	lds	r24, 0x0101
    1460:	83 30       	cpi	r24, 0x03	; 3
    1462:	79 f4       	brne	.+30     	; 0x1482 <main+0x322>
							LCD_clearScreen();
    1464:	0e 94 bb 19 	call	0x3376	; 0x3376 <LCD_clearScreen>
							LCD_displayString("SECURITY BREACH!");
    1468:	8b ea       	ldi	r24, 0xAB	; 171
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	0e 94 14 19 	call	0x3228	; 0x3228 <LCD_displayString>
							g_tick=0;
    1470:	10 92 02 01 	sts	0x0102, r1
							while(g_tick<60);
    1474:	80 91 02 01 	lds	r24, 0x0102
    1478:	8c 33       	cpi	r24, 0x3C	; 60
    147a:	e0 f3       	brcs	.-8      	; 0x1474 <main+0x314>
							g_tick=0;
    147c:	10 92 02 01 	sts	0x0102, r1
    1480:	4e c0       	rjmp	.+156    	; 0x151e <main+0x3be>
							break;
						}
						else if(g_passFailed==NO_SECURITY_BREACH){
    1482:	80 91 05 01 	lds	r24, 0x0105
    1486:	81 30       	cpi	r24, 0x01	; 1
    1488:	09 f4       	brne	.+2      	; 0x148c <main+0x32c>
    148a:	49 c0       	rjmp	.+146    	; 0x151e <main+0x3be>
    148c:	e1 cf       	rjmp	.-62     	; 0x1450 <main+0x2f0>
							break;
						}
					}
				}

				else if(key == '+'){
    148e:	80 91 09 01 	lds	r24, 0x0109
    1492:	8b 32       	cpi	r24, 0x2B	; 43
    1494:	09 f0       	breq	.+2      	; 0x1498 <main+0x338>
    1496:	43 c0       	rjmp	.+134    	; 0x151e <main+0x3be>
					while(1){
						//checking if security breach occurred
						securityBreach();
    1498:	0e 94 07 08 	call	0x100e	; 0x100e <securityBreach>

						if(g_passFailed==SECURITY_BREACH && g_breachCount == 3){
    149c:	80 91 05 01 	lds	r24, 0x0105
    14a0:	88 23       	and	r24, r24
    14a2:	99 f4       	brne	.+38     	; 0x14ca <main+0x36a>
    14a4:	80 91 01 01 	lds	r24, 0x0101
    14a8:	83 30       	cpi	r24, 0x03	; 3
    14aa:	79 f4       	brne	.+30     	; 0x14ca <main+0x36a>
							LCD_clearScreen();
    14ac:	0e 94 bb 19 	call	0x3376	; 0x3376 <LCD_clearScreen>
							LCD_displayString("SECURITY BREACH!");
    14b0:	8b ea       	ldi	r24, 0xAB	; 171
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	0e 94 14 19 	call	0x3228	; 0x3228 <LCD_displayString>
							g_tick=0;
    14b8:	10 92 02 01 	sts	0x0102, r1
							while(g_tick<60);
    14bc:	80 91 02 01 	lds	r24, 0x0102
    14c0:	8c 33       	cpi	r24, 0x3C	; 60
    14c2:	e0 f3       	brcs	.-8      	; 0x14bc <main+0x35c>
							g_tick=0;
    14c4:	10 92 02 01 	sts	0x0102, r1
    14c8:	2a c0       	rjmp	.+84     	; 0x151e <main+0x3be>
							break;
						}
						else if(g_passFailed==NO_SECURITY_BREACH){
    14ca:	80 91 05 01 	lds	r24, 0x0105
    14ce:	81 30       	cpi	r24, 0x01	; 1
    14d0:	19 f7       	brne	.-58     	; 0x1498 <main+0x338>
							g_tick=0;
    14d2:	10 92 02 01 	sts	0x0102, r1
							LCD_clearScreen();
    14d6:	0e 94 bb 19 	call	0x3376	; 0x3376 <LCD_clearScreen>
							LCD_displayString("Door Unlocking");
    14da:	8c eb       	ldi	r24, 0xBC	; 188
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	0e 94 14 19 	call	0x3228	; 0x3228 <LCD_displayString>
							while(g_tick<15);
    14e2:	80 91 02 01 	lds	r24, 0x0102
    14e6:	8f 30       	cpi	r24, 0x0F	; 15
    14e8:	e0 f3       	brcs	.-8      	; 0x14e2 <main+0x382>
							g_tick=0;
    14ea:	10 92 02 01 	sts	0x0102, r1
							LCD_clearScreen();
    14ee:	0e 94 bb 19 	call	0x3376	; 0x3376 <LCD_clearScreen>
							LCD_displayString("Door Unlocked");
    14f2:	8b ec       	ldi	r24, 0xCB	; 203
    14f4:	90 e0       	ldi	r25, 0x00	; 0
    14f6:	0e 94 14 19 	call	0x3228	; 0x3228 <LCD_displayString>
							while(g_tick<3);
    14fa:	80 91 02 01 	lds	r24, 0x0102
    14fe:	83 30       	cpi	r24, 0x03	; 3
    1500:	e0 f3       	brcs	.-8      	; 0x14fa <main+0x39a>
							g_tick=0;
    1502:	10 92 02 01 	sts	0x0102, r1
							LCD_clearScreen();
    1506:	0e 94 bb 19 	call	0x3376	; 0x3376 <LCD_clearScreen>
							LCD_displayString("Door is Locking");
    150a:	89 ed       	ldi	r24, 0xD9	; 217
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	0e 94 14 19 	call	0x3228	; 0x3228 <LCD_displayString>
							while(g_tick<15);
    1512:	80 91 02 01 	lds	r24, 0x0102
    1516:	8f 30       	cpi	r24, 0x0F	; 15
    1518:	e0 f3       	brcs	.-8      	; 0x1512 <main+0x3b2>
							g_tick=0;
    151a:	10 92 02 01 	sts	0x0102, r1
							break;
						}
					}

				}
				if(g_passFailed == NO_SECURITY_BREACH && key=='-'){
    151e:	80 91 05 01 	lds	r24, 0x0105
    1522:	81 30       	cpi	r24, 0x01	; 1
    1524:	09 f0       	breq	.+2      	; 0x1528 <main+0x3c8>
    1526:	fe ce       	rjmp	.-516    	; 0x1324 <main+0x1c4>
    1528:	80 91 09 01 	lds	r24, 0x0109
    152c:	8d 32       	cpi	r24, 0x2D	; 45
    152e:	09 f4       	brne	.+2      	; 0x1532 <main+0x3d2>
    1530:	76 ce       	rjmp	.-788    	; 0x121e <main+0xbe>
    1532:	f8 ce       	rjmp	.-528    	; 0x1324 <main+0x1c4>

00001534 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1534:	df 93       	push	r29
    1536:	cf 93       	push	r28
    1538:	00 d0       	rcall	.+0      	; 0x153a <GPIO_setupPinDirection+0x6>
    153a:	00 d0       	rcall	.+0      	; 0x153c <GPIO_setupPinDirection+0x8>
    153c:	0f 92       	push	r0
    153e:	cd b7       	in	r28, 0x3d	; 61
    1540:	de b7       	in	r29, 0x3e	; 62
    1542:	89 83       	std	Y+1, r24	; 0x01
    1544:	6a 83       	std	Y+2, r22	; 0x02
    1546:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1548:	8a 81       	ldd	r24, Y+2	; 0x02
    154a:	88 30       	cpi	r24, 0x08	; 8
    154c:	08 f0       	brcs	.+2      	; 0x1550 <GPIO_setupPinDirection+0x1c>
    154e:	d5 c0       	rjmp	.+426    	; 0x16fa <GPIO_setupPinDirection+0x1c6>
    1550:	89 81       	ldd	r24, Y+1	; 0x01
    1552:	84 30       	cpi	r24, 0x04	; 4
    1554:	08 f0       	brcs	.+2      	; 0x1558 <GPIO_setupPinDirection+0x24>
    1556:	d1 c0       	rjmp	.+418    	; 0x16fa <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1558:	89 81       	ldd	r24, Y+1	; 0x01
    155a:	28 2f       	mov	r18, r24
    155c:	30 e0       	ldi	r19, 0x00	; 0
    155e:	3d 83       	std	Y+5, r19	; 0x05
    1560:	2c 83       	std	Y+4, r18	; 0x04
    1562:	8c 81       	ldd	r24, Y+4	; 0x04
    1564:	9d 81       	ldd	r25, Y+5	; 0x05
    1566:	81 30       	cpi	r24, 0x01	; 1
    1568:	91 05       	cpc	r25, r1
    156a:	09 f4       	brne	.+2      	; 0x156e <GPIO_setupPinDirection+0x3a>
    156c:	43 c0       	rjmp	.+134    	; 0x15f4 <GPIO_setupPinDirection+0xc0>
    156e:	2c 81       	ldd	r18, Y+4	; 0x04
    1570:	3d 81       	ldd	r19, Y+5	; 0x05
    1572:	22 30       	cpi	r18, 0x02	; 2
    1574:	31 05       	cpc	r19, r1
    1576:	2c f4       	brge	.+10     	; 0x1582 <GPIO_setupPinDirection+0x4e>
    1578:	8c 81       	ldd	r24, Y+4	; 0x04
    157a:	9d 81       	ldd	r25, Y+5	; 0x05
    157c:	00 97       	sbiw	r24, 0x00	; 0
    157e:	71 f0       	breq	.+28     	; 0x159c <GPIO_setupPinDirection+0x68>
    1580:	bc c0       	rjmp	.+376    	; 0x16fa <GPIO_setupPinDirection+0x1c6>
    1582:	2c 81       	ldd	r18, Y+4	; 0x04
    1584:	3d 81       	ldd	r19, Y+5	; 0x05
    1586:	22 30       	cpi	r18, 0x02	; 2
    1588:	31 05       	cpc	r19, r1
    158a:	09 f4       	brne	.+2      	; 0x158e <GPIO_setupPinDirection+0x5a>
    158c:	5f c0       	rjmp	.+190    	; 0x164c <GPIO_setupPinDirection+0x118>
    158e:	8c 81       	ldd	r24, Y+4	; 0x04
    1590:	9d 81       	ldd	r25, Y+5	; 0x05
    1592:	83 30       	cpi	r24, 0x03	; 3
    1594:	91 05       	cpc	r25, r1
    1596:	09 f4       	brne	.+2      	; 0x159a <GPIO_setupPinDirection+0x66>
    1598:	85 c0       	rjmp	.+266    	; 0x16a4 <GPIO_setupPinDirection+0x170>
    159a:	af c0       	rjmp	.+350    	; 0x16fa <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    159c:	8b 81       	ldd	r24, Y+3	; 0x03
    159e:	81 30       	cpi	r24, 0x01	; 1
    15a0:	a1 f4       	brne	.+40     	; 0x15ca <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    15a2:	aa e3       	ldi	r26, 0x3A	; 58
    15a4:	b0 e0       	ldi	r27, 0x00	; 0
    15a6:	ea e3       	ldi	r30, 0x3A	; 58
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	80 81       	ld	r24, Z
    15ac:	48 2f       	mov	r20, r24
    15ae:	8a 81       	ldd	r24, Y+2	; 0x02
    15b0:	28 2f       	mov	r18, r24
    15b2:	30 e0       	ldi	r19, 0x00	; 0
    15b4:	81 e0       	ldi	r24, 0x01	; 1
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	02 2e       	mov	r0, r18
    15ba:	02 c0       	rjmp	.+4      	; 0x15c0 <GPIO_setupPinDirection+0x8c>
    15bc:	88 0f       	add	r24, r24
    15be:	99 1f       	adc	r25, r25
    15c0:	0a 94       	dec	r0
    15c2:	e2 f7       	brpl	.-8      	; 0x15bc <GPIO_setupPinDirection+0x88>
    15c4:	84 2b       	or	r24, r20
    15c6:	8c 93       	st	X, r24
    15c8:	98 c0       	rjmp	.+304    	; 0x16fa <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    15ca:	aa e3       	ldi	r26, 0x3A	; 58
    15cc:	b0 e0       	ldi	r27, 0x00	; 0
    15ce:	ea e3       	ldi	r30, 0x3A	; 58
    15d0:	f0 e0       	ldi	r31, 0x00	; 0
    15d2:	80 81       	ld	r24, Z
    15d4:	48 2f       	mov	r20, r24
    15d6:	8a 81       	ldd	r24, Y+2	; 0x02
    15d8:	28 2f       	mov	r18, r24
    15da:	30 e0       	ldi	r19, 0x00	; 0
    15dc:	81 e0       	ldi	r24, 0x01	; 1
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	02 2e       	mov	r0, r18
    15e2:	02 c0       	rjmp	.+4      	; 0x15e8 <GPIO_setupPinDirection+0xb4>
    15e4:	88 0f       	add	r24, r24
    15e6:	99 1f       	adc	r25, r25
    15e8:	0a 94       	dec	r0
    15ea:	e2 f7       	brpl	.-8      	; 0x15e4 <GPIO_setupPinDirection+0xb0>
    15ec:	80 95       	com	r24
    15ee:	84 23       	and	r24, r20
    15f0:	8c 93       	st	X, r24
    15f2:	83 c0       	rjmp	.+262    	; 0x16fa <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    15f4:	8b 81       	ldd	r24, Y+3	; 0x03
    15f6:	81 30       	cpi	r24, 0x01	; 1
    15f8:	a1 f4       	brne	.+40     	; 0x1622 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    15fa:	a7 e3       	ldi	r26, 0x37	; 55
    15fc:	b0 e0       	ldi	r27, 0x00	; 0
    15fe:	e7 e3       	ldi	r30, 0x37	; 55
    1600:	f0 e0       	ldi	r31, 0x00	; 0
    1602:	80 81       	ld	r24, Z
    1604:	48 2f       	mov	r20, r24
    1606:	8a 81       	ldd	r24, Y+2	; 0x02
    1608:	28 2f       	mov	r18, r24
    160a:	30 e0       	ldi	r19, 0x00	; 0
    160c:	81 e0       	ldi	r24, 0x01	; 1
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	02 2e       	mov	r0, r18
    1612:	02 c0       	rjmp	.+4      	; 0x1618 <GPIO_setupPinDirection+0xe4>
    1614:	88 0f       	add	r24, r24
    1616:	99 1f       	adc	r25, r25
    1618:	0a 94       	dec	r0
    161a:	e2 f7       	brpl	.-8      	; 0x1614 <GPIO_setupPinDirection+0xe0>
    161c:	84 2b       	or	r24, r20
    161e:	8c 93       	st	X, r24
    1620:	6c c0       	rjmp	.+216    	; 0x16fa <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1622:	a7 e3       	ldi	r26, 0x37	; 55
    1624:	b0 e0       	ldi	r27, 0x00	; 0
    1626:	e7 e3       	ldi	r30, 0x37	; 55
    1628:	f0 e0       	ldi	r31, 0x00	; 0
    162a:	80 81       	ld	r24, Z
    162c:	48 2f       	mov	r20, r24
    162e:	8a 81       	ldd	r24, Y+2	; 0x02
    1630:	28 2f       	mov	r18, r24
    1632:	30 e0       	ldi	r19, 0x00	; 0
    1634:	81 e0       	ldi	r24, 0x01	; 1
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	02 2e       	mov	r0, r18
    163a:	02 c0       	rjmp	.+4      	; 0x1640 <GPIO_setupPinDirection+0x10c>
    163c:	88 0f       	add	r24, r24
    163e:	99 1f       	adc	r25, r25
    1640:	0a 94       	dec	r0
    1642:	e2 f7       	brpl	.-8      	; 0x163c <GPIO_setupPinDirection+0x108>
    1644:	80 95       	com	r24
    1646:	84 23       	and	r24, r20
    1648:	8c 93       	st	X, r24
    164a:	57 c0       	rjmp	.+174    	; 0x16fa <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    164c:	8b 81       	ldd	r24, Y+3	; 0x03
    164e:	81 30       	cpi	r24, 0x01	; 1
    1650:	a1 f4       	brne	.+40     	; 0x167a <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1652:	a4 e3       	ldi	r26, 0x34	; 52
    1654:	b0 e0       	ldi	r27, 0x00	; 0
    1656:	e4 e3       	ldi	r30, 0x34	; 52
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	80 81       	ld	r24, Z
    165c:	48 2f       	mov	r20, r24
    165e:	8a 81       	ldd	r24, Y+2	; 0x02
    1660:	28 2f       	mov	r18, r24
    1662:	30 e0       	ldi	r19, 0x00	; 0
    1664:	81 e0       	ldi	r24, 0x01	; 1
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	02 2e       	mov	r0, r18
    166a:	02 c0       	rjmp	.+4      	; 0x1670 <GPIO_setupPinDirection+0x13c>
    166c:	88 0f       	add	r24, r24
    166e:	99 1f       	adc	r25, r25
    1670:	0a 94       	dec	r0
    1672:	e2 f7       	brpl	.-8      	; 0x166c <GPIO_setupPinDirection+0x138>
    1674:	84 2b       	or	r24, r20
    1676:	8c 93       	st	X, r24
    1678:	40 c0       	rjmp	.+128    	; 0x16fa <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    167a:	a4 e3       	ldi	r26, 0x34	; 52
    167c:	b0 e0       	ldi	r27, 0x00	; 0
    167e:	e4 e3       	ldi	r30, 0x34	; 52
    1680:	f0 e0       	ldi	r31, 0x00	; 0
    1682:	80 81       	ld	r24, Z
    1684:	48 2f       	mov	r20, r24
    1686:	8a 81       	ldd	r24, Y+2	; 0x02
    1688:	28 2f       	mov	r18, r24
    168a:	30 e0       	ldi	r19, 0x00	; 0
    168c:	81 e0       	ldi	r24, 0x01	; 1
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	02 2e       	mov	r0, r18
    1692:	02 c0       	rjmp	.+4      	; 0x1698 <GPIO_setupPinDirection+0x164>
    1694:	88 0f       	add	r24, r24
    1696:	99 1f       	adc	r25, r25
    1698:	0a 94       	dec	r0
    169a:	e2 f7       	brpl	.-8      	; 0x1694 <GPIO_setupPinDirection+0x160>
    169c:	80 95       	com	r24
    169e:	84 23       	and	r24, r20
    16a0:	8c 93       	st	X, r24
    16a2:	2b c0       	rjmp	.+86     	; 0x16fa <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    16a4:	8b 81       	ldd	r24, Y+3	; 0x03
    16a6:	81 30       	cpi	r24, 0x01	; 1
    16a8:	a1 f4       	brne	.+40     	; 0x16d2 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    16aa:	a1 e3       	ldi	r26, 0x31	; 49
    16ac:	b0 e0       	ldi	r27, 0x00	; 0
    16ae:	e1 e3       	ldi	r30, 0x31	; 49
    16b0:	f0 e0       	ldi	r31, 0x00	; 0
    16b2:	80 81       	ld	r24, Z
    16b4:	48 2f       	mov	r20, r24
    16b6:	8a 81       	ldd	r24, Y+2	; 0x02
    16b8:	28 2f       	mov	r18, r24
    16ba:	30 e0       	ldi	r19, 0x00	; 0
    16bc:	81 e0       	ldi	r24, 0x01	; 1
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	02 2e       	mov	r0, r18
    16c2:	02 c0       	rjmp	.+4      	; 0x16c8 <GPIO_setupPinDirection+0x194>
    16c4:	88 0f       	add	r24, r24
    16c6:	99 1f       	adc	r25, r25
    16c8:	0a 94       	dec	r0
    16ca:	e2 f7       	brpl	.-8      	; 0x16c4 <GPIO_setupPinDirection+0x190>
    16cc:	84 2b       	or	r24, r20
    16ce:	8c 93       	st	X, r24
    16d0:	14 c0       	rjmp	.+40     	; 0x16fa <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    16d2:	a1 e3       	ldi	r26, 0x31	; 49
    16d4:	b0 e0       	ldi	r27, 0x00	; 0
    16d6:	e1 e3       	ldi	r30, 0x31	; 49
    16d8:	f0 e0       	ldi	r31, 0x00	; 0
    16da:	80 81       	ld	r24, Z
    16dc:	48 2f       	mov	r20, r24
    16de:	8a 81       	ldd	r24, Y+2	; 0x02
    16e0:	28 2f       	mov	r18, r24
    16e2:	30 e0       	ldi	r19, 0x00	; 0
    16e4:	81 e0       	ldi	r24, 0x01	; 1
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	02 2e       	mov	r0, r18
    16ea:	02 c0       	rjmp	.+4      	; 0x16f0 <GPIO_setupPinDirection+0x1bc>
    16ec:	88 0f       	add	r24, r24
    16ee:	99 1f       	adc	r25, r25
    16f0:	0a 94       	dec	r0
    16f2:	e2 f7       	brpl	.-8      	; 0x16ec <GPIO_setupPinDirection+0x1b8>
    16f4:	80 95       	com	r24
    16f6:	84 23       	and	r24, r20
    16f8:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    16fa:	0f 90       	pop	r0
    16fc:	0f 90       	pop	r0
    16fe:	0f 90       	pop	r0
    1700:	0f 90       	pop	r0
    1702:	0f 90       	pop	r0
    1704:	cf 91       	pop	r28
    1706:	df 91       	pop	r29
    1708:	08 95       	ret

0000170a <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    170a:	df 93       	push	r29
    170c:	cf 93       	push	r28
    170e:	00 d0       	rcall	.+0      	; 0x1710 <GPIO_writePin+0x6>
    1710:	00 d0       	rcall	.+0      	; 0x1712 <GPIO_writePin+0x8>
    1712:	0f 92       	push	r0
    1714:	cd b7       	in	r28, 0x3d	; 61
    1716:	de b7       	in	r29, 0x3e	; 62
    1718:	89 83       	std	Y+1, r24	; 0x01
    171a:	6a 83       	std	Y+2, r22	; 0x02
    171c:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    171e:	8a 81       	ldd	r24, Y+2	; 0x02
    1720:	88 30       	cpi	r24, 0x08	; 8
    1722:	08 f0       	brcs	.+2      	; 0x1726 <GPIO_writePin+0x1c>
    1724:	d5 c0       	rjmp	.+426    	; 0x18d0 <GPIO_writePin+0x1c6>
    1726:	89 81       	ldd	r24, Y+1	; 0x01
    1728:	84 30       	cpi	r24, 0x04	; 4
    172a:	08 f0       	brcs	.+2      	; 0x172e <GPIO_writePin+0x24>
    172c:	d1 c0       	rjmp	.+418    	; 0x18d0 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    172e:	89 81       	ldd	r24, Y+1	; 0x01
    1730:	28 2f       	mov	r18, r24
    1732:	30 e0       	ldi	r19, 0x00	; 0
    1734:	3d 83       	std	Y+5, r19	; 0x05
    1736:	2c 83       	std	Y+4, r18	; 0x04
    1738:	8c 81       	ldd	r24, Y+4	; 0x04
    173a:	9d 81       	ldd	r25, Y+5	; 0x05
    173c:	81 30       	cpi	r24, 0x01	; 1
    173e:	91 05       	cpc	r25, r1
    1740:	09 f4       	brne	.+2      	; 0x1744 <GPIO_writePin+0x3a>
    1742:	43 c0       	rjmp	.+134    	; 0x17ca <GPIO_writePin+0xc0>
    1744:	2c 81       	ldd	r18, Y+4	; 0x04
    1746:	3d 81       	ldd	r19, Y+5	; 0x05
    1748:	22 30       	cpi	r18, 0x02	; 2
    174a:	31 05       	cpc	r19, r1
    174c:	2c f4       	brge	.+10     	; 0x1758 <GPIO_writePin+0x4e>
    174e:	8c 81       	ldd	r24, Y+4	; 0x04
    1750:	9d 81       	ldd	r25, Y+5	; 0x05
    1752:	00 97       	sbiw	r24, 0x00	; 0
    1754:	71 f0       	breq	.+28     	; 0x1772 <GPIO_writePin+0x68>
    1756:	bc c0       	rjmp	.+376    	; 0x18d0 <GPIO_writePin+0x1c6>
    1758:	2c 81       	ldd	r18, Y+4	; 0x04
    175a:	3d 81       	ldd	r19, Y+5	; 0x05
    175c:	22 30       	cpi	r18, 0x02	; 2
    175e:	31 05       	cpc	r19, r1
    1760:	09 f4       	brne	.+2      	; 0x1764 <GPIO_writePin+0x5a>
    1762:	5f c0       	rjmp	.+190    	; 0x1822 <GPIO_writePin+0x118>
    1764:	8c 81       	ldd	r24, Y+4	; 0x04
    1766:	9d 81       	ldd	r25, Y+5	; 0x05
    1768:	83 30       	cpi	r24, 0x03	; 3
    176a:	91 05       	cpc	r25, r1
    176c:	09 f4       	brne	.+2      	; 0x1770 <GPIO_writePin+0x66>
    176e:	85 c0       	rjmp	.+266    	; 0x187a <GPIO_writePin+0x170>
    1770:	af c0       	rjmp	.+350    	; 0x18d0 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1772:	8b 81       	ldd	r24, Y+3	; 0x03
    1774:	81 30       	cpi	r24, 0x01	; 1
    1776:	a1 f4       	brne	.+40     	; 0x17a0 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1778:	ab e3       	ldi	r26, 0x3B	; 59
    177a:	b0 e0       	ldi	r27, 0x00	; 0
    177c:	eb e3       	ldi	r30, 0x3B	; 59
    177e:	f0 e0       	ldi	r31, 0x00	; 0
    1780:	80 81       	ld	r24, Z
    1782:	48 2f       	mov	r20, r24
    1784:	8a 81       	ldd	r24, Y+2	; 0x02
    1786:	28 2f       	mov	r18, r24
    1788:	30 e0       	ldi	r19, 0x00	; 0
    178a:	81 e0       	ldi	r24, 0x01	; 1
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	02 2e       	mov	r0, r18
    1790:	02 c0       	rjmp	.+4      	; 0x1796 <GPIO_writePin+0x8c>
    1792:	88 0f       	add	r24, r24
    1794:	99 1f       	adc	r25, r25
    1796:	0a 94       	dec	r0
    1798:	e2 f7       	brpl	.-8      	; 0x1792 <GPIO_writePin+0x88>
    179a:	84 2b       	or	r24, r20
    179c:	8c 93       	st	X, r24
    179e:	98 c0       	rjmp	.+304    	; 0x18d0 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    17a0:	ab e3       	ldi	r26, 0x3B	; 59
    17a2:	b0 e0       	ldi	r27, 0x00	; 0
    17a4:	eb e3       	ldi	r30, 0x3B	; 59
    17a6:	f0 e0       	ldi	r31, 0x00	; 0
    17a8:	80 81       	ld	r24, Z
    17aa:	48 2f       	mov	r20, r24
    17ac:	8a 81       	ldd	r24, Y+2	; 0x02
    17ae:	28 2f       	mov	r18, r24
    17b0:	30 e0       	ldi	r19, 0x00	; 0
    17b2:	81 e0       	ldi	r24, 0x01	; 1
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	02 2e       	mov	r0, r18
    17b8:	02 c0       	rjmp	.+4      	; 0x17be <GPIO_writePin+0xb4>
    17ba:	88 0f       	add	r24, r24
    17bc:	99 1f       	adc	r25, r25
    17be:	0a 94       	dec	r0
    17c0:	e2 f7       	brpl	.-8      	; 0x17ba <GPIO_writePin+0xb0>
    17c2:	80 95       	com	r24
    17c4:	84 23       	and	r24, r20
    17c6:	8c 93       	st	X, r24
    17c8:	83 c0       	rjmp	.+262    	; 0x18d0 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    17ca:	8b 81       	ldd	r24, Y+3	; 0x03
    17cc:	81 30       	cpi	r24, 0x01	; 1
    17ce:	a1 f4       	brne	.+40     	; 0x17f8 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    17d0:	a8 e3       	ldi	r26, 0x38	; 56
    17d2:	b0 e0       	ldi	r27, 0x00	; 0
    17d4:	e8 e3       	ldi	r30, 0x38	; 56
    17d6:	f0 e0       	ldi	r31, 0x00	; 0
    17d8:	80 81       	ld	r24, Z
    17da:	48 2f       	mov	r20, r24
    17dc:	8a 81       	ldd	r24, Y+2	; 0x02
    17de:	28 2f       	mov	r18, r24
    17e0:	30 e0       	ldi	r19, 0x00	; 0
    17e2:	81 e0       	ldi	r24, 0x01	; 1
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	02 2e       	mov	r0, r18
    17e8:	02 c0       	rjmp	.+4      	; 0x17ee <GPIO_writePin+0xe4>
    17ea:	88 0f       	add	r24, r24
    17ec:	99 1f       	adc	r25, r25
    17ee:	0a 94       	dec	r0
    17f0:	e2 f7       	brpl	.-8      	; 0x17ea <GPIO_writePin+0xe0>
    17f2:	84 2b       	or	r24, r20
    17f4:	8c 93       	st	X, r24
    17f6:	6c c0       	rjmp	.+216    	; 0x18d0 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    17f8:	a8 e3       	ldi	r26, 0x38	; 56
    17fa:	b0 e0       	ldi	r27, 0x00	; 0
    17fc:	e8 e3       	ldi	r30, 0x38	; 56
    17fe:	f0 e0       	ldi	r31, 0x00	; 0
    1800:	80 81       	ld	r24, Z
    1802:	48 2f       	mov	r20, r24
    1804:	8a 81       	ldd	r24, Y+2	; 0x02
    1806:	28 2f       	mov	r18, r24
    1808:	30 e0       	ldi	r19, 0x00	; 0
    180a:	81 e0       	ldi	r24, 0x01	; 1
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	02 2e       	mov	r0, r18
    1810:	02 c0       	rjmp	.+4      	; 0x1816 <GPIO_writePin+0x10c>
    1812:	88 0f       	add	r24, r24
    1814:	99 1f       	adc	r25, r25
    1816:	0a 94       	dec	r0
    1818:	e2 f7       	brpl	.-8      	; 0x1812 <GPIO_writePin+0x108>
    181a:	80 95       	com	r24
    181c:	84 23       	and	r24, r20
    181e:	8c 93       	st	X, r24
    1820:	57 c0       	rjmp	.+174    	; 0x18d0 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1822:	8b 81       	ldd	r24, Y+3	; 0x03
    1824:	81 30       	cpi	r24, 0x01	; 1
    1826:	a1 f4       	brne	.+40     	; 0x1850 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1828:	a5 e3       	ldi	r26, 0x35	; 53
    182a:	b0 e0       	ldi	r27, 0x00	; 0
    182c:	e5 e3       	ldi	r30, 0x35	; 53
    182e:	f0 e0       	ldi	r31, 0x00	; 0
    1830:	80 81       	ld	r24, Z
    1832:	48 2f       	mov	r20, r24
    1834:	8a 81       	ldd	r24, Y+2	; 0x02
    1836:	28 2f       	mov	r18, r24
    1838:	30 e0       	ldi	r19, 0x00	; 0
    183a:	81 e0       	ldi	r24, 0x01	; 1
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	02 2e       	mov	r0, r18
    1840:	02 c0       	rjmp	.+4      	; 0x1846 <GPIO_writePin+0x13c>
    1842:	88 0f       	add	r24, r24
    1844:	99 1f       	adc	r25, r25
    1846:	0a 94       	dec	r0
    1848:	e2 f7       	brpl	.-8      	; 0x1842 <GPIO_writePin+0x138>
    184a:	84 2b       	or	r24, r20
    184c:	8c 93       	st	X, r24
    184e:	40 c0       	rjmp	.+128    	; 0x18d0 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1850:	a5 e3       	ldi	r26, 0x35	; 53
    1852:	b0 e0       	ldi	r27, 0x00	; 0
    1854:	e5 e3       	ldi	r30, 0x35	; 53
    1856:	f0 e0       	ldi	r31, 0x00	; 0
    1858:	80 81       	ld	r24, Z
    185a:	48 2f       	mov	r20, r24
    185c:	8a 81       	ldd	r24, Y+2	; 0x02
    185e:	28 2f       	mov	r18, r24
    1860:	30 e0       	ldi	r19, 0x00	; 0
    1862:	81 e0       	ldi	r24, 0x01	; 1
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	02 2e       	mov	r0, r18
    1868:	02 c0       	rjmp	.+4      	; 0x186e <GPIO_writePin+0x164>
    186a:	88 0f       	add	r24, r24
    186c:	99 1f       	adc	r25, r25
    186e:	0a 94       	dec	r0
    1870:	e2 f7       	brpl	.-8      	; 0x186a <GPIO_writePin+0x160>
    1872:	80 95       	com	r24
    1874:	84 23       	and	r24, r20
    1876:	8c 93       	st	X, r24
    1878:	2b c0       	rjmp	.+86     	; 0x18d0 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    187a:	8b 81       	ldd	r24, Y+3	; 0x03
    187c:	81 30       	cpi	r24, 0x01	; 1
    187e:	a1 f4       	brne	.+40     	; 0x18a8 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1880:	a2 e3       	ldi	r26, 0x32	; 50
    1882:	b0 e0       	ldi	r27, 0x00	; 0
    1884:	e2 e3       	ldi	r30, 0x32	; 50
    1886:	f0 e0       	ldi	r31, 0x00	; 0
    1888:	80 81       	ld	r24, Z
    188a:	48 2f       	mov	r20, r24
    188c:	8a 81       	ldd	r24, Y+2	; 0x02
    188e:	28 2f       	mov	r18, r24
    1890:	30 e0       	ldi	r19, 0x00	; 0
    1892:	81 e0       	ldi	r24, 0x01	; 1
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	02 2e       	mov	r0, r18
    1898:	02 c0       	rjmp	.+4      	; 0x189e <GPIO_writePin+0x194>
    189a:	88 0f       	add	r24, r24
    189c:	99 1f       	adc	r25, r25
    189e:	0a 94       	dec	r0
    18a0:	e2 f7       	brpl	.-8      	; 0x189a <GPIO_writePin+0x190>
    18a2:	84 2b       	or	r24, r20
    18a4:	8c 93       	st	X, r24
    18a6:	14 c0       	rjmp	.+40     	; 0x18d0 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    18a8:	a2 e3       	ldi	r26, 0x32	; 50
    18aa:	b0 e0       	ldi	r27, 0x00	; 0
    18ac:	e2 e3       	ldi	r30, 0x32	; 50
    18ae:	f0 e0       	ldi	r31, 0x00	; 0
    18b0:	80 81       	ld	r24, Z
    18b2:	48 2f       	mov	r20, r24
    18b4:	8a 81       	ldd	r24, Y+2	; 0x02
    18b6:	28 2f       	mov	r18, r24
    18b8:	30 e0       	ldi	r19, 0x00	; 0
    18ba:	81 e0       	ldi	r24, 0x01	; 1
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	02 2e       	mov	r0, r18
    18c0:	02 c0       	rjmp	.+4      	; 0x18c6 <GPIO_writePin+0x1bc>
    18c2:	88 0f       	add	r24, r24
    18c4:	99 1f       	adc	r25, r25
    18c6:	0a 94       	dec	r0
    18c8:	e2 f7       	brpl	.-8      	; 0x18c2 <GPIO_writePin+0x1b8>
    18ca:	80 95       	com	r24
    18cc:	84 23       	and	r24, r20
    18ce:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    18d0:	0f 90       	pop	r0
    18d2:	0f 90       	pop	r0
    18d4:	0f 90       	pop	r0
    18d6:	0f 90       	pop	r0
    18d8:	0f 90       	pop	r0
    18da:	cf 91       	pop	r28
    18dc:	df 91       	pop	r29
    18de:	08 95       	ret

000018e0 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    18e0:	df 93       	push	r29
    18e2:	cf 93       	push	r28
    18e4:	00 d0       	rcall	.+0      	; 0x18e6 <GPIO_readPin+0x6>
    18e6:	00 d0       	rcall	.+0      	; 0x18e8 <GPIO_readPin+0x8>
    18e8:	0f 92       	push	r0
    18ea:	cd b7       	in	r28, 0x3d	; 61
    18ec:	de b7       	in	r29, 0x3e	; 62
    18ee:	8a 83       	std	Y+2, r24	; 0x02
    18f0:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    18f2:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    18f4:	8b 81       	ldd	r24, Y+3	; 0x03
    18f6:	88 30       	cpi	r24, 0x08	; 8
    18f8:	08 f0       	brcs	.+2      	; 0x18fc <GPIO_readPin+0x1c>
    18fa:	84 c0       	rjmp	.+264    	; 0x1a04 <GPIO_readPin+0x124>
    18fc:	8a 81       	ldd	r24, Y+2	; 0x02
    18fe:	84 30       	cpi	r24, 0x04	; 4
    1900:	08 f0       	brcs	.+2      	; 0x1904 <GPIO_readPin+0x24>
    1902:	80 c0       	rjmp	.+256    	; 0x1a04 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1904:	8a 81       	ldd	r24, Y+2	; 0x02
    1906:	28 2f       	mov	r18, r24
    1908:	30 e0       	ldi	r19, 0x00	; 0
    190a:	3d 83       	std	Y+5, r19	; 0x05
    190c:	2c 83       	std	Y+4, r18	; 0x04
    190e:	4c 81       	ldd	r20, Y+4	; 0x04
    1910:	5d 81       	ldd	r21, Y+5	; 0x05
    1912:	41 30       	cpi	r20, 0x01	; 1
    1914:	51 05       	cpc	r21, r1
    1916:	79 f1       	breq	.+94     	; 0x1976 <GPIO_readPin+0x96>
    1918:	8c 81       	ldd	r24, Y+4	; 0x04
    191a:	9d 81       	ldd	r25, Y+5	; 0x05
    191c:	82 30       	cpi	r24, 0x02	; 2
    191e:	91 05       	cpc	r25, r1
    1920:	34 f4       	brge	.+12     	; 0x192e <GPIO_readPin+0x4e>
    1922:	2c 81       	ldd	r18, Y+4	; 0x04
    1924:	3d 81       	ldd	r19, Y+5	; 0x05
    1926:	21 15       	cp	r18, r1
    1928:	31 05       	cpc	r19, r1
    192a:	69 f0       	breq	.+26     	; 0x1946 <GPIO_readPin+0x66>
    192c:	6b c0       	rjmp	.+214    	; 0x1a04 <GPIO_readPin+0x124>
    192e:	4c 81       	ldd	r20, Y+4	; 0x04
    1930:	5d 81       	ldd	r21, Y+5	; 0x05
    1932:	42 30       	cpi	r20, 0x02	; 2
    1934:	51 05       	cpc	r21, r1
    1936:	b9 f1       	breq	.+110    	; 0x19a6 <GPIO_readPin+0xc6>
    1938:	8c 81       	ldd	r24, Y+4	; 0x04
    193a:	9d 81       	ldd	r25, Y+5	; 0x05
    193c:	83 30       	cpi	r24, 0x03	; 3
    193e:	91 05       	cpc	r25, r1
    1940:	09 f4       	brne	.+2      	; 0x1944 <GPIO_readPin+0x64>
    1942:	49 c0       	rjmp	.+146    	; 0x19d6 <GPIO_readPin+0xf6>
    1944:	5f c0       	rjmp	.+190    	; 0x1a04 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1946:	e9 e3       	ldi	r30, 0x39	; 57
    1948:	f0 e0       	ldi	r31, 0x00	; 0
    194a:	80 81       	ld	r24, Z
    194c:	28 2f       	mov	r18, r24
    194e:	30 e0       	ldi	r19, 0x00	; 0
    1950:	8b 81       	ldd	r24, Y+3	; 0x03
    1952:	88 2f       	mov	r24, r24
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	a9 01       	movw	r20, r18
    1958:	02 c0       	rjmp	.+4      	; 0x195e <GPIO_readPin+0x7e>
    195a:	55 95       	asr	r21
    195c:	47 95       	ror	r20
    195e:	8a 95       	dec	r24
    1960:	e2 f7       	brpl	.-8      	; 0x195a <GPIO_readPin+0x7a>
    1962:	ca 01       	movw	r24, r20
    1964:	81 70       	andi	r24, 0x01	; 1
    1966:	90 70       	andi	r25, 0x00	; 0
    1968:	88 23       	and	r24, r24
    196a:	19 f0       	breq	.+6      	; 0x1972 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    196c:	81 e0       	ldi	r24, 0x01	; 1
    196e:	89 83       	std	Y+1, r24	; 0x01
    1970:	49 c0       	rjmp	.+146    	; 0x1a04 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1972:	19 82       	std	Y+1, r1	; 0x01
    1974:	47 c0       	rjmp	.+142    	; 0x1a04 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1976:	e6 e3       	ldi	r30, 0x36	; 54
    1978:	f0 e0       	ldi	r31, 0x00	; 0
    197a:	80 81       	ld	r24, Z
    197c:	28 2f       	mov	r18, r24
    197e:	30 e0       	ldi	r19, 0x00	; 0
    1980:	8b 81       	ldd	r24, Y+3	; 0x03
    1982:	88 2f       	mov	r24, r24
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	a9 01       	movw	r20, r18
    1988:	02 c0       	rjmp	.+4      	; 0x198e <GPIO_readPin+0xae>
    198a:	55 95       	asr	r21
    198c:	47 95       	ror	r20
    198e:	8a 95       	dec	r24
    1990:	e2 f7       	brpl	.-8      	; 0x198a <GPIO_readPin+0xaa>
    1992:	ca 01       	movw	r24, r20
    1994:	81 70       	andi	r24, 0x01	; 1
    1996:	90 70       	andi	r25, 0x00	; 0
    1998:	88 23       	and	r24, r24
    199a:	19 f0       	breq	.+6      	; 0x19a2 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    199c:	81 e0       	ldi	r24, 0x01	; 1
    199e:	89 83       	std	Y+1, r24	; 0x01
    19a0:	31 c0       	rjmp	.+98     	; 0x1a04 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    19a2:	19 82       	std	Y+1, r1	; 0x01
    19a4:	2f c0       	rjmp	.+94     	; 0x1a04 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    19a6:	e3 e3       	ldi	r30, 0x33	; 51
    19a8:	f0 e0       	ldi	r31, 0x00	; 0
    19aa:	80 81       	ld	r24, Z
    19ac:	28 2f       	mov	r18, r24
    19ae:	30 e0       	ldi	r19, 0x00	; 0
    19b0:	8b 81       	ldd	r24, Y+3	; 0x03
    19b2:	88 2f       	mov	r24, r24
    19b4:	90 e0       	ldi	r25, 0x00	; 0
    19b6:	a9 01       	movw	r20, r18
    19b8:	02 c0       	rjmp	.+4      	; 0x19be <GPIO_readPin+0xde>
    19ba:	55 95       	asr	r21
    19bc:	47 95       	ror	r20
    19be:	8a 95       	dec	r24
    19c0:	e2 f7       	brpl	.-8      	; 0x19ba <GPIO_readPin+0xda>
    19c2:	ca 01       	movw	r24, r20
    19c4:	81 70       	andi	r24, 0x01	; 1
    19c6:	90 70       	andi	r25, 0x00	; 0
    19c8:	88 23       	and	r24, r24
    19ca:	19 f0       	breq	.+6      	; 0x19d2 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    19cc:	81 e0       	ldi	r24, 0x01	; 1
    19ce:	89 83       	std	Y+1, r24	; 0x01
    19d0:	19 c0       	rjmp	.+50     	; 0x1a04 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    19d2:	19 82       	std	Y+1, r1	; 0x01
    19d4:	17 c0       	rjmp	.+46     	; 0x1a04 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    19d6:	e0 e3       	ldi	r30, 0x30	; 48
    19d8:	f0 e0       	ldi	r31, 0x00	; 0
    19da:	80 81       	ld	r24, Z
    19dc:	28 2f       	mov	r18, r24
    19de:	30 e0       	ldi	r19, 0x00	; 0
    19e0:	8b 81       	ldd	r24, Y+3	; 0x03
    19e2:	88 2f       	mov	r24, r24
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	a9 01       	movw	r20, r18
    19e8:	02 c0       	rjmp	.+4      	; 0x19ee <GPIO_readPin+0x10e>
    19ea:	55 95       	asr	r21
    19ec:	47 95       	ror	r20
    19ee:	8a 95       	dec	r24
    19f0:	e2 f7       	brpl	.-8      	; 0x19ea <GPIO_readPin+0x10a>
    19f2:	ca 01       	movw	r24, r20
    19f4:	81 70       	andi	r24, 0x01	; 1
    19f6:	90 70       	andi	r25, 0x00	; 0
    19f8:	88 23       	and	r24, r24
    19fa:	19 f0       	breq	.+6      	; 0x1a02 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    19fc:	81 e0       	ldi	r24, 0x01	; 1
    19fe:	89 83       	std	Y+1, r24	; 0x01
    1a00:	01 c0       	rjmp	.+2      	; 0x1a04 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1a02:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1a04:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a06:	0f 90       	pop	r0
    1a08:	0f 90       	pop	r0
    1a0a:	0f 90       	pop	r0
    1a0c:	0f 90       	pop	r0
    1a0e:	0f 90       	pop	r0
    1a10:	cf 91       	pop	r28
    1a12:	df 91       	pop	r29
    1a14:	08 95       	ret

00001a16 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1a16:	df 93       	push	r29
    1a18:	cf 93       	push	r28
    1a1a:	00 d0       	rcall	.+0      	; 0x1a1c <GPIO_setupPortDirection+0x6>
    1a1c:	00 d0       	rcall	.+0      	; 0x1a1e <GPIO_setupPortDirection+0x8>
    1a1e:	cd b7       	in	r28, 0x3d	; 61
    1a20:	de b7       	in	r29, 0x3e	; 62
    1a22:	89 83       	std	Y+1, r24	; 0x01
    1a24:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1a26:	89 81       	ldd	r24, Y+1	; 0x01
    1a28:	84 30       	cpi	r24, 0x04	; 4
    1a2a:	90 f5       	brcc	.+100    	; 0x1a90 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1a2c:	89 81       	ldd	r24, Y+1	; 0x01
    1a2e:	28 2f       	mov	r18, r24
    1a30:	30 e0       	ldi	r19, 0x00	; 0
    1a32:	3c 83       	std	Y+4, r19	; 0x04
    1a34:	2b 83       	std	Y+3, r18	; 0x03
    1a36:	8b 81       	ldd	r24, Y+3	; 0x03
    1a38:	9c 81       	ldd	r25, Y+4	; 0x04
    1a3a:	81 30       	cpi	r24, 0x01	; 1
    1a3c:	91 05       	cpc	r25, r1
    1a3e:	d1 f0       	breq	.+52     	; 0x1a74 <GPIO_setupPortDirection+0x5e>
    1a40:	2b 81       	ldd	r18, Y+3	; 0x03
    1a42:	3c 81       	ldd	r19, Y+4	; 0x04
    1a44:	22 30       	cpi	r18, 0x02	; 2
    1a46:	31 05       	cpc	r19, r1
    1a48:	2c f4       	brge	.+10     	; 0x1a54 <GPIO_setupPortDirection+0x3e>
    1a4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a4c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a4e:	00 97       	sbiw	r24, 0x00	; 0
    1a50:	61 f0       	breq	.+24     	; 0x1a6a <GPIO_setupPortDirection+0x54>
    1a52:	1e c0       	rjmp	.+60     	; 0x1a90 <GPIO_setupPortDirection+0x7a>
    1a54:	2b 81       	ldd	r18, Y+3	; 0x03
    1a56:	3c 81       	ldd	r19, Y+4	; 0x04
    1a58:	22 30       	cpi	r18, 0x02	; 2
    1a5a:	31 05       	cpc	r19, r1
    1a5c:	81 f0       	breq	.+32     	; 0x1a7e <GPIO_setupPortDirection+0x68>
    1a5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a60:	9c 81       	ldd	r25, Y+4	; 0x04
    1a62:	83 30       	cpi	r24, 0x03	; 3
    1a64:	91 05       	cpc	r25, r1
    1a66:	81 f0       	breq	.+32     	; 0x1a88 <GPIO_setupPortDirection+0x72>
    1a68:	13 c0       	rjmp	.+38     	; 0x1a90 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1a6a:	ea e3       	ldi	r30, 0x3A	; 58
    1a6c:	f0 e0       	ldi	r31, 0x00	; 0
    1a6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a70:	80 83       	st	Z, r24
    1a72:	0e c0       	rjmp	.+28     	; 0x1a90 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1a74:	e7 e3       	ldi	r30, 0x37	; 55
    1a76:	f0 e0       	ldi	r31, 0x00	; 0
    1a78:	8a 81       	ldd	r24, Y+2	; 0x02
    1a7a:	80 83       	st	Z, r24
    1a7c:	09 c0       	rjmp	.+18     	; 0x1a90 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1a7e:	e4 e3       	ldi	r30, 0x34	; 52
    1a80:	f0 e0       	ldi	r31, 0x00	; 0
    1a82:	8a 81       	ldd	r24, Y+2	; 0x02
    1a84:	80 83       	st	Z, r24
    1a86:	04 c0       	rjmp	.+8      	; 0x1a90 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1a88:	e1 e3       	ldi	r30, 0x31	; 49
    1a8a:	f0 e0       	ldi	r31, 0x00	; 0
    1a8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a8e:	80 83       	st	Z, r24
			break;
		}
	}
}
    1a90:	0f 90       	pop	r0
    1a92:	0f 90       	pop	r0
    1a94:	0f 90       	pop	r0
    1a96:	0f 90       	pop	r0
    1a98:	cf 91       	pop	r28
    1a9a:	df 91       	pop	r29
    1a9c:	08 95       	ret

00001a9e <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1a9e:	df 93       	push	r29
    1aa0:	cf 93       	push	r28
    1aa2:	00 d0       	rcall	.+0      	; 0x1aa4 <GPIO_writePort+0x6>
    1aa4:	00 d0       	rcall	.+0      	; 0x1aa6 <GPIO_writePort+0x8>
    1aa6:	cd b7       	in	r28, 0x3d	; 61
    1aa8:	de b7       	in	r29, 0x3e	; 62
    1aaa:	89 83       	std	Y+1, r24	; 0x01
    1aac:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1aae:	89 81       	ldd	r24, Y+1	; 0x01
    1ab0:	84 30       	cpi	r24, 0x04	; 4
    1ab2:	90 f5       	brcc	.+100    	; 0x1b18 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1ab4:	89 81       	ldd	r24, Y+1	; 0x01
    1ab6:	28 2f       	mov	r18, r24
    1ab8:	30 e0       	ldi	r19, 0x00	; 0
    1aba:	3c 83       	std	Y+4, r19	; 0x04
    1abc:	2b 83       	std	Y+3, r18	; 0x03
    1abe:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ac2:	81 30       	cpi	r24, 0x01	; 1
    1ac4:	91 05       	cpc	r25, r1
    1ac6:	d1 f0       	breq	.+52     	; 0x1afc <GPIO_writePort+0x5e>
    1ac8:	2b 81       	ldd	r18, Y+3	; 0x03
    1aca:	3c 81       	ldd	r19, Y+4	; 0x04
    1acc:	22 30       	cpi	r18, 0x02	; 2
    1ace:	31 05       	cpc	r19, r1
    1ad0:	2c f4       	brge	.+10     	; 0x1adc <GPIO_writePort+0x3e>
    1ad2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ad6:	00 97       	sbiw	r24, 0x00	; 0
    1ad8:	61 f0       	breq	.+24     	; 0x1af2 <GPIO_writePort+0x54>
    1ada:	1e c0       	rjmp	.+60     	; 0x1b18 <GPIO_writePort+0x7a>
    1adc:	2b 81       	ldd	r18, Y+3	; 0x03
    1ade:	3c 81       	ldd	r19, Y+4	; 0x04
    1ae0:	22 30       	cpi	r18, 0x02	; 2
    1ae2:	31 05       	cpc	r19, r1
    1ae4:	81 f0       	breq	.+32     	; 0x1b06 <GPIO_writePort+0x68>
    1ae6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae8:	9c 81       	ldd	r25, Y+4	; 0x04
    1aea:	83 30       	cpi	r24, 0x03	; 3
    1aec:	91 05       	cpc	r25, r1
    1aee:	81 f0       	breq	.+32     	; 0x1b10 <GPIO_writePort+0x72>
    1af0:	13 c0       	rjmp	.+38     	; 0x1b18 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1af2:	eb e3       	ldi	r30, 0x3B	; 59
    1af4:	f0 e0       	ldi	r31, 0x00	; 0
    1af6:	8a 81       	ldd	r24, Y+2	; 0x02
    1af8:	80 83       	st	Z, r24
    1afa:	0e c0       	rjmp	.+28     	; 0x1b18 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1afc:	e8 e3       	ldi	r30, 0x38	; 56
    1afe:	f0 e0       	ldi	r31, 0x00	; 0
    1b00:	8a 81       	ldd	r24, Y+2	; 0x02
    1b02:	80 83       	st	Z, r24
    1b04:	09 c0       	rjmp	.+18     	; 0x1b18 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1b06:	e5 e3       	ldi	r30, 0x35	; 53
    1b08:	f0 e0       	ldi	r31, 0x00	; 0
    1b0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b0c:	80 83       	st	Z, r24
    1b0e:	04 c0       	rjmp	.+8      	; 0x1b18 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1b10:	e2 e3       	ldi	r30, 0x32	; 50
    1b12:	f0 e0       	ldi	r31, 0x00	; 0
    1b14:	8a 81       	ldd	r24, Y+2	; 0x02
    1b16:	80 83       	st	Z, r24
			break;
		}
	}
}
    1b18:	0f 90       	pop	r0
    1b1a:	0f 90       	pop	r0
    1b1c:	0f 90       	pop	r0
    1b1e:	0f 90       	pop	r0
    1b20:	cf 91       	pop	r28
    1b22:	df 91       	pop	r29
    1b24:	08 95       	ret

00001b26 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1b26:	df 93       	push	r29
    1b28:	cf 93       	push	r28
    1b2a:	00 d0       	rcall	.+0      	; 0x1b2c <GPIO_readPort+0x6>
    1b2c:	00 d0       	rcall	.+0      	; 0x1b2e <GPIO_readPort+0x8>
    1b2e:	cd b7       	in	r28, 0x3d	; 61
    1b30:	de b7       	in	r29, 0x3e	; 62
    1b32:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1b34:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1b36:	8a 81       	ldd	r24, Y+2	; 0x02
    1b38:	84 30       	cpi	r24, 0x04	; 4
    1b3a:	90 f5       	brcc	.+100    	; 0x1ba0 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1b3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3e:	28 2f       	mov	r18, r24
    1b40:	30 e0       	ldi	r19, 0x00	; 0
    1b42:	3c 83       	std	Y+4, r19	; 0x04
    1b44:	2b 83       	std	Y+3, r18	; 0x03
    1b46:	8b 81       	ldd	r24, Y+3	; 0x03
    1b48:	9c 81       	ldd	r25, Y+4	; 0x04
    1b4a:	81 30       	cpi	r24, 0x01	; 1
    1b4c:	91 05       	cpc	r25, r1
    1b4e:	d1 f0       	breq	.+52     	; 0x1b84 <GPIO_readPort+0x5e>
    1b50:	2b 81       	ldd	r18, Y+3	; 0x03
    1b52:	3c 81       	ldd	r19, Y+4	; 0x04
    1b54:	22 30       	cpi	r18, 0x02	; 2
    1b56:	31 05       	cpc	r19, r1
    1b58:	2c f4       	brge	.+10     	; 0x1b64 <GPIO_readPort+0x3e>
    1b5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b5e:	00 97       	sbiw	r24, 0x00	; 0
    1b60:	61 f0       	breq	.+24     	; 0x1b7a <GPIO_readPort+0x54>
    1b62:	1e c0       	rjmp	.+60     	; 0x1ba0 <GPIO_readPort+0x7a>
    1b64:	2b 81       	ldd	r18, Y+3	; 0x03
    1b66:	3c 81       	ldd	r19, Y+4	; 0x04
    1b68:	22 30       	cpi	r18, 0x02	; 2
    1b6a:	31 05       	cpc	r19, r1
    1b6c:	81 f0       	breq	.+32     	; 0x1b8e <GPIO_readPort+0x68>
    1b6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b70:	9c 81       	ldd	r25, Y+4	; 0x04
    1b72:	83 30       	cpi	r24, 0x03	; 3
    1b74:	91 05       	cpc	r25, r1
    1b76:	81 f0       	breq	.+32     	; 0x1b98 <GPIO_readPort+0x72>
    1b78:	13 c0       	rjmp	.+38     	; 0x1ba0 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1b7a:	e9 e3       	ldi	r30, 0x39	; 57
    1b7c:	f0 e0       	ldi	r31, 0x00	; 0
    1b7e:	80 81       	ld	r24, Z
    1b80:	89 83       	std	Y+1, r24	; 0x01
    1b82:	0e c0       	rjmp	.+28     	; 0x1ba0 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1b84:	e6 e3       	ldi	r30, 0x36	; 54
    1b86:	f0 e0       	ldi	r31, 0x00	; 0
    1b88:	80 81       	ld	r24, Z
    1b8a:	89 83       	std	Y+1, r24	; 0x01
    1b8c:	09 c0       	rjmp	.+18     	; 0x1ba0 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1b8e:	e3 e3       	ldi	r30, 0x33	; 51
    1b90:	f0 e0       	ldi	r31, 0x00	; 0
    1b92:	80 81       	ld	r24, Z
    1b94:	89 83       	std	Y+1, r24	; 0x01
    1b96:	04 c0       	rjmp	.+8      	; 0x1ba0 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1b98:	e0 e3       	ldi	r30, 0x30	; 48
    1b9a:	f0 e0       	ldi	r31, 0x00	; 0
    1b9c:	80 81       	ld	r24, Z
    1b9e:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1ba0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ba2:	0f 90       	pop	r0
    1ba4:	0f 90       	pop	r0
    1ba6:	0f 90       	pop	r0
    1ba8:	0f 90       	pop	r0
    1baa:	cf 91       	pop	r28
    1bac:	df 91       	pop	r29
    1bae:	08 95       	ret

00001bb0 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    1bb0:	df 93       	push	r29
    1bb2:	cf 93       	push	r28
    1bb4:	cd b7       	in	r28, 0x3d	; 61
    1bb6:	de b7       	in	r29, 0x3e	; 62
    1bb8:	60 97       	sbiw	r28, 0x10	; 16
    1bba:	0f b6       	in	r0, 0x3f	; 63
    1bbc:	f8 94       	cli
    1bbe:	de bf       	out	0x3e, r29	; 62
    1bc0:	0f be       	out	0x3f, r0	; 63
    1bc2:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    1bc4:	81 e0       	ldi	r24, 0x01	; 1
    1bc6:	64 e0       	ldi	r22, 0x04	; 4
    1bc8:	40 e0       	ldi	r20, 0x00	; 0
    1bca:	0e 94 9a 0a 	call	0x1534	; 0x1534 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    1bce:	81 e0       	ldi	r24, 0x01	; 1
    1bd0:	65 e0       	ldi	r22, 0x05	; 5
    1bd2:	40 e0       	ldi	r20, 0x00	; 0
    1bd4:	0e 94 9a 0a 	call	0x1534	; 0x1534 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    1bd8:	81 e0       	ldi	r24, 0x01	; 1
    1bda:	66 e0       	ldi	r22, 0x06	; 6
    1bdc:	40 e0       	ldi	r20, 0x00	; 0
    1bde:	0e 94 9a 0a 	call	0x1534	; 0x1534 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    1be2:	81 e0       	ldi	r24, 0x01	; 1
    1be4:	67 e0       	ldi	r22, 0x07	; 7
    1be6:	40 e0       	ldi	r20, 0x00	; 0
    1be8:	0e 94 9a 0a 	call	0x1534	; 0x1534 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    1bec:	83 e0       	ldi	r24, 0x03	; 3
    1bee:	62 e0       	ldi	r22, 0x02	; 2
    1bf0:	40 e0       	ldi	r20, 0x00	; 0
    1bf2:	0e 94 9a 0a 	call	0x1534	; 0x1534 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    1bf6:	83 e0       	ldi	r24, 0x03	; 3
    1bf8:	63 e0       	ldi	r22, 0x03	; 3
    1bfa:	40 e0       	ldi	r20, 0x00	; 0
    1bfc:	0e 94 9a 0a 	call	0x1534	; 0x1534 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    1c00:	83 e0       	ldi	r24, 0x03	; 3
    1c02:	64 e0       	ldi	r22, 0x04	; 4
    1c04:	40 e0       	ldi	r20, 0x00	; 0
    1c06:	0e 94 9a 0a 	call	0x1534	; 0x1534 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    1c0a:	83 e0       	ldi	r24, 0x03	; 3
    1c0c:	65 e0       	ldi	r22, 0x05	; 5
    1c0e:	40 e0       	ldi	r20, 0x00	; 0
    1c10:	0e 94 9a 0a 	call	0x1534	; 0x1534 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1c14:	1f 86       	std	Y+15, r1	; 0x0f
    1c16:	b4 c0       	rjmp	.+360    	; 0x1d80 <KEYPAD_getPressedKey+0x1d0>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    1c18:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c1a:	98 2f       	mov	r25, r24
    1c1c:	9c 5f       	subi	r25, 0xFC	; 252
    1c1e:	81 e0       	ldi	r24, 0x01	; 1
    1c20:	69 2f       	mov	r22, r25
    1c22:	41 e0       	ldi	r20, 0x01	; 1
    1c24:	0e 94 9a 0a 	call	0x1534	; 0x1534 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    1c28:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c2a:	98 2f       	mov	r25, r24
    1c2c:	9c 5f       	subi	r25, 0xFC	; 252
    1c2e:	81 e0       	ldi	r24, 0x01	; 1
    1c30:	69 2f       	mov	r22, r25
    1c32:	40 e0       	ldi	r20, 0x00	; 0
    1c34:	0e 94 85 0b 	call	0x170a	; 0x170a <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1c38:	18 8a       	std	Y+16, r1	; 0x10
    1c3a:	22 c0       	rjmp	.+68     	; 0x1c80 <KEYPAD_getPressedKey+0xd0>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    1c3c:	88 89       	ldd	r24, Y+16	; 0x10
    1c3e:	98 2f       	mov	r25, r24
    1c40:	9e 5f       	subi	r25, 0xFE	; 254
    1c42:	83 e0       	ldi	r24, 0x03	; 3
    1c44:	69 2f       	mov	r22, r25
    1c46:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <GPIO_readPin>
    1c4a:	88 23       	and	r24, r24
    1c4c:	b1 f4       	brne	.+44     	; 0x1c7a <KEYPAD_getPressedKey+0xca>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1c4e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c50:	88 2f       	mov	r24, r24
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	88 0f       	add	r24, r24
    1c56:	99 1f       	adc	r25, r25
    1c58:	88 0f       	add	r24, r24
    1c5a:	99 1f       	adc	r25, r25
    1c5c:	98 2f       	mov	r25, r24
    1c5e:	88 89       	ldd	r24, Y+16	; 0x10
    1c60:	89 0f       	add	r24, r25
    1c62:	8f 5f       	subi	r24, 0xFF	; 255
    1c64:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
	}	
}
    1c68:	60 96       	adiw	r28, 0x10	; 16
    1c6a:	0f b6       	in	r0, 0x3f	; 63
    1c6c:	f8 94       	cli
    1c6e:	de bf       	out	0x3e, r29	; 62
    1c70:	0f be       	out	0x3f, r0	; 63
    1c72:	cd bf       	out	0x3d, r28	; 61
    1c74:	cf 91       	pop	r28
    1c76:	df 91       	pop	r29
    1c78:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1c7a:	88 89       	ldd	r24, Y+16	; 0x10
    1c7c:	8f 5f       	subi	r24, 0xFF	; 255
    1c7e:	88 8b       	std	Y+16, r24	; 0x10
    1c80:	88 89       	ldd	r24, Y+16	; 0x10
    1c82:	84 30       	cpi	r24, 0x04	; 4
    1c84:	d8 f2       	brcs	.-74     	; 0x1c3c <KEYPAD_getPressedKey+0x8c>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    1c86:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c88:	98 2f       	mov	r25, r24
    1c8a:	9c 5f       	subi	r25, 0xFC	; 252
    1c8c:	81 e0       	ldi	r24, 0x01	; 1
    1c8e:	69 2f       	mov	r22, r25
    1c90:	40 e0       	ldi	r20, 0x00	; 0
    1c92:	0e 94 9a 0a 	call	0x1534	; 0x1534 <GPIO_setupPinDirection>
    1c96:	80 e0       	ldi	r24, 0x00	; 0
    1c98:	90 e0       	ldi	r25, 0x00	; 0
    1c9a:	a0 ea       	ldi	r26, 0xA0	; 160
    1c9c:	b0 e4       	ldi	r27, 0x40	; 64
    1c9e:	8b 87       	std	Y+11, r24	; 0x0b
    1ca0:	9c 87       	std	Y+12, r25	; 0x0c
    1ca2:	ad 87       	std	Y+13, r26	; 0x0d
    1ca4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ca6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ca8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1caa:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cac:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cae:	20 e0       	ldi	r18, 0x00	; 0
    1cb0:	30 e0       	ldi	r19, 0x00	; 0
    1cb2:	4a ef       	ldi	r20, 0xFA	; 250
    1cb4:	54 e4       	ldi	r21, 0x44	; 68
    1cb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cba:	dc 01       	movw	r26, r24
    1cbc:	cb 01       	movw	r24, r22
    1cbe:	8f 83       	std	Y+7, r24	; 0x07
    1cc0:	98 87       	std	Y+8, r25	; 0x08
    1cc2:	a9 87       	std	Y+9, r26	; 0x09
    1cc4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cc6:	6f 81       	ldd	r22, Y+7	; 0x07
    1cc8:	78 85       	ldd	r23, Y+8	; 0x08
    1cca:	89 85       	ldd	r24, Y+9	; 0x09
    1ccc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cce:	20 e0       	ldi	r18, 0x00	; 0
    1cd0:	30 e0       	ldi	r19, 0x00	; 0
    1cd2:	40 e8       	ldi	r20, 0x80	; 128
    1cd4:	5f e3       	ldi	r21, 0x3F	; 63
    1cd6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cda:	88 23       	and	r24, r24
    1cdc:	2c f4       	brge	.+10     	; 0x1ce8 <KEYPAD_getPressedKey+0x138>
		__ticks = 1;
    1cde:	81 e0       	ldi	r24, 0x01	; 1
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	9e 83       	std	Y+6, r25	; 0x06
    1ce4:	8d 83       	std	Y+5, r24	; 0x05
    1ce6:	3f c0       	rjmp	.+126    	; 0x1d66 <KEYPAD_getPressedKey+0x1b6>
	else if (__tmp > 65535)
    1ce8:	6f 81       	ldd	r22, Y+7	; 0x07
    1cea:	78 85       	ldd	r23, Y+8	; 0x08
    1cec:	89 85       	ldd	r24, Y+9	; 0x09
    1cee:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cf0:	20 e0       	ldi	r18, 0x00	; 0
    1cf2:	3f ef       	ldi	r19, 0xFF	; 255
    1cf4:	4f e7       	ldi	r20, 0x7F	; 127
    1cf6:	57 e4       	ldi	r21, 0x47	; 71
    1cf8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cfc:	18 16       	cp	r1, r24
    1cfe:	4c f5       	brge	.+82     	; 0x1d52 <KEYPAD_getPressedKey+0x1a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d00:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d02:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d04:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d06:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d08:	20 e0       	ldi	r18, 0x00	; 0
    1d0a:	30 e0       	ldi	r19, 0x00	; 0
    1d0c:	40 e2       	ldi	r20, 0x20	; 32
    1d0e:	51 e4       	ldi	r21, 0x41	; 65
    1d10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d14:	dc 01       	movw	r26, r24
    1d16:	cb 01       	movw	r24, r22
    1d18:	bc 01       	movw	r22, r24
    1d1a:	cd 01       	movw	r24, r26
    1d1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d20:	dc 01       	movw	r26, r24
    1d22:	cb 01       	movw	r24, r22
    1d24:	9e 83       	std	Y+6, r25	; 0x06
    1d26:	8d 83       	std	Y+5, r24	; 0x05
    1d28:	0f c0       	rjmp	.+30     	; 0x1d48 <KEYPAD_getPressedKey+0x198>
    1d2a:	88 ec       	ldi	r24, 0xC8	; 200
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	9c 83       	std	Y+4, r25	; 0x04
    1d30:	8b 83       	std	Y+3, r24	; 0x03
    1d32:	8b 81       	ldd	r24, Y+3	; 0x03
    1d34:	9c 81       	ldd	r25, Y+4	; 0x04
    1d36:	01 97       	sbiw	r24, 0x01	; 1
    1d38:	f1 f7       	brne	.-4      	; 0x1d36 <KEYPAD_getPressedKey+0x186>
    1d3a:	9c 83       	std	Y+4, r25	; 0x04
    1d3c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d3e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d40:	9e 81       	ldd	r25, Y+6	; 0x06
    1d42:	01 97       	sbiw	r24, 0x01	; 1
    1d44:	9e 83       	std	Y+6, r25	; 0x06
    1d46:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d48:	8d 81       	ldd	r24, Y+5	; 0x05
    1d4a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d4c:	00 97       	sbiw	r24, 0x00	; 0
    1d4e:	69 f7       	brne	.-38     	; 0x1d2a <KEYPAD_getPressedKey+0x17a>
    1d50:	14 c0       	rjmp	.+40     	; 0x1d7a <KEYPAD_getPressedKey+0x1ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d52:	6f 81       	ldd	r22, Y+7	; 0x07
    1d54:	78 85       	ldd	r23, Y+8	; 0x08
    1d56:	89 85       	ldd	r24, Y+9	; 0x09
    1d58:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d5e:	dc 01       	movw	r26, r24
    1d60:	cb 01       	movw	r24, r22
    1d62:	9e 83       	std	Y+6, r25	; 0x06
    1d64:	8d 83       	std	Y+5, r24	; 0x05
    1d66:	8d 81       	ldd	r24, Y+5	; 0x05
    1d68:	9e 81       	ldd	r25, Y+6	; 0x06
    1d6a:	9a 83       	std	Y+2, r25	; 0x02
    1d6c:	89 83       	std	Y+1, r24	; 0x01
    1d6e:	89 81       	ldd	r24, Y+1	; 0x01
    1d70:	9a 81       	ldd	r25, Y+2	; 0x02
    1d72:	01 97       	sbiw	r24, 0x01	; 1
    1d74:	f1 f7       	brne	.-4      	; 0x1d72 <KEYPAD_getPressedKey+0x1c2>
    1d76:	9a 83       	std	Y+2, r25	; 0x02
    1d78:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1d7a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d7c:	8f 5f       	subi	r24, 0xFF	; 255
    1d7e:	8f 87       	std	Y+15, r24	; 0x0f
    1d80:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d82:	84 30       	cpi	r24, 0x04	; 4
    1d84:	08 f4       	brcc	.+2      	; 0x1d88 <KEYPAD_getPressedKey+0x1d8>
    1d86:	48 cf       	rjmp	.-368    	; 0x1c18 <KEYPAD_getPressedKey+0x68>
    1d88:	45 cf       	rjmp	.-374    	; 0x1c14 <KEYPAD_getPressedKey+0x64>

00001d8a <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1d8a:	df 93       	push	r29
    1d8c:	cf 93       	push	r28
    1d8e:	00 d0       	rcall	.+0      	; 0x1d90 <KEYPAD_4x4_adjustKeyNumber+0x6>
    1d90:	00 d0       	rcall	.+0      	; 0x1d92 <KEYPAD_4x4_adjustKeyNumber+0x8>
    1d92:	cd b7       	in	r28, 0x3d	; 61
    1d94:	de b7       	in	r29, 0x3e	; 62
    1d96:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1d98:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1d9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d9c:	28 2f       	mov	r18, r24
    1d9e:	30 e0       	ldi	r19, 0x00	; 0
    1da0:	3c 83       	std	Y+4, r19	; 0x04
    1da2:	2b 83       	std	Y+3, r18	; 0x03
    1da4:	8b 81       	ldd	r24, Y+3	; 0x03
    1da6:	9c 81       	ldd	r25, Y+4	; 0x04
    1da8:	88 30       	cpi	r24, 0x08	; 8
    1daa:	91 05       	cpc	r25, r1
    1dac:	09 f4       	brne	.+2      	; 0x1db0 <KEYPAD_4x4_adjustKeyNumber+0x26>
    1dae:	70 c0       	rjmp	.+224    	; 0x1e90 <KEYPAD_4x4_adjustKeyNumber+0x106>
    1db0:	2b 81       	ldd	r18, Y+3	; 0x03
    1db2:	3c 81       	ldd	r19, Y+4	; 0x04
    1db4:	29 30       	cpi	r18, 0x09	; 9
    1db6:	31 05       	cpc	r19, r1
    1db8:	5c f5       	brge	.+86     	; 0x1e10 <KEYPAD_4x4_adjustKeyNumber+0x86>
    1dba:	8b 81       	ldd	r24, Y+3	; 0x03
    1dbc:	9c 81       	ldd	r25, Y+4	; 0x04
    1dbe:	84 30       	cpi	r24, 0x04	; 4
    1dc0:	91 05       	cpc	r25, r1
    1dc2:	09 f4       	brne	.+2      	; 0x1dc6 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1dc4:	59 c0       	rjmp	.+178    	; 0x1e78 <KEYPAD_4x4_adjustKeyNumber+0xee>
    1dc6:	2b 81       	ldd	r18, Y+3	; 0x03
    1dc8:	3c 81       	ldd	r19, Y+4	; 0x04
    1dca:	25 30       	cpi	r18, 0x05	; 5
    1dcc:	31 05       	cpc	r19, r1
    1dce:	9c f4       	brge	.+38     	; 0x1df6 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1dd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd2:	9c 81       	ldd	r25, Y+4	; 0x04
    1dd4:	82 30       	cpi	r24, 0x02	; 2
    1dd6:	91 05       	cpc	r25, r1
    1dd8:	09 f4       	brne	.+2      	; 0x1ddc <KEYPAD_4x4_adjustKeyNumber+0x52>
    1dda:	48 c0       	rjmp	.+144    	; 0x1e6c <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1ddc:	2b 81       	ldd	r18, Y+3	; 0x03
    1dde:	3c 81       	ldd	r19, Y+4	; 0x04
    1de0:	23 30       	cpi	r18, 0x03	; 3
    1de2:	31 05       	cpc	r19, r1
    1de4:	0c f0       	brlt	.+2      	; 0x1de8 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1de6:	45 c0       	rjmp	.+138    	; 0x1e72 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1de8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dea:	9c 81       	ldd	r25, Y+4	; 0x04
    1dec:	81 30       	cpi	r24, 0x01	; 1
    1dee:	91 05       	cpc	r25, r1
    1df0:	09 f4       	brne	.+2      	; 0x1df4 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1df2:	39 c0       	rjmp	.+114    	; 0x1e66 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1df4:	67 c0       	rjmp	.+206    	; 0x1ec4 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1df6:	2b 81       	ldd	r18, Y+3	; 0x03
    1df8:	3c 81       	ldd	r19, Y+4	; 0x04
    1dfa:	26 30       	cpi	r18, 0x06	; 6
    1dfc:	31 05       	cpc	r19, r1
    1dfe:	09 f4       	brne	.+2      	; 0x1e02 <KEYPAD_4x4_adjustKeyNumber+0x78>
    1e00:	41 c0       	rjmp	.+130    	; 0x1e84 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1e02:	8b 81       	ldd	r24, Y+3	; 0x03
    1e04:	9c 81       	ldd	r25, Y+4	; 0x04
    1e06:	87 30       	cpi	r24, 0x07	; 7
    1e08:	91 05       	cpc	r25, r1
    1e0a:	0c f0       	brlt	.+2      	; 0x1e0e <KEYPAD_4x4_adjustKeyNumber+0x84>
    1e0c:	3e c0       	rjmp	.+124    	; 0x1e8a <KEYPAD_4x4_adjustKeyNumber+0x100>
    1e0e:	37 c0       	rjmp	.+110    	; 0x1e7e <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1e10:	2b 81       	ldd	r18, Y+3	; 0x03
    1e12:	3c 81       	ldd	r19, Y+4	; 0x04
    1e14:	2c 30       	cpi	r18, 0x0C	; 12
    1e16:	31 05       	cpc	r19, r1
    1e18:	09 f4       	brne	.+2      	; 0x1e1c <KEYPAD_4x4_adjustKeyNumber+0x92>
    1e1a:	46 c0       	rjmp	.+140    	; 0x1ea8 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1e1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e1e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e20:	8d 30       	cpi	r24, 0x0D	; 13
    1e22:	91 05       	cpc	r25, r1
    1e24:	5c f4       	brge	.+22     	; 0x1e3c <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1e26:	2b 81       	ldd	r18, Y+3	; 0x03
    1e28:	3c 81       	ldd	r19, Y+4	; 0x04
    1e2a:	2a 30       	cpi	r18, 0x0A	; 10
    1e2c:	31 05       	cpc	r19, r1
    1e2e:	b1 f1       	breq	.+108    	; 0x1e9c <KEYPAD_4x4_adjustKeyNumber+0x112>
    1e30:	8b 81       	ldd	r24, Y+3	; 0x03
    1e32:	9c 81       	ldd	r25, Y+4	; 0x04
    1e34:	8b 30       	cpi	r24, 0x0B	; 11
    1e36:	91 05       	cpc	r25, r1
    1e38:	a4 f5       	brge	.+104    	; 0x1ea2 <KEYPAD_4x4_adjustKeyNumber+0x118>
    1e3a:	2d c0       	rjmp	.+90     	; 0x1e96 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1e3c:	2b 81       	ldd	r18, Y+3	; 0x03
    1e3e:	3c 81       	ldd	r19, Y+4	; 0x04
    1e40:	2e 30       	cpi	r18, 0x0E	; 14
    1e42:	31 05       	cpc	r19, r1
    1e44:	b9 f1       	breq	.+110    	; 0x1eb4 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1e46:	8b 81       	ldd	r24, Y+3	; 0x03
    1e48:	9c 81       	ldd	r25, Y+4	; 0x04
    1e4a:	8e 30       	cpi	r24, 0x0E	; 14
    1e4c:	91 05       	cpc	r25, r1
    1e4e:	7c f1       	brlt	.+94     	; 0x1eae <KEYPAD_4x4_adjustKeyNumber+0x124>
    1e50:	2b 81       	ldd	r18, Y+3	; 0x03
    1e52:	3c 81       	ldd	r19, Y+4	; 0x04
    1e54:	2f 30       	cpi	r18, 0x0F	; 15
    1e56:	31 05       	cpc	r19, r1
    1e58:	79 f1       	breq	.+94     	; 0x1eb8 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1e5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e5c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e5e:	80 31       	cpi	r24, 0x10	; 16
    1e60:	91 05       	cpc	r25, r1
    1e62:	69 f1       	breq	.+90     	; 0x1ebe <KEYPAD_4x4_adjustKeyNumber+0x134>
    1e64:	2f c0       	rjmp	.+94     	; 0x1ec4 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1e66:	87 e0       	ldi	r24, 0x07	; 7
    1e68:	89 83       	std	Y+1, r24	; 0x01
    1e6a:	2e c0       	rjmp	.+92     	; 0x1ec8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    1e6c:	88 e0       	ldi	r24, 0x08	; 8
    1e6e:	89 83       	std	Y+1, r24	; 0x01
    1e70:	2b c0       	rjmp	.+86     	; 0x1ec8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    1e72:	89 e0       	ldi	r24, 0x09	; 9
    1e74:	89 83       	std	Y+1, r24	; 0x01
    1e76:	28 c0       	rjmp	.+80     	; 0x1ec8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    1e78:	85 e2       	ldi	r24, 0x25	; 37
    1e7a:	89 83       	std	Y+1, r24	; 0x01
    1e7c:	25 c0       	rjmp	.+74     	; 0x1ec8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    1e7e:	84 e0       	ldi	r24, 0x04	; 4
    1e80:	89 83       	std	Y+1, r24	; 0x01
    1e82:	22 c0       	rjmp	.+68     	; 0x1ec8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    1e84:	85 e0       	ldi	r24, 0x05	; 5
    1e86:	89 83       	std	Y+1, r24	; 0x01
    1e88:	1f c0       	rjmp	.+62     	; 0x1ec8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    1e8a:	86 e0       	ldi	r24, 0x06	; 6
    1e8c:	89 83       	std	Y+1, r24	; 0x01
    1e8e:	1c c0       	rjmp	.+56     	; 0x1ec8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    1e90:	8a e2       	ldi	r24, 0x2A	; 42
    1e92:	89 83       	std	Y+1, r24	; 0x01
    1e94:	19 c0       	rjmp	.+50     	; 0x1ec8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    1e96:	81 e0       	ldi	r24, 0x01	; 1
    1e98:	89 83       	std	Y+1, r24	; 0x01
    1e9a:	16 c0       	rjmp	.+44     	; 0x1ec8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    1e9c:	82 e0       	ldi	r24, 0x02	; 2
    1e9e:	89 83       	std	Y+1, r24	; 0x01
    1ea0:	13 c0       	rjmp	.+38     	; 0x1ec8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    1ea2:	83 e0       	ldi	r24, 0x03	; 3
    1ea4:	89 83       	std	Y+1, r24	; 0x01
    1ea6:	10 c0       	rjmp	.+32     	; 0x1ec8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1ea8:	8d e2       	ldi	r24, 0x2D	; 45
    1eaa:	89 83       	std	Y+1, r24	; 0x01
    1eac:	0d c0       	rjmp	.+26     	; 0x1ec8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    1eae:	8d e0       	ldi	r24, 0x0D	; 13
    1eb0:	89 83       	std	Y+1, r24	; 0x01
    1eb2:	0a c0       	rjmp	.+20     	; 0x1ec8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    1eb4:	19 82       	std	Y+1, r1	; 0x01
    1eb6:	08 c0       	rjmp	.+16     	; 0x1ec8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    1eb8:	8d e3       	ldi	r24, 0x3D	; 61
    1eba:	89 83       	std	Y+1, r24	; 0x01
    1ebc:	05 c0       	rjmp	.+10     	; 0x1ec8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1ebe:	8b e2       	ldi	r24, 0x2B	; 43
    1ec0:	89 83       	std	Y+1, r24	; 0x01
    1ec2:	02 c0       	rjmp	.+4      	; 0x1ec8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    1ec4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec6:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1ec8:	89 81       	ldd	r24, Y+1	; 0x01
} 
    1eca:	0f 90       	pop	r0
    1ecc:	0f 90       	pop	r0
    1ece:	0f 90       	pop	r0
    1ed0:	0f 90       	pop	r0
    1ed2:	cf 91       	pop	r28
    1ed4:	df 91       	pop	r29
    1ed6:	08 95       	ret

00001ed8 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1ed8:	df 93       	push	r29
    1eda:	cf 93       	push	r28
    1edc:	cd b7       	in	r28, 0x3d	; 61
    1ede:	de b7       	in	r29, 0x3e	; 62
    1ee0:	2e 97       	sbiw	r28, 0x0e	; 14
    1ee2:	0f b6       	in	r0, 0x3f	; 63
    1ee4:	f8 94       	cli
    1ee6:	de bf       	out	0x3e, r29	; 62
    1ee8:	0f be       	out	0x3f, r0	; 63
    1eea:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1eec:	80 e0       	ldi	r24, 0x00	; 0
    1eee:	60 e0       	ldi	r22, 0x00	; 0
    1ef0:	41 e0       	ldi	r20, 0x01	; 1
    1ef2:	0e 94 9a 0a 	call	0x1534	; 0x1534 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1ef6:	80 e0       	ldi	r24, 0x00	; 0
    1ef8:	61 e0       	ldi	r22, 0x01	; 1
    1efa:	41 e0       	ldi	r20, 0x01	; 1
    1efc:	0e 94 9a 0a 	call	0x1534	; 0x1534 <GPIO_setupPinDirection>
    1f00:	80 e0       	ldi	r24, 0x00	; 0
    1f02:	90 e0       	ldi	r25, 0x00	; 0
    1f04:	a0 ea       	ldi	r26, 0xA0	; 160
    1f06:	b1 e4       	ldi	r27, 0x41	; 65
    1f08:	8b 87       	std	Y+11, r24	; 0x0b
    1f0a:	9c 87       	std	Y+12, r25	; 0x0c
    1f0c:	ad 87       	std	Y+13, r26	; 0x0d
    1f0e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f10:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f12:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f14:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f16:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f18:	20 e0       	ldi	r18, 0x00	; 0
    1f1a:	30 e0       	ldi	r19, 0x00	; 0
    1f1c:	4a ef       	ldi	r20, 0xFA	; 250
    1f1e:	54 e4       	ldi	r21, 0x44	; 68
    1f20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f24:	dc 01       	movw	r26, r24
    1f26:	cb 01       	movw	r24, r22
    1f28:	8f 83       	std	Y+7, r24	; 0x07
    1f2a:	98 87       	std	Y+8, r25	; 0x08
    1f2c:	a9 87       	std	Y+9, r26	; 0x09
    1f2e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f30:	6f 81       	ldd	r22, Y+7	; 0x07
    1f32:	78 85       	ldd	r23, Y+8	; 0x08
    1f34:	89 85       	ldd	r24, Y+9	; 0x09
    1f36:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f38:	20 e0       	ldi	r18, 0x00	; 0
    1f3a:	30 e0       	ldi	r19, 0x00	; 0
    1f3c:	40 e8       	ldi	r20, 0x80	; 128
    1f3e:	5f e3       	ldi	r21, 0x3F	; 63
    1f40:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f44:	88 23       	and	r24, r24
    1f46:	2c f4       	brge	.+10     	; 0x1f52 <LCD_init+0x7a>
		__ticks = 1;
    1f48:	81 e0       	ldi	r24, 0x01	; 1
    1f4a:	90 e0       	ldi	r25, 0x00	; 0
    1f4c:	9e 83       	std	Y+6, r25	; 0x06
    1f4e:	8d 83       	std	Y+5, r24	; 0x05
    1f50:	3f c0       	rjmp	.+126    	; 0x1fd0 <LCD_init+0xf8>
	else if (__tmp > 65535)
    1f52:	6f 81       	ldd	r22, Y+7	; 0x07
    1f54:	78 85       	ldd	r23, Y+8	; 0x08
    1f56:	89 85       	ldd	r24, Y+9	; 0x09
    1f58:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f5a:	20 e0       	ldi	r18, 0x00	; 0
    1f5c:	3f ef       	ldi	r19, 0xFF	; 255
    1f5e:	4f e7       	ldi	r20, 0x7F	; 127
    1f60:	57 e4       	ldi	r21, 0x47	; 71
    1f62:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f66:	18 16       	cp	r1, r24
    1f68:	4c f5       	brge	.+82     	; 0x1fbc <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f6a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f6c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f6e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f70:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f72:	20 e0       	ldi	r18, 0x00	; 0
    1f74:	30 e0       	ldi	r19, 0x00	; 0
    1f76:	40 e2       	ldi	r20, 0x20	; 32
    1f78:	51 e4       	ldi	r21, 0x41	; 65
    1f7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f7e:	dc 01       	movw	r26, r24
    1f80:	cb 01       	movw	r24, r22
    1f82:	bc 01       	movw	r22, r24
    1f84:	cd 01       	movw	r24, r26
    1f86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f8a:	dc 01       	movw	r26, r24
    1f8c:	cb 01       	movw	r24, r22
    1f8e:	9e 83       	std	Y+6, r25	; 0x06
    1f90:	8d 83       	std	Y+5, r24	; 0x05
    1f92:	0f c0       	rjmp	.+30     	; 0x1fb2 <LCD_init+0xda>
    1f94:	88 ec       	ldi	r24, 0xC8	; 200
    1f96:	90 e0       	ldi	r25, 0x00	; 0
    1f98:	9c 83       	std	Y+4, r25	; 0x04
    1f9a:	8b 83       	std	Y+3, r24	; 0x03
    1f9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f9e:	9c 81       	ldd	r25, Y+4	; 0x04
    1fa0:	01 97       	sbiw	r24, 0x01	; 1
    1fa2:	f1 f7       	brne	.-4      	; 0x1fa0 <LCD_init+0xc8>
    1fa4:	9c 83       	std	Y+4, r25	; 0x04
    1fa6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fa8:	8d 81       	ldd	r24, Y+5	; 0x05
    1faa:	9e 81       	ldd	r25, Y+6	; 0x06
    1fac:	01 97       	sbiw	r24, 0x01	; 1
    1fae:	9e 83       	std	Y+6, r25	; 0x06
    1fb0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fb2:	8d 81       	ldd	r24, Y+5	; 0x05
    1fb4:	9e 81       	ldd	r25, Y+6	; 0x06
    1fb6:	00 97       	sbiw	r24, 0x00	; 0
    1fb8:	69 f7       	brne	.-38     	; 0x1f94 <LCD_init+0xbc>
    1fba:	14 c0       	rjmp	.+40     	; 0x1fe4 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fbc:	6f 81       	ldd	r22, Y+7	; 0x07
    1fbe:	78 85       	ldd	r23, Y+8	; 0x08
    1fc0:	89 85       	ldd	r24, Y+9	; 0x09
    1fc2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fc8:	dc 01       	movw	r26, r24
    1fca:	cb 01       	movw	r24, r22
    1fcc:	9e 83       	std	Y+6, r25	; 0x06
    1fce:	8d 83       	std	Y+5, r24	; 0x05
    1fd0:	8d 81       	ldd	r24, Y+5	; 0x05
    1fd2:	9e 81       	ldd	r25, Y+6	; 0x06
    1fd4:	9a 83       	std	Y+2, r25	; 0x02
    1fd6:	89 83       	std	Y+1, r24	; 0x01
    1fd8:	89 81       	ldd	r24, Y+1	; 0x01
    1fda:	9a 81       	ldd	r25, Y+2	; 0x02
    1fdc:	01 97       	sbiw	r24, 0x01	; 1
    1fde:	f1 f7       	brne	.-4      	; 0x1fdc <LCD_init+0x104>
    1fe0:	9a 83       	std	Y+2, r25	; 0x02
    1fe2:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    1fe4:	80 e0       	ldi	r24, 0x00	; 0
    1fe6:	62 e0       	ldi	r22, 0x02	; 2
    1fe8:	41 e0       	ldi	r20, 0x01	; 1
    1fea:	0e 94 9a 0a 	call	0x1534	; 0x1534 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    1fee:	80 e0       	ldi	r24, 0x00	; 0
    1ff0:	63 e0       	ldi	r22, 0x03	; 3
    1ff2:	41 e0       	ldi	r20, 0x01	; 1
    1ff4:	0e 94 9a 0a 	call	0x1534	; 0x1534 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    1ff8:	80 e0       	ldi	r24, 0x00	; 0
    1ffa:	64 e0       	ldi	r22, 0x04	; 4
    1ffc:	41 e0       	ldi	r20, 0x01	; 1
    1ffe:	0e 94 9a 0a 	call	0x1534	; 0x1534 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    2002:	80 e0       	ldi	r24, 0x00	; 0
    2004:	65 e0       	ldi	r22, 0x05	; 5
    2006:	41 e0       	ldi	r20, 0x01	; 1
    2008:	0e 94 9a 0a 	call	0x1534	; 0x1534 <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    200c:	83 e3       	ldi	r24, 0x33	; 51
    200e:	0e 94 1e 10 	call	0x203c	; 0x203c <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    2012:	82 e3       	ldi	r24, 0x32	; 50
    2014:	0e 94 1e 10 	call	0x203c	; 0x203c <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    2018:	88 e2       	ldi	r24, 0x28	; 40
    201a:	0e 94 1e 10 	call	0x203c	; 0x203c <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    201e:	8c e0       	ldi	r24, 0x0C	; 12
    2020:	0e 94 1e 10 	call	0x203c	; 0x203c <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    2024:	81 e0       	ldi	r24, 0x01	; 1
    2026:	0e 94 1e 10 	call	0x203c	; 0x203c <LCD_sendCommand>
}
    202a:	2e 96       	adiw	r28, 0x0e	; 14
    202c:	0f b6       	in	r0, 0x3f	; 63
    202e:	f8 94       	cli
    2030:	de bf       	out	0x3e, r29	; 62
    2032:	0f be       	out	0x3f, r0	; 63
    2034:	cd bf       	out	0x3d, r28	; 61
    2036:	cf 91       	pop	r28
    2038:	df 91       	pop	r29
    203a:	08 95       	ret

0000203c <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    203c:	0f 93       	push	r16
    203e:	1f 93       	push	r17
    2040:	df 93       	push	r29
    2042:	cf 93       	push	r28
    2044:	cd b7       	in	r28, 0x3d	; 61
    2046:	de b7       	in	r29, 0x3e	; 62
    2048:	c3 56       	subi	r28, 0x63	; 99
    204a:	d0 40       	sbci	r29, 0x00	; 0
    204c:	0f b6       	in	r0, 0x3f	; 63
    204e:	f8 94       	cli
    2050:	de bf       	out	0x3e, r29	; 62
    2052:	0f be       	out	0x3f, r0	; 63
    2054:	cd bf       	out	0x3d, r28	; 61
    2056:	fe 01       	movw	r30, r28
    2058:	ed 59       	subi	r30, 0x9D	; 157
    205a:	ff 4f       	sbci	r31, 0xFF	; 255
    205c:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    205e:	80 e0       	ldi	r24, 0x00	; 0
    2060:	60 e0       	ldi	r22, 0x00	; 0
    2062:	40 e0       	ldi	r20, 0x00	; 0
    2064:	0e 94 85 0b 	call	0x170a	; 0x170a <GPIO_writePin>
    2068:	fe 01       	movw	r30, r28
    206a:	e1 5a       	subi	r30, 0xA1	; 161
    206c:	ff 4f       	sbci	r31, 0xFF	; 255
    206e:	80 e0       	ldi	r24, 0x00	; 0
    2070:	90 e0       	ldi	r25, 0x00	; 0
    2072:	a0 e8       	ldi	r26, 0x80	; 128
    2074:	bf e3       	ldi	r27, 0x3F	; 63
    2076:	80 83       	st	Z, r24
    2078:	91 83       	std	Z+1, r25	; 0x01
    207a:	a2 83       	std	Z+2, r26	; 0x02
    207c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    207e:	8e 01       	movw	r16, r28
    2080:	05 5a       	subi	r16, 0xA5	; 165
    2082:	1f 4f       	sbci	r17, 0xFF	; 255
    2084:	fe 01       	movw	r30, r28
    2086:	e1 5a       	subi	r30, 0xA1	; 161
    2088:	ff 4f       	sbci	r31, 0xFF	; 255
    208a:	60 81       	ld	r22, Z
    208c:	71 81       	ldd	r23, Z+1	; 0x01
    208e:	82 81       	ldd	r24, Z+2	; 0x02
    2090:	93 81       	ldd	r25, Z+3	; 0x03
    2092:	20 e0       	ldi	r18, 0x00	; 0
    2094:	30 e0       	ldi	r19, 0x00	; 0
    2096:	4a ef       	ldi	r20, 0xFA	; 250
    2098:	54 e4       	ldi	r21, 0x44	; 68
    209a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    209e:	dc 01       	movw	r26, r24
    20a0:	cb 01       	movw	r24, r22
    20a2:	f8 01       	movw	r30, r16
    20a4:	80 83       	st	Z, r24
    20a6:	91 83       	std	Z+1, r25	; 0x01
    20a8:	a2 83       	std	Z+2, r26	; 0x02
    20aa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    20ac:	fe 01       	movw	r30, r28
    20ae:	e5 5a       	subi	r30, 0xA5	; 165
    20b0:	ff 4f       	sbci	r31, 0xFF	; 255
    20b2:	60 81       	ld	r22, Z
    20b4:	71 81       	ldd	r23, Z+1	; 0x01
    20b6:	82 81       	ldd	r24, Z+2	; 0x02
    20b8:	93 81       	ldd	r25, Z+3	; 0x03
    20ba:	20 e0       	ldi	r18, 0x00	; 0
    20bc:	30 e0       	ldi	r19, 0x00	; 0
    20be:	40 e8       	ldi	r20, 0x80	; 128
    20c0:	5f e3       	ldi	r21, 0x3F	; 63
    20c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20c6:	88 23       	and	r24, r24
    20c8:	44 f4       	brge	.+16     	; 0x20da <LCD_sendCommand+0x9e>
		__ticks = 1;
    20ca:	fe 01       	movw	r30, r28
    20cc:	e7 5a       	subi	r30, 0xA7	; 167
    20ce:	ff 4f       	sbci	r31, 0xFF	; 255
    20d0:	81 e0       	ldi	r24, 0x01	; 1
    20d2:	90 e0       	ldi	r25, 0x00	; 0
    20d4:	91 83       	std	Z+1, r25	; 0x01
    20d6:	80 83       	st	Z, r24
    20d8:	64 c0       	rjmp	.+200    	; 0x21a2 <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    20da:	fe 01       	movw	r30, r28
    20dc:	e5 5a       	subi	r30, 0xA5	; 165
    20de:	ff 4f       	sbci	r31, 0xFF	; 255
    20e0:	60 81       	ld	r22, Z
    20e2:	71 81       	ldd	r23, Z+1	; 0x01
    20e4:	82 81       	ldd	r24, Z+2	; 0x02
    20e6:	93 81       	ldd	r25, Z+3	; 0x03
    20e8:	20 e0       	ldi	r18, 0x00	; 0
    20ea:	3f ef       	ldi	r19, 0xFF	; 255
    20ec:	4f e7       	ldi	r20, 0x7F	; 127
    20ee:	57 e4       	ldi	r21, 0x47	; 71
    20f0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20f4:	18 16       	cp	r1, r24
    20f6:	0c f0       	brlt	.+2      	; 0x20fa <LCD_sendCommand+0xbe>
    20f8:	43 c0       	rjmp	.+134    	; 0x2180 <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20fa:	fe 01       	movw	r30, r28
    20fc:	e1 5a       	subi	r30, 0xA1	; 161
    20fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2100:	60 81       	ld	r22, Z
    2102:	71 81       	ldd	r23, Z+1	; 0x01
    2104:	82 81       	ldd	r24, Z+2	; 0x02
    2106:	93 81       	ldd	r25, Z+3	; 0x03
    2108:	20 e0       	ldi	r18, 0x00	; 0
    210a:	30 e0       	ldi	r19, 0x00	; 0
    210c:	40 e2       	ldi	r20, 0x20	; 32
    210e:	51 e4       	ldi	r21, 0x41	; 65
    2110:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2114:	dc 01       	movw	r26, r24
    2116:	cb 01       	movw	r24, r22
    2118:	8e 01       	movw	r16, r28
    211a:	07 5a       	subi	r16, 0xA7	; 167
    211c:	1f 4f       	sbci	r17, 0xFF	; 255
    211e:	bc 01       	movw	r22, r24
    2120:	cd 01       	movw	r24, r26
    2122:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2126:	dc 01       	movw	r26, r24
    2128:	cb 01       	movw	r24, r22
    212a:	f8 01       	movw	r30, r16
    212c:	91 83       	std	Z+1, r25	; 0x01
    212e:	80 83       	st	Z, r24
    2130:	1f c0       	rjmp	.+62     	; 0x2170 <LCD_sendCommand+0x134>
    2132:	fe 01       	movw	r30, r28
    2134:	e9 5a       	subi	r30, 0xA9	; 169
    2136:	ff 4f       	sbci	r31, 0xFF	; 255
    2138:	88 ec       	ldi	r24, 0xC8	; 200
    213a:	90 e0       	ldi	r25, 0x00	; 0
    213c:	91 83       	std	Z+1, r25	; 0x01
    213e:	80 83       	st	Z, r24
    2140:	fe 01       	movw	r30, r28
    2142:	e9 5a       	subi	r30, 0xA9	; 169
    2144:	ff 4f       	sbci	r31, 0xFF	; 255
    2146:	80 81       	ld	r24, Z
    2148:	91 81       	ldd	r25, Z+1	; 0x01
    214a:	01 97       	sbiw	r24, 0x01	; 1
    214c:	f1 f7       	brne	.-4      	; 0x214a <LCD_sendCommand+0x10e>
    214e:	fe 01       	movw	r30, r28
    2150:	e9 5a       	subi	r30, 0xA9	; 169
    2152:	ff 4f       	sbci	r31, 0xFF	; 255
    2154:	91 83       	std	Z+1, r25	; 0x01
    2156:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2158:	de 01       	movw	r26, r28
    215a:	a7 5a       	subi	r26, 0xA7	; 167
    215c:	bf 4f       	sbci	r27, 0xFF	; 255
    215e:	fe 01       	movw	r30, r28
    2160:	e7 5a       	subi	r30, 0xA7	; 167
    2162:	ff 4f       	sbci	r31, 0xFF	; 255
    2164:	80 81       	ld	r24, Z
    2166:	91 81       	ldd	r25, Z+1	; 0x01
    2168:	01 97       	sbiw	r24, 0x01	; 1
    216a:	11 96       	adiw	r26, 0x01	; 1
    216c:	9c 93       	st	X, r25
    216e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2170:	fe 01       	movw	r30, r28
    2172:	e7 5a       	subi	r30, 0xA7	; 167
    2174:	ff 4f       	sbci	r31, 0xFF	; 255
    2176:	80 81       	ld	r24, Z
    2178:	91 81       	ldd	r25, Z+1	; 0x01
    217a:	00 97       	sbiw	r24, 0x00	; 0
    217c:	d1 f6       	brne	.-76     	; 0x2132 <LCD_sendCommand+0xf6>
    217e:	27 c0       	rjmp	.+78     	; 0x21ce <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2180:	8e 01       	movw	r16, r28
    2182:	07 5a       	subi	r16, 0xA7	; 167
    2184:	1f 4f       	sbci	r17, 0xFF	; 255
    2186:	fe 01       	movw	r30, r28
    2188:	e5 5a       	subi	r30, 0xA5	; 165
    218a:	ff 4f       	sbci	r31, 0xFF	; 255
    218c:	60 81       	ld	r22, Z
    218e:	71 81       	ldd	r23, Z+1	; 0x01
    2190:	82 81       	ldd	r24, Z+2	; 0x02
    2192:	93 81       	ldd	r25, Z+3	; 0x03
    2194:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2198:	dc 01       	movw	r26, r24
    219a:	cb 01       	movw	r24, r22
    219c:	f8 01       	movw	r30, r16
    219e:	91 83       	std	Z+1, r25	; 0x01
    21a0:	80 83       	st	Z, r24
    21a2:	de 01       	movw	r26, r28
    21a4:	ab 5a       	subi	r26, 0xAB	; 171
    21a6:	bf 4f       	sbci	r27, 0xFF	; 255
    21a8:	fe 01       	movw	r30, r28
    21aa:	e7 5a       	subi	r30, 0xA7	; 167
    21ac:	ff 4f       	sbci	r31, 0xFF	; 255
    21ae:	80 81       	ld	r24, Z
    21b0:	91 81       	ldd	r25, Z+1	; 0x01
    21b2:	8d 93       	st	X+, r24
    21b4:	9c 93       	st	X, r25
    21b6:	fe 01       	movw	r30, r28
    21b8:	eb 5a       	subi	r30, 0xAB	; 171
    21ba:	ff 4f       	sbci	r31, 0xFF	; 255
    21bc:	80 81       	ld	r24, Z
    21be:	91 81       	ldd	r25, Z+1	; 0x01
    21c0:	01 97       	sbiw	r24, 0x01	; 1
    21c2:	f1 f7       	brne	.-4      	; 0x21c0 <LCD_sendCommand+0x184>
    21c4:	fe 01       	movw	r30, r28
    21c6:	eb 5a       	subi	r30, 0xAB	; 171
    21c8:	ff 4f       	sbci	r31, 0xFF	; 255
    21ca:	91 83       	std	Z+1, r25	; 0x01
    21cc:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    21ce:	80 e0       	ldi	r24, 0x00	; 0
    21d0:	61 e0       	ldi	r22, 0x01	; 1
    21d2:	41 e0       	ldi	r20, 0x01	; 1
    21d4:	0e 94 85 0b 	call	0x170a	; 0x170a <GPIO_writePin>
    21d8:	fe 01       	movw	r30, r28
    21da:	ef 5a       	subi	r30, 0xAF	; 175
    21dc:	ff 4f       	sbci	r31, 0xFF	; 255
    21de:	80 e0       	ldi	r24, 0x00	; 0
    21e0:	90 e0       	ldi	r25, 0x00	; 0
    21e2:	a0 e8       	ldi	r26, 0x80	; 128
    21e4:	bf e3       	ldi	r27, 0x3F	; 63
    21e6:	80 83       	st	Z, r24
    21e8:	91 83       	std	Z+1, r25	; 0x01
    21ea:	a2 83       	std	Z+2, r26	; 0x02
    21ec:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21ee:	8e 01       	movw	r16, r28
    21f0:	03 5b       	subi	r16, 0xB3	; 179
    21f2:	1f 4f       	sbci	r17, 0xFF	; 255
    21f4:	fe 01       	movw	r30, r28
    21f6:	ef 5a       	subi	r30, 0xAF	; 175
    21f8:	ff 4f       	sbci	r31, 0xFF	; 255
    21fa:	60 81       	ld	r22, Z
    21fc:	71 81       	ldd	r23, Z+1	; 0x01
    21fe:	82 81       	ldd	r24, Z+2	; 0x02
    2200:	93 81       	ldd	r25, Z+3	; 0x03
    2202:	20 e0       	ldi	r18, 0x00	; 0
    2204:	30 e0       	ldi	r19, 0x00	; 0
    2206:	4a ef       	ldi	r20, 0xFA	; 250
    2208:	54 e4       	ldi	r21, 0x44	; 68
    220a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    220e:	dc 01       	movw	r26, r24
    2210:	cb 01       	movw	r24, r22
    2212:	f8 01       	movw	r30, r16
    2214:	80 83       	st	Z, r24
    2216:	91 83       	std	Z+1, r25	; 0x01
    2218:	a2 83       	std	Z+2, r26	; 0x02
    221a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    221c:	fe 01       	movw	r30, r28
    221e:	e3 5b       	subi	r30, 0xB3	; 179
    2220:	ff 4f       	sbci	r31, 0xFF	; 255
    2222:	60 81       	ld	r22, Z
    2224:	71 81       	ldd	r23, Z+1	; 0x01
    2226:	82 81       	ldd	r24, Z+2	; 0x02
    2228:	93 81       	ldd	r25, Z+3	; 0x03
    222a:	20 e0       	ldi	r18, 0x00	; 0
    222c:	30 e0       	ldi	r19, 0x00	; 0
    222e:	40 e8       	ldi	r20, 0x80	; 128
    2230:	5f e3       	ldi	r21, 0x3F	; 63
    2232:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2236:	88 23       	and	r24, r24
    2238:	44 f4       	brge	.+16     	; 0x224a <LCD_sendCommand+0x20e>
		__ticks = 1;
    223a:	fe 01       	movw	r30, r28
    223c:	e5 5b       	subi	r30, 0xB5	; 181
    223e:	ff 4f       	sbci	r31, 0xFF	; 255
    2240:	81 e0       	ldi	r24, 0x01	; 1
    2242:	90 e0       	ldi	r25, 0x00	; 0
    2244:	91 83       	std	Z+1, r25	; 0x01
    2246:	80 83       	st	Z, r24
    2248:	64 c0       	rjmp	.+200    	; 0x2312 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    224a:	fe 01       	movw	r30, r28
    224c:	e3 5b       	subi	r30, 0xB3	; 179
    224e:	ff 4f       	sbci	r31, 0xFF	; 255
    2250:	60 81       	ld	r22, Z
    2252:	71 81       	ldd	r23, Z+1	; 0x01
    2254:	82 81       	ldd	r24, Z+2	; 0x02
    2256:	93 81       	ldd	r25, Z+3	; 0x03
    2258:	20 e0       	ldi	r18, 0x00	; 0
    225a:	3f ef       	ldi	r19, 0xFF	; 255
    225c:	4f e7       	ldi	r20, 0x7F	; 127
    225e:	57 e4       	ldi	r21, 0x47	; 71
    2260:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2264:	18 16       	cp	r1, r24
    2266:	0c f0       	brlt	.+2      	; 0x226a <LCD_sendCommand+0x22e>
    2268:	43 c0       	rjmp	.+134    	; 0x22f0 <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    226a:	fe 01       	movw	r30, r28
    226c:	ef 5a       	subi	r30, 0xAF	; 175
    226e:	ff 4f       	sbci	r31, 0xFF	; 255
    2270:	60 81       	ld	r22, Z
    2272:	71 81       	ldd	r23, Z+1	; 0x01
    2274:	82 81       	ldd	r24, Z+2	; 0x02
    2276:	93 81       	ldd	r25, Z+3	; 0x03
    2278:	20 e0       	ldi	r18, 0x00	; 0
    227a:	30 e0       	ldi	r19, 0x00	; 0
    227c:	40 e2       	ldi	r20, 0x20	; 32
    227e:	51 e4       	ldi	r21, 0x41	; 65
    2280:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2284:	dc 01       	movw	r26, r24
    2286:	cb 01       	movw	r24, r22
    2288:	8e 01       	movw	r16, r28
    228a:	05 5b       	subi	r16, 0xB5	; 181
    228c:	1f 4f       	sbci	r17, 0xFF	; 255
    228e:	bc 01       	movw	r22, r24
    2290:	cd 01       	movw	r24, r26
    2292:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2296:	dc 01       	movw	r26, r24
    2298:	cb 01       	movw	r24, r22
    229a:	f8 01       	movw	r30, r16
    229c:	91 83       	std	Z+1, r25	; 0x01
    229e:	80 83       	st	Z, r24
    22a0:	1f c0       	rjmp	.+62     	; 0x22e0 <LCD_sendCommand+0x2a4>
    22a2:	fe 01       	movw	r30, r28
    22a4:	e7 5b       	subi	r30, 0xB7	; 183
    22a6:	ff 4f       	sbci	r31, 0xFF	; 255
    22a8:	88 ec       	ldi	r24, 0xC8	; 200
    22aa:	90 e0       	ldi	r25, 0x00	; 0
    22ac:	91 83       	std	Z+1, r25	; 0x01
    22ae:	80 83       	st	Z, r24
    22b0:	fe 01       	movw	r30, r28
    22b2:	e7 5b       	subi	r30, 0xB7	; 183
    22b4:	ff 4f       	sbci	r31, 0xFF	; 255
    22b6:	80 81       	ld	r24, Z
    22b8:	91 81       	ldd	r25, Z+1	; 0x01
    22ba:	01 97       	sbiw	r24, 0x01	; 1
    22bc:	f1 f7       	brne	.-4      	; 0x22ba <LCD_sendCommand+0x27e>
    22be:	fe 01       	movw	r30, r28
    22c0:	e7 5b       	subi	r30, 0xB7	; 183
    22c2:	ff 4f       	sbci	r31, 0xFF	; 255
    22c4:	91 83       	std	Z+1, r25	; 0x01
    22c6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22c8:	de 01       	movw	r26, r28
    22ca:	a5 5b       	subi	r26, 0xB5	; 181
    22cc:	bf 4f       	sbci	r27, 0xFF	; 255
    22ce:	fe 01       	movw	r30, r28
    22d0:	e5 5b       	subi	r30, 0xB5	; 181
    22d2:	ff 4f       	sbci	r31, 0xFF	; 255
    22d4:	80 81       	ld	r24, Z
    22d6:	91 81       	ldd	r25, Z+1	; 0x01
    22d8:	01 97       	sbiw	r24, 0x01	; 1
    22da:	11 96       	adiw	r26, 0x01	; 1
    22dc:	9c 93       	st	X, r25
    22de:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22e0:	fe 01       	movw	r30, r28
    22e2:	e5 5b       	subi	r30, 0xB5	; 181
    22e4:	ff 4f       	sbci	r31, 0xFF	; 255
    22e6:	80 81       	ld	r24, Z
    22e8:	91 81       	ldd	r25, Z+1	; 0x01
    22ea:	00 97       	sbiw	r24, 0x00	; 0
    22ec:	d1 f6       	brne	.-76     	; 0x22a2 <LCD_sendCommand+0x266>
    22ee:	27 c0       	rjmp	.+78     	; 0x233e <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22f0:	8e 01       	movw	r16, r28
    22f2:	05 5b       	subi	r16, 0xB5	; 181
    22f4:	1f 4f       	sbci	r17, 0xFF	; 255
    22f6:	fe 01       	movw	r30, r28
    22f8:	e3 5b       	subi	r30, 0xB3	; 179
    22fa:	ff 4f       	sbci	r31, 0xFF	; 255
    22fc:	60 81       	ld	r22, Z
    22fe:	71 81       	ldd	r23, Z+1	; 0x01
    2300:	82 81       	ldd	r24, Z+2	; 0x02
    2302:	93 81       	ldd	r25, Z+3	; 0x03
    2304:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2308:	dc 01       	movw	r26, r24
    230a:	cb 01       	movw	r24, r22
    230c:	f8 01       	movw	r30, r16
    230e:	91 83       	std	Z+1, r25	; 0x01
    2310:	80 83       	st	Z, r24
    2312:	de 01       	movw	r26, r28
    2314:	a9 5b       	subi	r26, 0xB9	; 185
    2316:	bf 4f       	sbci	r27, 0xFF	; 255
    2318:	fe 01       	movw	r30, r28
    231a:	e5 5b       	subi	r30, 0xB5	; 181
    231c:	ff 4f       	sbci	r31, 0xFF	; 255
    231e:	80 81       	ld	r24, Z
    2320:	91 81       	ldd	r25, Z+1	; 0x01
    2322:	8d 93       	st	X+, r24
    2324:	9c 93       	st	X, r25
    2326:	fe 01       	movw	r30, r28
    2328:	e9 5b       	subi	r30, 0xB9	; 185
    232a:	ff 4f       	sbci	r31, 0xFF	; 255
    232c:	80 81       	ld	r24, Z
    232e:	91 81       	ldd	r25, Z+1	; 0x01
    2330:	01 97       	sbiw	r24, 0x01	; 1
    2332:	f1 f7       	brne	.-4      	; 0x2330 <LCD_sendCommand+0x2f4>
    2334:	fe 01       	movw	r30, r28
    2336:	e9 5b       	subi	r30, 0xB9	; 185
    2338:	ff 4f       	sbci	r31, 0xFF	; 255
    233a:	91 83       	std	Z+1, r25	; 0x01
    233c:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    233e:	fe 01       	movw	r30, r28
    2340:	ed 59       	subi	r30, 0x9D	; 157
    2342:	ff 4f       	sbci	r31, 0xFF	; 255
    2344:	80 81       	ld	r24, Z
    2346:	88 2f       	mov	r24, r24
    2348:	90 e0       	ldi	r25, 0x00	; 0
    234a:	80 71       	andi	r24, 0x10	; 16
    234c:	90 70       	andi	r25, 0x00	; 0
    234e:	95 95       	asr	r25
    2350:	87 95       	ror	r24
    2352:	95 95       	asr	r25
    2354:	87 95       	ror	r24
    2356:	95 95       	asr	r25
    2358:	87 95       	ror	r24
    235a:	95 95       	asr	r25
    235c:	87 95       	ror	r24
    235e:	98 2f       	mov	r25, r24
    2360:	80 e0       	ldi	r24, 0x00	; 0
    2362:	62 e0       	ldi	r22, 0x02	; 2
    2364:	49 2f       	mov	r20, r25
    2366:	0e 94 85 0b 	call	0x170a	; 0x170a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    236a:	fe 01       	movw	r30, r28
    236c:	ed 59       	subi	r30, 0x9D	; 157
    236e:	ff 4f       	sbci	r31, 0xFF	; 255
    2370:	80 81       	ld	r24, Z
    2372:	88 2f       	mov	r24, r24
    2374:	90 e0       	ldi	r25, 0x00	; 0
    2376:	80 72       	andi	r24, 0x20	; 32
    2378:	90 70       	andi	r25, 0x00	; 0
    237a:	95 95       	asr	r25
    237c:	87 95       	ror	r24
    237e:	95 95       	asr	r25
    2380:	87 95       	ror	r24
    2382:	95 95       	asr	r25
    2384:	87 95       	ror	r24
    2386:	95 95       	asr	r25
    2388:	87 95       	ror	r24
    238a:	95 95       	asr	r25
    238c:	87 95       	ror	r24
    238e:	98 2f       	mov	r25, r24
    2390:	80 e0       	ldi	r24, 0x00	; 0
    2392:	63 e0       	ldi	r22, 0x03	; 3
    2394:	49 2f       	mov	r20, r25
    2396:	0e 94 85 0b 	call	0x170a	; 0x170a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    239a:	fe 01       	movw	r30, r28
    239c:	ed 59       	subi	r30, 0x9D	; 157
    239e:	ff 4f       	sbci	r31, 0xFF	; 255
    23a0:	80 81       	ld	r24, Z
    23a2:	88 2f       	mov	r24, r24
    23a4:	90 e0       	ldi	r25, 0x00	; 0
    23a6:	80 74       	andi	r24, 0x40	; 64
    23a8:	90 70       	andi	r25, 0x00	; 0
    23aa:	08 2e       	mov	r0, r24
    23ac:	89 2f       	mov	r24, r25
    23ae:	00 0c       	add	r0, r0
    23b0:	88 1f       	adc	r24, r24
    23b2:	99 0b       	sbc	r25, r25
    23b4:	00 0c       	add	r0, r0
    23b6:	88 1f       	adc	r24, r24
    23b8:	99 1f       	adc	r25, r25
    23ba:	98 2f       	mov	r25, r24
    23bc:	80 e0       	ldi	r24, 0x00	; 0
    23be:	64 e0       	ldi	r22, 0x04	; 4
    23c0:	49 2f       	mov	r20, r25
    23c2:	0e 94 85 0b 	call	0x170a	; 0x170a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    23c6:	fe 01       	movw	r30, r28
    23c8:	ed 59       	subi	r30, 0x9D	; 157
    23ca:	ff 4f       	sbci	r31, 0xFF	; 255
    23cc:	80 81       	ld	r24, Z
    23ce:	98 2f       	mov	r25, r24
    23d0:	99 1f       	adc	r25, r25
    23d2:	99 27       	eor	r25, r25
    23d4:	99 1f       	adc	r25, r25
    23d6:	80 e0       	ldi	r24, 0x00	; 0
    23d8:	65 e0       	ldi	r22, 0x05	; 5
    23da:	49 2f       	mov	r20, r25
    23dc:	0e 94 85 0b 	call	0x170a	; 0x170a <GPIO_writePin>
    23e0:	fe 01       	movw	r30, r28
    23e2:	ed 5b       	subi	r30, 0xBD	; 189
    23e4:	ff 4f       	sbci	r31, 0xFF	; 255
    23e6:	80 e0       	ldi	r24, 0x00	; 0
    23e8:	90 e0       	ldi	r25, 0x00	; 0
    23ea:	a0 e8       	ldi	r26, 0x80	; 128
    23ec:	bf e3       	ldi	r27, 0x3F	; 63
    23ee:	80 83       	st	Z, r24
    23f0:	91 83       	std	Z+1, r25	; 0x01
    23f2:	a2 83       	std	Z+2, r26	; 0x02
    23f4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23f6:	8e 01       	movw	r16, r28
    23f8:	01 5c       	subi	r16, 0xC1	; 193
    23fa:	1f 4f       	sbci	r17, 0xFF	; 255
    23fc:	fe 01       	movw	r30, r28
    23fe:	ed 5b       	subi	r30, 0xBD	; 189
    2400:	ff 4f       	sbci	r31, 0xFF	; 255
    2402:	60 81       	ld	r22, Z
    2404:	71 81       	ldd	r23, Z+1	; 0x01
    2406:	82 81       	ldd	r24, Z+2	; 0x02
    2408:	93 81       	ldd	r25, Z+3	; 0x03
    240a:	20 e0       	ldi	r18, 0x00	; 0
    240c:	30 e0       	ldi	r19, 0x00	; 0
    240e:	4a ef       	ldi	r20, 0xFA	; 250
    2410:	54 e4       	ldi	r21, 0x44	; 68
    2412:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2416:	dc 01       	movw	r26, r24
    2418:	cb 01       	movw	r24, r22
    241a:	f8 01       	movw	r30, r16
    241c:	80 83       	st	Z, r24
    241e:	91 83       	std	Z+1, r25	; 0x01
    2420:	a2 83       	std	Z+2, r26	; 0x02
    2422:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2424:	fe 01       	movw	r30, r28
    2426:	ff 96       	adiw	r30, 0x3f	; 63
    2428:	60 81       	ld	r22, Z
    242a:	71 81       	ldd	r23, Z+1	; 0x01
    242c:	82 81       	ldd	r24, Z+2	; 0x02
    242e:	93 81       	ldd	r25, Z+3	; 0x03
    2430:	20 e0       	ldi	r18, 0x00	; 0
    2432:	30 e0       	ldi	r19, 0x00	; 0
    2434:	40 e8       	ldi	r20, 0x80	; 128
    2436:	5f e3       	ldi	r21, 0x3F	; 63
    2438:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    243c:	88 23       	and	r24, r24
    243e:	2c f4       	brge	.+10     	; 0x244a <LCD_sendCommand+0x40e>
		__ticks = 1;
    2440:	81 e0       	ldi	r24, 0x01	; 1
    2442:	90 e0       	ldi	r25, 0x00	; 0
    2444:	9e af       	std	Y+62, r25	; 0x3e
    2446:	8d af       	std	Y+61, r24	; 0x3d
    2448:	46 c0       	rjmp	.+140    	; 0x24d6 <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    244a:	fe 01       	movw	r30, r28
    244c:	ff 96       	adiw	r30, 0x3f	; 63
    244e:	60 81       	ld	r22, Z
    2450:	71 81       	ldd	r23, Z+1	; 0x01
    2452:	82 81       	ldd	r24, Z+2	; 0x02
    2454:	93 81       	ldd	r25, Z+3	; 0x03
    2456:	20 e0       	ldi	r18, 0x00	; 0
    2458:	3f ef       	ldi	r19, 0xFF	; 255
    245a:	4f e7       	ldi	r20, 0x7F	; 127
    245c:	57 e4       	ldi	r21, 0x47	; 71
    245e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2462:	18 16       	cp	r1, r24
    2464:	64 f5       	brge	.+88     	; 0x24be <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2466:	fe 01       	movw	r30, r28
    2468:	ed 5b       	subi	r30, 0xBD	; 189
    246a:	ff 4f       	sbci	r31, 0xFF	; 255
    246c:	60 81       	ld	r22, Z
    246e:	71 81       	ldd	r23, Z+1	; 0x01
    2470:	82 81       	ldd	r24, Z+2	; 0x02
    2472:	93 81       	ldd	r25, Z+3	; 0x03
    2474:	20 e0       	ldi	r18, 0x00	; 0
    2476:	30 e0       	ldi	r19, 0x00	; 0
    2478:	40 e2       	ldi	r20, 0x20	; 32
    247a:	51 e4       	ldi	r21, 0x41	; 65
    247c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2480:	dc 01       	movw	r26, r24
    2482:	cb 01       	movw	r24, r22
    2484:	bc 01       	movw	r22, r24
    2486:	cd 01       	movw	r24, r26
    2488:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    248c:	dc 01       	movw	r26, r24
    248e:	cb 01       	movw	r24, r22
    2490:	9e af       	std	Y+62, r25	; 0x3e
    2492:	8d af       	std	Y+61, r24	; 0x3d
    2494:	0f c0       	rjmp	.+30     	; 0x24b4 <LCD_sendCommand+0x478>
    2496:	88 ec       	ldi	r24, 0xC8	; 200
    2498:	90 e0       	ldi	r25, 0x00	; 0
    249a:	9c af       	std	Y+60, r25	; 0x3c
    249c:	8b af       	std	Y+59, r24	; 0x3b
    249e:	8b ad       	ldd	r24, Y+59	; 0x3b
    24a0:	9c ad       	ldd	r25, Y+60	; 0x3c
    24a2:	01 97       	sbiw	r24, 0x01	; 1
    24a4:	f1 f7       	brne	.-4      	; 0x24a2 <LCD_sendCommand+0x466>
    24a6:	9c af       	std	Y+60, r25	; 0x3c
    24a8:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24aa:	8d ad       	ldd	r24, Y+61	; 0x3d
    24ac:	9e ad       	ldd	r25, Y+62	; 0x3e
    24ae:	01 97       	sbiw	r24, 0x01	; 1
    24b0:	9e af       	std	Y+62, r25	; 0x3e
    24b2:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24b4:	8d ad       	ldd	r24, Y+61	; 0x3d
    24b6:	9e ad       	ldd	r25, Y+62	; 0x3e
    24b8:	00 97       	sbiw	r24, 0x00	; 0
    24ba:	69 f7       	brne	.-38     	; 0x2496 <LCD_sendCommand+0x45a>
    24bc:	16 c0       	rjmp	.+44     	; 0x24ea <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24be:	fe 01       	movw	r30, r28
    24c0:	ff 96       	adiw	r30, 0x3f	; 63
    24c2:	60 81       	ld	r22, Z
    24c4:	71 81       	ldd	r23, Z+1	; 0x01
    24c6:	82 81       	ldd	r24, Z+2	; 0x02
    24c8:	93 81       	ldd	r25, Z+3	; 0x03
    24ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ce:	dc 01       	movw	r26, r24
    24d0:	cb 01       	movw	r24, r22
    24d2:	9e af       	std	Y+62, r25	; 0x3e
    24d4:	8d af       	std	Y+61, r24	; 0x3d
    24d6:	8d ad       	ldd	r24, Y+61	; 0x3d
    24d8:	9e ad       	ldd	r25, Y+62	; 0x3e
    24da:	9a af       	std	Y+58, r25	; 0x3a
    24dc:	89 af       	std	Y+57, r24	; 0x39
    24de:	89 ad       	ldd	r24, Y+57	; 0x39
    24e0:	9a ad       	ldd	r25, Y+58	; 0x3a
    24e2:	01 97       	sbiw	r24, 0x01	; 1
    24e4:	f1 f7       	brne	.-4      	; 0x24e2 <LCD_sendCommand+0x4a6>
    24e6:	9a af       	std	Y+58, r25	; 0x3a
    24e8:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    24ea:	80 e0       	ldi	r24, 0x00	; 0
    24ec:	61 e0       	ldi	r22, 0x01	; 1
    24ee:	40 e0       	ldi	r20, 0x00	; 0
    24f0:	0e 94 85 0b 	call	0x170a	; 0x170a <GPIO_writePin>
    24f4:	80 e0       	ldi	r24, 0x00	; 0
    24f6:	90 e0       	ldi	r25, 0x00	; 0
    24f8:	a0 e8       	ldi	r26, 0x80	; 128
    24fa:	bf e3       	ldi	r27, 0x3F	; 63
    24fc:	8d ab       	std	Y+53, r24	; 0x35
    24fe:	9e ab       	std	Y+54, r25	; 0x36
    2500:	af ab       	std	Y+55, r26	; 0x37
    2502:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2504:	6d a9       	ldd	r22, Y+53	; 0x35
    2506:	7e a9       	ldd	r23, Y+54	; 0x36
    2508:	8f a9       	ldd	r24, Y+55	; 0x37
    250a:	98 ad       	ldd	r25, Y+56	; 0x38
    250c:	20 e0       	ldi	r18, 0x00	; 0
    250e:	30 e0       	ldi	r19, 0x00	; 0
    2510:	4a ef       	ldi	r20, 0xFA	; 250
    2512:	54 e4       	ldi	r21, 0x44	; 68
    2514:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2518:	dc 01       	movw	r26, r24
    251a:	cb 01       	movw	r24, r22
    251c:	89 ab       	std	Y+49, r24	; 0x31
    251e:	9a ab       	std	Y+50, r25	; 0x32
    2520:	ab ab       	std	Y+51, r26	; 0x33
    2522:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2524:	69 a9       	ldd	r22, Y+49	; 0x31
    2526:	7a a9       	ldd	r23, Y+50	; 0x32
    2528:	8b a9       	ldd	r24, Y+51	; 0x33
    252a:	9c a9       	ldd	r25, Y+52	; 0x34
    252c:	20 e0       	ldi	r18, 0x00	; 0
    252e:	30 e0       	ldi	r19, 0x00	; 0
    2530:	40 e8       	ldi	r20, 0x80	; 128
    2532:	5f e3       	ldi	r21, 0x3F	; 63
    2534:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2538:	88 23       	and	r24, r24
    253a:	2c f4       	brge	.+10     	; 0x2546 <LCD_sendCommand+0x50a>
		__ticks = 1;
    253c:	81 e0       	ldi	r24, 0x01	; 1
    253e:	90 e0       	ldi	r25, 0x00	; 0
    2540:	98 ab       	std	Y+48, r25	; 0x30
    2542:	8f a7       	std	Y+47, r24	; 0x2f
    2544:	3f c0       	rjmp	.+126    	; 0x25c4 <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    2546:	69 a9       	ldd	r22, Y+49	; 0x31
    2548:	7a a9       	ldd	r23, Y+50	; 0x32
    254a:	8b a9       	ldd	r24, Y+51	; 0x33
    254c:	9c a9       	ldd	r25, Y+52	; 0x34
    254e:	20 e0       	ldi	r18, 0x00	; 0
    2550:	3f ef       	ldi	r19, 0xFF	; 255
    2552:	4f e7       	ldi	r20, 0x7F	; 127
    2554:	57 e4       	ldi	r21, 0x47	; 71
    2556:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    255a:	18 16       	cp	r1, r24
    255c:	4c f5       	brge	.+82     	; 0x25b0 <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    255e:	6d a9       	ldd	r22, Y+53	; 0x35
    2560:	7e a9       	ldd	r23, Y+54	; 0x36
    2562:	8f a9       	ldd	r24, Y+55	; 0x37
    2564:	98 ad       	ldd	r25, Y+56	; 0x38
    2566:	20 e0       	ldi	r18, 0x00	; 0
    2568:	30 e0       	ldi	r19, 0x00	; 0
    256a:	40 e2       	ldi	r20, 0x20	; 32
    256c:	51 e4       	ldi	r21, 0x41	; 65
    256e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2572:	dc 01       	movw	r26, r24
    2574:	cb 01       	movw	r24, r22
    2576:	bc 01       	movw	r22, r24
    2578:	cd 01       	movw	r24, r26
    257a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    257e:	dc 01       	movw	r26, r24
    2580:	cb 01       	movw	r24, r22
    2582:	98 ab       	std	Y+48, r25	; 0x30
    2584:	8f a7       	std	Y+47, r24	; 0x2f
    2586:	0f c0       	rjmp	.+30     	; 0x25a6 <LCD_sendCommand+0x56a>
    2588:	88 ec       	ldi	r24, 0xC8	; 200
    258a:	90 e0       	ldi	r25, 0x00	; 0
    258c:	9e a7       	std	Y+46, r25	; 0x2e
    258e:	8d a7       	std	Y+45, r24	; 0x2d
    2590:	8d a5       	ldd	r24, Y+45	; 0x2d
    2592:	9e a5       	ldd	r25, Y+46	; 0x2e
    2594:	01 97       	sbiw	r24, 0x01	; 1
    2596:	f1 f7       	brne	.-4      	; 0x2594 <LCD_sendCommand+0x558>
    2598:	9e a7       	std	Y+46, r25	; 0x2e
    259a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    259c:	8f a5       	ldd	r24, Y+47	; 0x2f
    259e:	98 a9       	ldd	r25, Y+48	; 0x30
    25a0:	01 97       	sbiw	r24, 0x01	; 1
    25a2:	98 ab       	std	Y+48, r25	; 0x30
    25a4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25a6:	8f a5       	ldd	r24, Y+47	; 0x2f
    25a8:	98 a9       	ldd	r25, Y+48	; 0x30
    25aa:	00 97       	sbiw	r24, 0x00	; 0
    25ac:	69 f7       	brne	.-38     	; 0x2588 <LCD_sendCommand+0x54c>
    25ae:	14 c0       	rjmp	.+40     	; 0x25d8 <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25b0:	69 a9       	ldd	r22, Y+49	; 0x31
    25b2:	7a a9       	ldd	r23, Y+50	; 0x32
    25b4:	8b a9       	ldd	r24, Y+51	; 0x33
    25b6:	9c a9       	ldd	r25, Y+52	; 0x34
    25b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25bc:	dc 01       	movw	r26, r24
    25be:	cb 01       	movw	r24, r22
    25c0:	98 ab       	std	Y+48, r25	; 0x30
    25c2:	8f a7       	std	Y+47, r24	; 0x2f
    25c4:	8f a5       	ldd	r24, Y+47	; 0x2f
    25c6:	98 a9       	ldd	r25, Y+48	; 0x30
    25c8:	9c a7       	std	Y+44, r25	; 0x2c
    25ca:	8b a7       	std	Y+43, r24	; 0x2b
    25cc:	8b a5       	ldd	r24, Y+43	; 0x2b
    25ce:	9c a5       	ldd	r25, Y+44	; 0x2c
    25d0:	01 97       	sbiw	r24, 0x01	; 1
    25d2:	f1 f7       	brne	.-4      	; 0x25d0 <LCD_sendCommand+0x594>
    25d4:	9c a7       	std	Y+44, r25	; 0x2c
    25d6:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    25d8:	80 e0       	ldi	r24, 0x00	; 0
    25da:	61 e0       	ldi	r22, 0x01	; 1
    25dc:	41 e0       	ldi	r20, 0x01	; 1
    25de:	0e 94 85 0b 	call	0x170a	; 0x170a <GPIO_writePin>
    25e2:	80 e0       	ldi	r24, 0x00	; 0
    25e4:	90 e0       	ldi	r25, 0x00	; 0
    25e6:	a0 e8       	ldi	r26, 0x80	; 128
    25e8:	bf e3       	ldi	r27, 0x3F	; 63
    25ea:	8f a3       	std	Y+39, r24	; 0x27
    25ec:	98 a7       	std	Y+40, r25	; 0x28
    25ee:	a9 a7       	std	Y+41, r26	; 0x29
    25f0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25f2:	6f a1       	ldd	r22, Y+39	; 0x27
    25f4:	78 a5       	ldd	r23, Y+40	; 0x28
    25f6:	89 a5       	ldd	r24, Y+41	; 0x29
    25f8:	9a a5       	ldd	r25, Y+42	; 0x2a
    25fa:	20 e0       	ldi	r18, 0x00	; 0
    25fc:	30 e0       	ldi	r19, 0x00	; 0
    25fe:	4a ef       	ldi	r20, 0xFA	; 250
    2600:	54 e4       	ldi	r21, 0x44	; 68
    2602:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2606:	dc 01       	movw	r26, r24
    2608:	cb 01       	movw	r24, r22
    260a:	8b a3       	std	Y+35, r24	; 0x23
    260c:	9c a3       	std	Y+36, r25	; 0x24
    260e:	ad a3       	std	Y+37, r26	; 0x25
    2610:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2612:	6b a1       	ldd	r22, Y+35	; 0x23
    2614:	7c a1       	ldd	r23, Y+36	; 0x24
    2616:	8d a1       	ldd	r24, Y+37	; 0x25
    2618:	9e a1       	ldd	r25, Y+38	; 0x26
    261a:	20 e0       	ldi	r18, 0x00	; 0
    261c:	30 e0       	ldi	r19, 0x00	; 0
    261e:	40 e8       	ldi	r20, 0x80	; 128
    2620:	5f e3       	ldi	r21, 0x3F	; 63
    2622:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2626:	88 23       	and	r24, r24
    2628:	2c f4       	brge	.+10     	; 0x2634 <LCD_sendCommand+0x5f8>
		__ticks = 1;
    262a:	81 e0       	ldi	r24, 0x01	; 1
    262c:	90 e0       	ldi	r25, 0x00	; 0
    262e:	9a a3       	std	Y+34, r25	; 0x22
    2630:	89 a3       	std	Y+33, r24	; 0x21
    2632:	3f c0       	rjmp	.+126    	; 0x26b2 <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    2634:	6b a1       	ldd	r22, Y+35	; 0x23
    2636:	7c a1       	ldd	r23, Y+36	; 0x24
    2638:	8d a1       	ldd	r24, Y+37	; 0x25
    263a:	9e a1       	ldd	r25, Y+38	; 0x26
    263c:	20 e0       	ldi	r18, 0x00	; 0
    263e:	3f ef       	ldi	r19, 0xFF	; 255
    2640:	4f e7       	ldi	r20, 0x7F	; 127
    2642:	57 e4       	ldi	r21, 0x47	; 71
    2644:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2648:	18 16       	cp	r1, r24
    264a:	4c f5       	brge	.+82     	; 0x269e <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    264c:	6f a1       	ldd	r22, Y+39	; 0x27
    264e:	78 a5       	ldd	r23, Y+40	; 0x28
    2650:	89 a5       	ldd	r24, Y+41	; 0x29
    2652:	9a a5       	ldd	r25, Y+42	; 0x2a
    2654:	20 e0       	ldi	r18, 0x00	; 0
    2656:	30 e0       	ldi	r19, 0x00	; 0
    2658:	40 e2       	ldi	r20, 0x20	; 32
    265a:	51 e4       	ldi	r21, 0x41	; 65
    265c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2660:	dc 01       	movw	r26, r24
    2662:	cb 01       	movw	r24, r22
    2664:	bc 01       	movw	r22, r24
    2666:	cd 01       	movw	r24, r26
    2668:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    266c:	dc 01       	movw	r26, r24
    266e:	cb 01       	movw	r24, r22
    2670:	9a a3       	std	Y+34, r25	; 0x22
    2672:	89 a3       	std	Y+33, r24	; 0x21
    2674:	0f c0       	rjmp	.+30     	; 0x2694 <LCD_sendCommand+0x658>
    2676:	88 ec       	ldi	r24, 0xC8	; 200
    2678:	90 e0       	ldi	r25, 0x00	; 0
    267a:	98 a3       	std	Y+32, r25	; 0x20
    267c:	8f 8f       	std	Y+31, r24	; 0x1f
    267e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2680:	98 a1       	ldd	r25, Y+32	; 0x20
    2682:	01 97       	sbiw	r24, 0x01	; 1
    2684:	f1 f7       	brne	.-4      	; 0x2682 <LCD_sendCommand+0x646>
    2686:	98 a3       	std	Y+32, r25	; 0x20
    2688:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    268a:	89 a1       	ldd	r24, Y+33	; 0x21
    268c:	9a a1       	ldd	r25, Y+34	; 0x22
    268e:	01 97       	sbiw	r24, 0x01	; 1
    2690:	9a a3       	std	Y+34, r25	; 0x22
    2692:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2694:	89 a1       	ldd	r24, Y+33	; 0x21
    2696:	9a a1       	ldd	r25, Y+34	; 0x22
    2698:	00 97       	sbiw	r24, 0x00	; 0
    269a:	69 f7       	brne	.-38     	; 0x2676 <LCD_sendCommand+0x63a>
    269c:	14 c0       	rjmp	.+40     	; 0x26c6 <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    269e:	6b a1       	ldd	r22, Y+35	; 0x23
    26a0:	7c a1       	ldd	r23, Y+36	; 0x24
    26a2:	8d a1       	ldd	r24, Y+37	; 0x25
    26a4:	9e a1       	ldd	r25, Y+38	; 0x26
    26a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26aa:	dc 01       	movw	r26, r24
    26ac:	cb 01       	movw	r24, r22
    26ae:	9a a3       	std	Y+34, r25	; 0x22
    26b0:	89 a3       	std	Y+33, r24	; 0x21
    26b2:	89 a1       	ldd	r24, Y+33	; 0x21
    26b4:	9a a1       	ldd	r25, Y+34	; 0x22
    26b6:	9e 8f       	std	Y+30, r25	; 0x1e
    26b8:	8d 8f       	std	Y+29, r24	; 0x1d
    26ba:	8d 8d       	ldd	r24, Y+29	; 0x1d
    26bc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    26be:	01 97       	sbiw	r24, 0x01	; 1
    26c0:	f1 f7       	brne	.-4      	; 0x26be <LCD_sendCommand+0x682>
    26c2:	9e 8f       	std	Y+30, r25	; 0x1e
    26c4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    26c6:	fe 01       	movw	r30, r28
    26c8:	ed 59       	subi	r30, 0x9D	; 157
    26ca:	ff 4f       	sbci	r31, 0xFF	; 255
    26cc:	80 81       	ld	r24, Z
    26ce:	98 2f       	mov	r25, r24
    26d0:	91 70       	andi	r25, 0x01	; 1
    26d2:	80 e0       	ldi	r24, 0x00	; 0
    26d4:	62 e0       	ldi	r22, 0x02	; 2
    26d6:	49 2f       	mov	r20, r25
    26d8:	0e 94 85 0b 	call	0x170a	; 0x170a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    26dc:	fe 01       	movw	r30, r28
    26de:	ed 59       	subi	r30, 0x9D	; 157
    26e0:	ff 4f       	sbci	r31, 0xFF	; 255
    26e2:	80 81       	ld	r24, Z
    26e4:	88 2f       	mov	r24, r24
    26e6:	90 e0       	ldi	r25, 0x00	; 0
    26e8:	82 70       	andi	r24, 0x02	; 2
    26ea:	90 70       	andi	r25, 0x00	; 0
    26ec:	95 95       	asr	r25
    26ee:	87 95       	ror	r24
    26f0:	98 2f       	mov	r25, r24
    26f2:	80 e0       	ldi	r24, 0x00	; 0
    26f4:	63 e0       	ldi	r22, 0x03	; 3
    26f6:	49 2f       	mov	r20, r25
    26f8:	0e 94 85 0b 	call	0x170a	; 0x170a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    26fc:	fe 01       	movw	r30, r28
    26fe:	ed 59       	subi	r30, 0x9D	; 157
    2700:	ff 4f       	sbci	r31, 0xFF	; 255
    2702:	80 81       	ld	r24, Z
    2704:	88 2f       	mov	r24, r24
    2706:	90 e0       	ldi	r25, 0x00	; 0
    2708:	84 70       	andi	r24, 0x04	; 4
    270a:	90 70       	andi	r25, 0x00	; 0
    270c:	95 95       	asr	r25
    270e:	87 95       	ror	r24
    2710:	95 95       	asr	r25
    2712:	87 95       	ror	r24
    2714:	98 2f       	mov	r25, r24
    2716:	80 e0       	ldi	r24, 0x00	; 0
    2718:	64 e0       	ldi	r22, 0x04	; 4
    271a:	49 2f       	mov	r20, r25
    271c:	0e 94 85 0b 	call	0x170a	; 0x170a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    2720:	fe 01       	movw	r30, r28
    2722:	ed 59       	subi	r30, 0x9D	; 157
    2724:	ff 4f       	sbci	r31, 0xFF	; 255
    2726:	80 81       	ld	r24, Z
    2728:	88 2f       	mov	r24, r24
    272a:	90 e0       	ldi	r25, 0x00	; 0
    272c:	88 70       	andi	r24, 0x08	; 8
    272e:	90 70       	andi	r25, 0x00	; 0
    2730:	95 95       	asr	r25
    2732:	87 95       	ror	r24
    2734:	95 95       	asr	r25
    2736:	87 95       	ror	r24
    2738:	95 95       	asr	r25
    273a:	87 95       	ror	r24
    273c:	98 2f       	mov	r25, r24
    273e:	80 e0       	ldi	r24, 0x00	; 0
    2740:	65 e0       	ldi	r22, 0x05	; 5
    2742:	49 2f       	mov	r20, r25
    2744:	0e 94 85 0b 	call	0x170a	; 0x170a <GPIO_writePin>
    2748:	80 e0       	ldi	r24, 0x00	; 0
    274a:	90 e0       	ldi	r25, 0x00	; 0
    274c:	a0 e8       	ldi	r26, 0x80	; 128
    274e:	bf e3       	ldi	r27, 0x3F	; 63
    2750:	89 8f       	std	Y+25, r24	; 0x19
    2752:	9a 8f       	std	Y+26, r25	; 0x1a
    2754:	ab 8f       	std	Y+27, r26	; 0x1b
    2756:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2758:	69 8d       	ldd	r22, Y+25	; 0x19
    275a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    275c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    275e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2760:	20 e0       	ldi	r18, 0x00	; 0
    2762:	30 e0       	ldi	r19, 0x00	; 0
    2764:	4a ef       	ldi	r20, 0xFA	; 250
    2766:	54 e4       	ldi	r21, 0x44	; 68
    2768:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    276c:	dc 01       	movw	r26, r24
    276e:	cb 01       	movw	r24, r22
    2770:	8d 8b       	std	Y+21, r24	; 0x15
    2772:	9e 8b       	std	Y+22, r25	; 0x16
    2774:	af 8b       	std	Y+23, r26	; 0x17
    2776:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2778:	6d 89       	ldd	r22, Y+21	; 0x15
    277a:	7e 89       	ldd	r23, Y+22	; 0x16
    277c:	8f 89       	ldd	r24, Y+23	; 0x17
    277e:	98 8d       	ldd	r25, Y+24	; 0x18
    2780:	20 e0       	ldi	r18, 0x00	; 0
    2782:	30 e0       	ldi	r19, 0x00	; 0
    2784:	40 e8       	ldi	r20, 0x80	; 128
    2786:	5f e3       	ldi	r21, 0x3F	; 63
    2788:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    278c:	88 23       	and	r24, r24
    278e:	2c f4       	brge	.+10     	; 0x279a <LCD_sendCommand+0x75e>
		__ticks = 1;
    2790:	81 e0       	ldi	r24, 0x01	; 1
    2792:	90 e0       	ldi	r25, 0x00	; 0
    2794:	9c 8b       	std	Y+20, r25	; 0x14
    2796:	8b 8b       	std	Y+19, r24	; 0x13
    2798:	3f c0       	rjmp	.+126    	; 0x2818 <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    279a:	6d 89       	ldd	r22, Y+21	; 0x15
    279c:	7e 89       	ldd	r23, Y+22	; 0x16
    279e:	8f 89       	ldd	r24, Y+23	; 0x17
    27a0:	98 8d       	ldd	r25, Y+24	; 0x18
    27a2:	20 e0       	ldi	r18, 0x00	; 0
    27a4:	3f ef       	ldi	r19, 0xFF	; 255
    27a6:	4f e7       	ldi	r20, 0x7F	; 127
    27a8:	57 e4       	ldi	r21, 0x47	; 71
    27aa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27ae:	18 16       	cp	r1, r24
    27b0:	4c f5       	brge	.+82     	; 0x2804 <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27b2:	69 8d       	ldd	r22, Y+25	; 0x19
    27b4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27ba:	20 e0       	ldi	r18, 0x00	; 0
    27bc:	30 e0       	ldi	r19, 0x00	; 0
    27be:	40 e2       	ldi	r20, 0x20	; 32
    27c0:	51 e4       	ldi	r21, 0x41	; 65
    27c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27c6:	dc 01       	movw	r26, r24
    27c8:	cb 01       	movw	r24, r22
    27ca:	bc 01       	movw	r22, r24
    27cc:	cd 01       	movw	r24, r26
    27ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27d2:	dc 01       	movw	r26, r24
    27d4:	cb 01       	movw	r24, r22
    27d6:	9c 8b       	std	Y+20, r25	; 0x14
    27d8:	8b 8b       	std	Y+19, r24	; 0x13
    27da:	0f c0       	rjmp	.+30     	; 0x27fa <LCD_sendCommand+0x7be>
    27dc:	88 ec       	ldi	r24, 0xC8	; 200
    27de:	90 e0       	ldi	r25, 0x00	; 0
    27e0:	9a 8b       	std	Y+18, r25	; 0x12
    27e2:	89 8b       	std	Y+17, r24	; 0x11
    27e4:	89 89       	ldd	r24, Y+17	; 0x11
    27e6:	9a 89       	ldd	r25, Y+18	; 0x12
    27e8:	01 97       	sbiw	r24, 0x01	; 1
    27ea:	f1 f7       	brne	.-4      	; 0x27e8 <LCD_sendCommand+0x7ac>
    27ec:	9a 8b       	std	Y+18, r25	; 0x12
    27ee:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27f0:	8b 89       	ldd	r24, Y+19	; 0x13
    27f2:	9c 89       	ldd	r25, Y+20	; 0x14
    27f4:	01 97       	sbiw	r24, 0x01	; 1
    27f6:	9c 8b       	std	Y+20, r25	; 0x14
    27f8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27fa:	8b 89       	ldd	r24, Y+19	; 0x13
    27fc:	9c 89       	ldd	r25, Y+20	; 0x14
    27fe:	00 97       	sbiw	r24, 0x00	; 0
    2800:	69 f7       	brne	.-38     	; 0x27dc <LCD_sendCommand+0x7a0>
    2802:	14 c0       	rjmp	.+40     	; 0x282c <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2804:	6d 89       	ldd	r22, Y+21	; 0x15
    2806:	7e 89       	ldd	r23, Y+22	; 0x16
    2808:	8f 89       	ldd	r24, Y+23	; 0x17
    280a:	98 8d       	ldd	r25, Y+24	; 0x18
    280c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2810:	dc 01       	movw	r26, r24
    2812:	cb 01       	movw	r24, r22
    2814:	9c 8b       	std	Y+20, r25	; 0x14
    2816:	8b 8b       	std	Y+19, r24	; 0x13
    2818:	8b 89       	ldd	r24, Y+19	; 0x13
    281a:	9c 89       	ldd	r25, Y+20	; 0x14
    281c:	98 8b       	std	Y+16, r25	; 0x10
    281e:	8f 87       	std	Y+15, r24	; 0x0f
    2820:	8f 85       	ldd	r24, Y+15	; 0x0f
    2822:	98 89       	ldd	r25, Y+16	; 0x10
    2824:	01 97       	sbiw	r24, 0x01	; 1
    2826:	f1 f7       	brne	.-4      	; 0x2824 <LCD_sendCommand+0x7e8>
    2828:	98 8b       	std	Y+16, r25	; 0x10
    282a:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    282c:	80 e0       	ldi	r24, 0x00	; 0
    282e:	61 e0       	ldi	r22, 0x01	; 1
    2830:	40 e0       	ldi	r20, 0x00	; 0
    2832:	0e 94 85 0b 	call	0x170a	; 0x170a <GPIO_writePin>
    2836:	80 e0       	ldi	r24, 0x00	; 0
    2838:	90 e0       	ldi	r25, 0x00	; 0
    283a:	a0 e8       	ldi	r26, 0x80	; 128
    283c:	bf e3       	ldi	r27, 0x3F	; 63
    283e:	8b 87       	std	Y+11, r24	; 0x0b
    2840:	9c 87       	std	Y+12, r25	; 0x0c
    2842:	ad 87       	std	Y+13, r26	; 0x0d
    2844:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2846:	6b 85       	ldd	r22, Y+11	; 0x0b
    2848:	7c 85       	ldd	r23, Y+12	; 0x0c
    284a:	8d 85       	ldd	r24, Y+13	; 0x0d
    284c:	9e 85       	ldd	r25, Y+14	; 0x0e
    284e:	20 e0       	ldi	r18, 0x00	; 0
    2850:	30 e0       	ldi	r19, 0x00	; 0
    2852:	4a ef       	ldi	r20, 0xFA	; 250
    2854:	54 e4       	ldi	r21, 0x44	; 68
    2856:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    285a:	dc 01       	movw	r26, r24
    285c:	cb 01       	movw	r24, r22
    285e:	8f 83       	std	Y+7, r24	; 0x07
    2860:	98 87       	std	Y+8, r25	; 0x08
    2862:	a9 87       	std	Y+9, r26	; 0x09
    2864:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2866:	6f 81       	ldd	r22, Y+7	; 0x07
    2868:	78 85       	ldd	r23, Y+8	; 0x08
    286a:	89 85       	ldd	r24, Y+9	; 0x09
    286c:	9a 85       	ldd	r25, Y+10	; 0x0a
    286e:	20 e0       	ldi	r18, 0x00	; 0
    2870:	30 e0       	ldi	r19, 0x00	; 0
    2872:	40 e8       	ldi	r20, 0x80	; 128
    2874:	5f e3       	ldi	r21, 0x3F	; 63
    2876:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    287a:	88 23       	and	r24, r24
    287c:	2c f4       	brge	.+10     	; 0x2888 <LCD_sendCommand+0x84c>
		__ticks = 1;
    287e:	81 e0       	ldi	r24, 0x01	; 1
    2880:	90 e0       	ldi	r25, 0x00	; 0
    2882:	9e 83       	std	Y+6, r25	; 0x06
    2884:	8d 83       	std	Y+5, r24	; 0x05
    2886:	3f c0       	rjmp	.+126    	; 0x2906 <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    2888:	6f 81       	ldd	r22, Y+7	; 0x07
    288a:	78 85       	ldd	r23, Y+8	; 0x08
    288c:	89 85       	ldd	r24, Y+9	; 0x09
    288e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2890:	20 e0       	ldi	r18, 0x00	; 0
    2892:	3f ef       	ldi	r19, 0xFF	; 255
    2894:	4f e7       	ldi	r20, 0x7F	; 127
    2896:	57 e4       	ldi	r21, 0x47	; 71
    2898:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    289c:	18 16       	cp	r1, r24
    289e:	4c f5       	brge	.+82     	; 0x28f2 <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    28a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    28a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    28a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    28a8:	20 e0       	ldi	r18, 0x00	; 0
    28aa:	30 e0       	ldi	r19, 0x00	; 0
    28ac:	40 e2       	ldi	r20, 0x20	; 32
    28ae:	51 e4       	ldi	r21, 0x41	; 65
    28b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28b4:	dc 01       	movw	r26, r24
    28b6:	cb 01       	movw	r24, r22
    28b8:	bc 01       	movw	r22, r24
    28ba:	cd 01       	movw	r24, r26
    28bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28c0:	dc 01       	movw	r26, r24
    28c2:	cb 01       	movw	r24, r22
    28c4:	9e 83       	std	Y+6, r25	; 0x06
    28c6:	8d 83       	std	Y+5, r24	; 0x05
    28c8:	0f c0       	rjmp	.+30     	; 0x28e8 <LCD_sendCommand+0x8ac>
    28ca:	88 ec       	ldi	r24, 0xC8	; 200
    28cc:	90 e0       	ldi	r25, 0x00	; 0
    28ce:	9c 83       	std	Y+4, r25	; 0x04
    28d0:	8b 83       	std	Y+3, r24	; 0x03
    28d2:	8b 81       	ldd	r24, Y+3	; 0x03
    28d4:	9c 81       	ldd	r25, Y+4	; 0x04
    28d6:	01 97       	sbiw	r24, 0x01	; 1
    28d8:	f1 f7       	brne	.-4      	; 0x28d6 <LCD_sendCommand+0x89a>
    28da:	9c 83       	std	Y+4, r25	; 0x04
    28dc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28de:	8d 81       	ldd	r24, Y+5	; 0x05
    28e0:	9e 81       	ldd	r25, Y+6	; 0x06
    28e2:	01 97       	sbiw	r24, 0x01	; 1
    28e4:	9e 83       	std	Y+6, r25	; 0x06
    28e6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28e8:	8d 81       	ldd	r24, Y+5	; 0x05
    28ea:	9e 81       	ldd	r25, Y+6	; 0x06
    28ec:	00 97       	sbiw	r24, 0x00	; 0
    28ee:	69 f7       	brne	.-38     	; 0x28ca <LCD_sendCommand+0x88e>
    28f0:	14 c0       	rjmp	.+40     	; 0x291a <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28f2:	6f 81       	ldd	r22, Y+7	; 0x07
    28f4:	78 85       	ldd	r23, Y+8	; 0x08
    28f6:	89 85       	ldd	r24, Y+9	; 0x09
    28f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    28fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28fe:	dc 01       	movw	r26, r24
    2900:	cb 01       	movw	r24, r22
    2902:	9e 83       	std	Y+6, r25	; 0x06
    2904:	8d 83       	std	Y+5, r24	; 0x05
    2906:	8d 81       	ldd	r24, Y+5	; 0x05
    2908:	9e 81       	ldd	r25, Y+6	; 0x06
    290a:	9a 83       	std	Y+2, r25	; 0x02
    290c:	89 83       	std	Y+1, r24	; 0x01
    290e:	89 81       	ldd	r24, Y+1	; 0x01
    2910:	9a 81       	ldd	r25, Y+2	; 0x02
    2912:	01 97       	sbiw	r24, 0x01	; 1
    2914:	f1 f7       	brne	.-4      	; 0x2912 <LCD_sendCommand+0x8d6>
    2916:	9a 83       	std	Y+2, r25	; 0x02
    2918:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    291a:	cd 59       	subi	r28, 0x9D	; 157
    291c:	df 4f       	sbci	r29, 0xFF	; 255
    291e:	0f b6       	in	r0, 0x3f	; 63
    2920:	f8 94       	cli
    2922:	de bf       	out	0x3e, r29	; 62
    2924:	0f be       	out	0x3f, r0	; 63
    2926:	cd bf       	out	0x3d, r28	; 61
    2928:	cf 91       	pop	r28
    292a:	df 91       	pop	r29
    292c:	1f 91       	pop	r17
    292e:	0f 91       	pop	r16
    2930:	08 95       	ret

00002932 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2932:	0f 93       	push	r16
    2934:	1f 93       	push	r17
    2936:	df 93       	push	r29
    2938:	cf 93       	push	r28
    293a:	cd b7       	in	r28, 0x3d	; 61
    293c:	de b7       	in	r29, 0x3e	; 62
    293e:	c3 56       	subi	r28, 0x63	; 99
    2940:	d0 40       	sbci	r29, 0x00	; 0
    2942:	0f b6       	in	r0, 0x3f	; 63
    2944:	f8 94       	cli
    2946:	de bf       	out	0x3e, r29	; 62
    2948:	0f be       	out	0x3f, r0	; 63
    294a:	cd bf       	out	0x3d, r28	; 61
    294c:	fe 01       	movw	r30, r28
    294e:	ed 59       	subi	r30, 0x9D	; 157
    2950:	ff 4f       	sbci	r31, 0xFF	; 255
    2952:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2954:	80 e0       	ldi	r24, 0x00	; 0
    2956:	60 e0       	ldi	r22, 0x00	; 0
    2958:	41 e0       	ldi	r20, 0x01	; 1
    295a:	0e 94 85 0b 	call	0x170a	; 0x170a <GPIO_writePin>
    295e:	fe 01       	movw	r30, r28
    2960:	e1 5a       	subi	r30, 0xA1	; 161
    2962:	ff 4f       	sbci	r31, 0xFF	; 255
    2964:	80 e0       	ldi	r24, 0x00	; 0
    2966:	90 e0       	ldi	r25, 0x00	; 0
    2968:	a0 e8       	ldi	r26, 0x80	; 128
    296a:	bf e3       	ldi	r27, 0x3F	; 63
    296c:	80 83       	st	Z, r24
    296e:	91 83       	std	Z+1, r25	; 0x01
    2970:	a2 83       	std	Z+2, r26	; 0x02
    2972:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2974:	8e 01       	movw	r16, r28
    2976:	05 5a       	subi	r16, 0xA5	; 165
    2978:	1f 4f       	sbci	r17, 0xFF	; 255
    297a:	fe 01       	movw	r30, r28
    297c:	e1 5a       	subi	r30, 0xA1	; 161
    297e:	ff 4f       	sbci	r31, 0xFF	; 255
    2980:	60 81       	ld	r22, Z
    2982:	71 81       	ldd	r23, Z+1	; 0x01
    2984:	82 81       	ldd	r24, Z+2	; 0x02
    2986:	93 81       	ldd	r25, Z+3	; 0x03
    2988:	20 e0       	ldi	r18, 0x00	; 0
    298a:	30 e0       	ldi	r19, 0x00	; 0
    298c:	4a ef       	ldi	r20, 0xFA	; 250
    298e:	54 e4       	ldi	r21, 0x44	; 68
    2990:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2994:	dc 01       	movw	r26, r24
    2996:	cb 01       	movw	r24, r22
    2998:	f8 01       	movw	r30, r16
    299a:	80 83       	st	Z, r24
    299c:	91 83       	std	Z+1, r25	; 0x01
    299e:	a2 83       	std	Z+2, r26	; 0x02
    29a0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    29a2:	fe 01       	movw	r30, r28
    29a4:	e5 5a       	subi	r30, 0xA5	; 165
    29a6:	ff 4f       	sbci	r31, 0xFF	; 255
    29a8:	60 81       	ld	r22, Z
    29aa:	71 81       	ldd	r23, Z+1	; 0x01
    29ac:	82 81       	ldd	r24, Z+2	; 0x02
    29ae:	93 81       	ldd	r25, Z+3	; 0x03
    29b0:	20 e0       	ldi	r18, 0x00	; 0
    29b2:	30 e0       	ldi	r19, 0x00	; 0
    29b4:	40 e8       	ldi	r20, 0x80	; 128
    29b6:	5f e3       	ldi	r21, 0x3F	; 63
    29b8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29bc:	88 23       	and	r24, r24
    29be:	44 f4       	brge	.+16     	; 0x29d0 <LCD_displayCharacter+0x9e>
		__ticks = 1;
    29c0:	fe 01       	movw	r30, r28
    29c2:	e7 5a       	subi	r30, 0xA7	; 167
    29c4:	ff 4f       	sbci	r31, 0xFF	; 255
    29c6:	81 e0       	ldi	r24, 0x01	; 1
    29c8:	90 e0       	ldi	r25, 0x00	; 0
    29ca:	91 83       	std	Z+1, r25	; 0x01
    29cc:	80 83       	st	Z, r24
    29ce:	64 c0       	rjmp	.+200    	; 0x2a98 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    29d0:	fe 01       	movw	r30, r28
    29d2:	e5 5a       	subi	r30, 0xA5	; 165
    29d4:	ff 4f       	sbci	r31, 0xFF	; 255
    29d6:	60 81       	ld	r22, Z
    29d8:	71 81       	ldd	r23, Z+1	; 0x01
    29da:	82 81       	ldd	r24, Z+2	; 0x02
    29dc:	93 81       	ldd	r25, Z+3	; 0x03
    29de:	20 e0       	ldi	r18, 0x00	; 0
    29e0:	3f ef       	ldi	r19, 0xFF	; 255
    29e2:	4f e7       	ldi	r20, 0x7F	; 127
    29e4:	57 e4       	ldi	r21, 0x47	; 71
    29e6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29ea:	18 16       	cp	r1, r24
    29ec:	0c f0       	brlt	.+2      	; 0x29f0 <LCD_displayCharacter+0xbe>
    29ee:	43 c0       	rjmp	.+134    	; 0x2a76 <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29f0:	fe 01       	movw	r30, r28
    29f2:	e1 5a       	subi	r30, 0xA1	; 161
    29f4:	ff 4f       	sbci	r31, 0xFF	; 255
    29f6:	60 81       	ld	r22, Z
    29f8:	71 81       	ldd	r23, Z+1	; 0x01
    29fa:	82 81       	ldd	r24, Z+2	; 0x02
    29fc:	93 81       	ldd	r25, Z+3	; 0x03
    29fe:	20 e0       	ldi	r18, 0x00	; 0
    2a00:	30 e0       	ldi	r19, 0x00	; 0
    2a02:	40 e2       	ldi	r20, 0x20	; 32
    2a04:	51 e4       	ldi	r21, 0x41	; 65
    2a06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a0a:	dc 01       	movw	r26, r24
    2a0c:	cb 01       	movw	r24, r22
    2a0e:	8e 01       	movw	r16, r28
    2a10:	07 5a       	subi	r16, 0xA7	; 167
    2a12:	1f 4f       	sbci	r17, 0xFF	; 255
    2a14:	bc 01       	movw	r22, r24
    2a16:	cd 01       	movw	r24, r26
    2a18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a1c:	dc 01       	movw	r26, r24
    2a1e:	cb 01       	movw	r24, r22
    2a20:	f8 01       	movw	r30, r16
    2a22:	91 83       	std	Z+1, r25	; 0x01
    2a24:	80 83       	st	Z, r24
    2a26:	1f c0       	rjmp	.+62     	; 0x2a66 <LCD_displayCharacter+0x134>
    2a28:	fe 01       	movw	r30, r28
    2a2a:	e9 5a       	subi	r30, 0xA9	; 169
    2a2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a2e:	88 ec       	ldi	r24, 0xC8	; 200
    2a30:	90 e0       	ldi	r25, 0x00	; 0
    2a32:	91 83       	std	Z+1, r25	; 0x01
    2a34:	80 83       	st	Z, r24
    2a36:	fe 01       	movw	r30, r28
    2a38:	e9 5a       	subi	r30, 0xA9	; 169
    2a3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a3c:	80 81       	ld	r24, Z
    2a3e:	91 81       	ldd	r25, Z+1	; 0x01
    2a40:	01 97       	sbiw	r24, 0x01	; 1
    2a42:	f1 f7       	brne	.-4      	; 0x2a40 <LCD_displayCharacter+0x10e>
    2a44:	fe 01       	movw	r30, r28
    2a46:	e9 5a       	subi	r30, 0xA9	; 169
    2a48:	ff 4f       	sbci	r31, 0xFF	; 255
    2a4a:	91 83       	std	Z+1, r25	; 0x01
    2a4c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a4e:	de 01       	movw	r26, r28
    2a50:	a7 5a       	subi	r26, 0xA7	; 167
    2a52:	bf 4f       	sbci	r27, 0xFF	; 255
    2a54:	fe 01       	movw	r30, r28
    2a56:	e7 5a       	subi	r30, 0xA7	; 167
    2a58:	ff 4f       	sbci	r31, 0xFF	; 255
    2a5a:	80 81       	ld	r24, Z
    2a5c:	91 81       	ldd	r25, Z+1	; 0x01
    2a5e:	01 97       	sbiw	r24, 0x01	; 1
    2a60:	11 96       	adiw	r26, 0x01	; 1
    2a62:	9c 93       	st	X, r25
    2a64:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a66:	fe 01       	movw	r30, r28
    2a68:	e7 5a       	subi	r30, 0xA7	; 167
    2a6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a6c:	80 81       	ld	r24, Z
    2a6e:	91 81       	ldd	r25, Z+1	; 0x01
    2a70:	00 97       	sbiw	r24, 0x00	; 0
    2a72:	d1 f6       	brne	.-76     	; 0x2a28 <LCD_displayCharacter+0xf6>
    2a74:	27 c0       	rjmp	.+78     	; 0x2ac4 <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a76:	8e 01       	movw	r16, r28
    2a78:	07 5a       	subi	r16, 0xA7	; 167
    2a7a:	1f 4f       	sbci	r17, 0xFF	; 255
    2a7c:	fe 01       	movw	r30, r28
    2a7e:	e5 5a       	subi	r30, 0xA5	; 165
    2a80:	ff 4f       	sbci	r31, 0xFF	; 255
    2a82:	60 81       	ld	r22, Z
    2a84:	71 81       	ldd	r23, Z+1	; 0x01
    2a86:	82 81       	ldd	r24, Z+2	; 0x02
    2a88:	93 81       	ldd	r25, Z+3	; 0x03
    2a8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a8e:	dc 01       	movw	r26, r24
    2a90:	cb 01       	movw	r24, r22
    2a92:	f8 01       	movw	r30, r16
    2a94:	91 83       	std	Z+1, r25	; 0x01
    2a96:	80 83       	st	Z, r24
    2a98:	de 01       	movw	r26, r28
    2a9a:	ab 5a       	subi	r26, 0xAB	; 171
    2a9c:	bf 4f       	sbci	r27, 0xFF	; 255
    2a9e:	fe 01       	movw	r30, r28
    2aa0:	e7 5a       	subi	r30, 0xA7	; 167
    2aa2:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa4:	80 81       	ld	r24, Z
    2aa6:	91 81       	ldd	r25, Z+1	; 0x01
    2aa8:	8d 93       	st	X+, r24
    2aaa:	9c 93       	st	X, r25
    2aac:	fe 01       	movw	r30, r28
    2aae:	eb 5a       	subi	r30, 0xAB	; 171
    2ab0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab2:	80 81       	ld	r24, Z
    2ab4:	91 81       	ldd	r25, Z+1	; 0x01
    2ab6:	01 97       	sbiw	r24, 0x01	; 1
    2ab8:	f1 f7       	brne	.-4      	; 0x2ab6 <LCD_displayCharacter+0x184>
    2aba:	fe 01       	movw	r30, r28
    2abc:	eb 5a       	subi	r30, 0xAB	; 171
    2abe:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac0:	91 83       	std	Z+1, r25	; 0x01
    2ac2:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2ac4:	80 e0       	ldi	r24, 0x00	; 0
    2ac6:	61 e0       	ldi	r22, 0x01	; 1
    2ac8:	41 e0       	ldi	r20, 0x01	; 1
    2aca:	0e 94 85 0b 	call	0x170a	; 0x170a <GPIO_writePin>
    2ace:	fe 01       	movw	r30, r28
    2ad0:	ef 5a       	subi	r30, 0xAF	; 175
    2ad2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad4:	80 e0       	ldi	r24, 0x00	; 0
    2ad6:	90 e0       	ldi	r25, 0x00	; 0
    2ad8:	a0 e8       	ldi	r26, 0x80	; 128
    2ada:	bf e3       	ldi	r27, 0x3F	; 63
    2adc:	80 83       	st	Z, r24
    2ade:	91 83       	std	Z+1, r25	; 0x01
    2ae0:	a2 83       	std	Z+2, r26	; 0x02
    2ae2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ae4:	8e 01       	movw	r16, r28
    2ae6:	03 5b       	subi	r16, 0xB3	; 179
    2ae8:	1f 4f       	sbci	r17, 0xFF	; 255
    2aea:	fe 01       	movw	r30, r28
    2aec:	ef 5a       	subi	r30, 0xAF	; 175
    2aee:	ff 4f       	sbci	r31, 0xFF	; 255
    2af0:	60 81       	ld	r22, Z
    2af2:	71 81       	ldd	r23, Z+1	; 0x01
    2af4:	82 81       	ldd	r24, Z+2	; 0x02
    2af6:	93 81       	ldd	r25, Z+3	; 0x03
    2af8:	20 e0       	ldi	r18, 0x00	; 0
    2afa:	30 e0       	ldi	r19, 0x00	; 0
    2afc:	4a ef       	ldi	r20, 0xFA	; 250
    2afe:	54 e4       	ldi	r21, 0x44	; 68
    2b00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b04:	dc 01       	movw	r26, r24
    2b06:	cb 01       	movw	r24, r22
    2b08:	f8 01       	movw	r30, r16
    2b0a:	80 83       	st	Z, r24
    2b0c:	91 83       	std	Z+1, r25	; 0x01
    2b0e:	a2 83       	std	Z+2, r26	; 0x02
    2b10:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b12:	fe 01       	movw	r30, r28
    2b14:	e3 5b       	subi	r30, 0xB3	; 179
    2b16:	ff 4f       	sbci	r31, 0xFF	; 255
    2b18:	60 81       	ld	r22, Z
    2b1a:	71 81       	ldd	r23, Z+1	; 0x01
    2b1c:	82 81       	ldd	r24, Z+2	; 0x02
    2b1e:	93 81       	ldd	r25, Z+3	; 0x03
    2b20:	20 e0       	ldi	r18, 0x00	; 0
    2b22:	30 e0       	ldi	r19, 0x00	; 0
    2b24:	40 e8       	ldi	r20, 0x80	; 128
    2b26:	5f e3       	ldi	r21, 0x3F	; 63
    2b28:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b2c:	88 23       	and	r24, r24
    2b2e:	44 f4       	brge	.+16     	; 0x2b40 <LCD_displayCharacter+0x20e>
		__ticks = 1;
    2b30:	fe 01       	movw	r30, r28
    2b32:	e5 5b       	subi	r30, 0xB5	; 181
    2b34:	ff 4f       	sbci	r31, 0xFF	; 255
    2b36:	81 e0       	ldi	r24, 0x01	; 1
    2b38:	90 e0       	ldi	r25, 0x00	; 0
    2b3a:	91 83       	std	Z+1, r25	; 0x01
    2b3c:	80 83       	st	Z, r24
    2b3e:	64 c0       	rjmp	.+200    	; 0x2c08 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    2b40:	fe 01       	movw	r30, r28
    2b42:	e3 5b       	subi	r30, 0xB3	; 179
    2b44:	ff 4f       	sbci	r31, 0xFF	; 255
    2b46:	60 81       	ld	r22, Z
    2b48:	71 81       	ldd	r23, Z+1	; 0x01
    2b4a:	82 81       	ldd	r24, Z+2	; 0x02
    2b4c:	93 81       	ldd	r25, Z+3	; 0x03
    2b4e:	20 e0       	ldi	r18, 0x00	; 0
    2b50:	3f ef       	ldi	r19, 0xFF	; 255
    2b52:	4f e7       	ldi	r20, 0x7F	; 127
    2b54:	57 e4       	ldi	r21, 0x47	; 71
    2b56:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b5a:	18 16       	cp	r1, r24
    2b5c:	0c f0       	brlt	.+2      	; 0x2b60 <LCD_displayCharacter+0x22e>
    2b5e:	43 c0       	rjmp	.+134    	; 0x2be6 <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b60:	fe 01       	movw	r30, r28
    2b62:	ef 5a       	subi	r30, 0xAF	; 175
    2b64:	ff 4f       	sbci	r31, 0xFF	; 255
    2b66:	60 81       	ld	r22, Z
    2b68:	71 81       	ldd	r23, Z+1	; 0x01
    2b6a:	82 81       	ldd	r24, Z+2	; 0x02
    2b6c:	93 81       	ldd	r25, Z+3	; 0x03
    2b6e:	20 e0       	ldi	r18, 0x00	; 0
    2b70:	30 e0       	ldi	r19, 0x00	; 0
    2b72:	40 e2       	ldi	r20, 0x20	; 32
    2b74:	51 e4       	ldi	r21, 0x41	; 65
    2b76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b7a:	dc 01       	movw	r26, r24
    2b7c:	cb 01       	movw	r24, r22
    2b7e:	8e 01       	movw	r16, r28
    2b80:	05 5b       	subi	r16, 0xB5	; 181
    2b82:	1f 4f       	sbci	r17, 0xFF	; 255
    2b84:	bc 01       	movw	r22, r24
    2b86:	cd 01       	movw	r24, r26
    2b88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b8c:	dc 01       	movw	r26, r24
    2b8e:	cb 01       	movw	r24, r22
    2b90:	f8 01       	movw	r30, r16
    2b92:	91 83       	std	Z+1, r25	; 0x01
    2b94:	80 83       	st	Z, r24
    2b96:	1f c0       	rjmp	.+62     	; 0x2bd6 <LCD_displayCharacter+0x2a4>
    2b98:	fe 01       	movw	r30, r28
    2b9a:	e7 5b       	subi	r30, 0xB7	; 183
    2b9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b9e:	88 ec       	ldi	r24, 0xC8	; 200
    2ba0:	90 e0       	ldi	r25, 0x00	; 0
    2ba2:	91 83       	std	Z+1, r25	; 0x01
    2ba4:	80 83       	st	Z, r24
    2ba6:	fe 01       	movw	r30, r28
    2ba8:	e7 5b       	subi	r30, 0xB7	; 183
    2baa:	ff 4f       	sbci	r31, 0xFF	; 255
    2bac:	80 81       	ld	r24, Z
    2bae:	91 81       	ldd	r25, Z+1	; 0x01
    2bb0:	01 97       	sbiw	r24, 0x01	; 1
    2bb2:	f1 f7       	brne	.-4      	; 0x2bb0 <LCD_displayCharacter+0x27e>
    2bb4:	fe 01       	movw	r30, r28
    2bb6:	e7 5b       	subi	r30, 0xB7	; 183
    2bb8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bba:	91 83       	std	Z+1, r25	; 0x01
    2bbc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bbe:	de 01       	movw	r26, r28
    2bc0:	a5 5b       	subi	r26, 0xB5	; 181
    2bc2:	bf 4f       	sbci	r27, 0xFF	; 255
    2bc4:	fe 01       	movw	r30, r28
    2bc6:	e5 5b       	subi	r30, 0xB5	; 181
    2bc8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bca:	80 81       	ld	r24, Z
    2bcc:	91 81       	ldd	r25, Z+1	; 0x01
    2bce:	01 97       	sbiw	r24, 0x01	; 1
    2bd0:	11 96       	adiw	r26, 0x01	; 1
    2bd2:	9c 93       	st	X, r25
    2bd4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bd6:	fe 01       	movw	r30, r28
    2bd8:	e5 5b       	subi	r30, 0xB5	; 181
    2bda:	ff 4f       	sbci	r31, 0xFF	; 255
    2bdc:	80 81       	ld	r24, Z
    2bde:	91 81       	ldd	r25, Z+1	; 0x01
    2be0:	00 97       	sbiw	r24, 0x00	; 0
    2be2:	d1 f6       	brne	.-76     	; 0x2b98 <LCD_displayCharacter+0x266>
    2be4:	27 c0       	rjmp	.+78     	; 0x2c34 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2be6:	8e 01       	movw	r16, r28
    2be8:	05 5b       	subi	r16, 0xB5	; 181
    2bea:	1f 4f       	sbci	r17, 0xFF	; 255
    2bec:	fe 01       	movw	r30, r28
    2bee:	e3 5b       	subi	r30, 0xB3	; 179
    2bf0:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf2:	60 81       	ld	r22, Z
    2bf4:	71 81       	ldd	r23, Z+1	; 0x01
    2bf6:	82 81       	ldd	r24, Z+2	; 0x02
    2bf8:	93 81       	ldd	r25, Z+3	; 0x03
    2bfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bfe:	dc 01       	movw	r26, r24
    2c00:	cb 01       	movw	r24, r22
    2c02:	f8 01       	movw	r30, r16
    2c04:	91 83       	std	Z+1, r25	; 0x01
    2c06:	80 83       	st	Z, r24
    2c08:	de 01       	movw	r26, r28
    2c0a:	a9 5b       	subi	r26, 0xB9	; 185
    2c0c:	bf 4f       	sbci	r27, 0xFF	; 255
    2c0e:	fe 01       	movw	r30, r28
    2c10:	e5 5b       	subi	r30, 0xB5	; 181
    2c12:	ff 4f       	sbci	r31, 0xFF	; 255
    2c14:	80 81       	ld	r24, Z
    2c16:	91 81       	ldd	r25, Z+1	; 0x01
    2c18:	8d 93       	st	X+, r24
    2c1a:	9c 93       	st	X, r25
    2c1c:	fe 01       	movw	r30, r28
    2c1e:	e9 5b       	subi	r30, 0xB9	; 185
    2c20:	ff 4f       	sbci	r31, 0xFF	; 255
    2c22:	80 81       	ld	r24, Z
    2c24:	91 81       	ldd	r25, Z+1	; 0x01
    2c26:	01 97       	sbiw	r24, 0x01	; 1
    2c28:	f1 f7       	brne	.-4      	; 0x2c26 <LCD_displayCharacter+0x2f4>
    2c2a:	fe 01       	movw	r30, r28
    2c2c:	e9 5b       	subi	r30, 0xB9	; 185
    2c2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c30:	91 83       	std	Z+1, r25	; 0x01
    2c32:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
    2c34:	fe 01       	movw	r30, r28
    2c36:	ed 59       	subi	r30, 0x9D	; 157
    2c38:	ff 4f       	sbci	r31, 0xFF	; 255
    2c3a:	80 81       	ld	r24, Z
    2c3c:	88 2f       	mov	r24, r24
    2c3e:	90 e0       	ldi	r25, 0x00	; 0
    2c40:	80 71       	andi	r24, 0x10	; 16
    2c42:	90 70       	andi	r25, 0x00	; 0
    2c44:	95 95       	asr	r25
    2c46:	87 95       	ror	r24
    2c48:	95 95       	asr	r25
    2c4a:	87 95       	ror	r24
    2c4c:	95 95       	asr	r25
    2c4e:	87 95       	ror	r24
    2c50:	95 95       	asr	r25
    2c52:	87 95       	ror	r24
    2c54:	98 2f       	mov	r25, r24
    2c56:	80 e0       	ldi	r24, 0x00	; 0
    2c58:	62 e0       	ldi	r22, 0x02	; 2
    2c5a:	49 2f       	mov	r20, r25
    2c5c:	0e 94 85 0b 	call	0x170a	; 0x170a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
    2c60:	fe 01       	movw	r30, r28
    2c62:	ed 59       	subi	r30, 0x9D	; 157
    2c64:	ff 4f       	sbci	r31, 0xFF	; 255
    2c66:	80 81       	ld	r24, Z
    2c68:	88 2f       	mov	r24, r24
    2c6a:	90 e0       	ldi	r25, 0x00	; 0
    2c6c:	80 72       	andi	r24, 0x20	; 32
    2c6e:	90 70       	andi	r25, 0x00	; 0
    2c70:	95 95       	asr	r25
    2c72:	87 95       	ror	r24
    2c74:	95 95       	asr	r25
    2c76:	87 95       	ror	r24
    2c78:	95 95       	asr	r25
    2c7a:	87 95       	ror	r24
    2c7c:	95 95       	asr	r25
    2c7e:	87 95       	ror	r24
    2c80:	95 95       	asr	r25
    2c82:	87 95       	ror	r24
    2c84:	98 2f       	mov	r25, r24
    2c86:	80 e0       	ldi	r24, 0x00	; 0
    2c88:	63 e0       	ldi	r22, 0x03	; 3
    2c8a:	49 2f       	mov	r20, r25
    2c8c:	0e 94 85 0b 	call	0x170a	; 0x170a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
    2c90:	fe 01       	movw	r30, r28
    2c92:	ed 59       	subi	r30, 0x9D	; 157
    2c94:	ff 4f       	sbci	r31, 0xFF	; 255
    2c96:	80 81       	ld	r24, Z
    2c98:	88 2f       	mov	r24, r24
    2c9a:	90 e0       	ldi	r25, 0x00	; 0
    2c9c:	80 74       	andi	r24, 0x40	; 64
    2c9e:	90 70       	andi	r25, 0x00	; 0
    2ca0:	08 2e       	mov	r0, r24
    2ca2:	89 2f       	mov	r24, r25
    2ca4:	00 0c       	add	r0, r0
    2ca6:	88 1f       	adc	r24, r24
    2ca8:	99 0b       	sbc	r25, r25
    2caa:	00 0c       	add	r0, r0
    2cac:	88 1f       	adc	r24, r24
    2cae:	99 1f       	adc	r25, r25
    2cb0:	98 2f       	mov	r25, r24
    2cb2:	80 e0       	ldi	r24, 0x00	; 0
    2cb4:	64 e0       	ldi	r22, 0x04	; 4
    2cb6:	49 2f       	mov	r20, r25
    2cb8:	0e 94 85 0b 	call	0x170a	; 0x170a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
    2cbc:	fe 01       	movw	r30, r28
    2cbe:	ed 59       	subi	r30, 0x9D	; 157
    2cc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc2:	80 81       	ld	r24, Z
    2cc4:	98 2f       	mov	r25, r24
    2cc6:	99 1f       	adc	r25, r25
    2cc8:	99 27       	eor	r25, r25
    2cca:	99 1f       	adc	r25, r25
    2ccc:	80 e0       	ldi	r24, 0x00	; 0
    2cce:	65 e0       	ldi	r22, 0x05	; 5
    2cd0:	49 2f       	mov	r20, r25
    2cd2:	0e 94 85 0b 	call	0x170a	; 0x170a <GPIO_writePin>
    2cd6:	fe 01       	movw	r30, r28
    2cd8:	ed 5b       	subi	r30, 0xBD	; 189
    2cda:	ff 4f       	sbci	r31, 0xFF	; 255
    2cdc:	80 e0       	ldi	r24, 0x00	; 0
    2cde:	90 e0       	ldi	r25, 0x00	; 0
    2ce0:	a0 e8       	ldi	r26, 0x80	; 128
    2ce2:	bf e3       	ldi	r27, 0x3F	; 63
    2ce4:	80 83       	st	Z, r24
    2ce6:	91 83       	std	Z+1, r25	; 0x01
    2ce8:	a2 83       	std	Z+2, r26	; 0x02
    2cea:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cec:	8e 01       	movw	r16, r28
    2cee:	01 5c       	subi	r16, 0xC1	; 193
    2cf0:	1f 4f       	sbci	r17, 0xFF	; 255
    2cf2:	fe 01       	movw	r30, r28
    2cf4:	ed 5b       	subi	r30, 0xBD	; 189
    2cf6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf8:	60 81       	ld	r22, Z
    2cfa:	71 81       	ldd	r23, Z+1	; 0x01
    2cfc:	82 81       	ldd	r24, Z+2	; 0x02
    2cfe:	93 81       	ldd	r25, Z+3	; 0x03
    2d00:	20 e0       	ldi	r18, 0x00	; 0
    2d02:	30 e0       	ldi	r19, 0x00	; 0
    2d04:	4a ef       	ldi	r20, 0xFA	; 250
    2d06:	54 e4       	ldi	r21, 0x44	; 68
    2d08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d0c:	dc 01       	movw	r26, r24
    2d0e:	cb 01       	movw	r24, r22
    2d10:	f8 01       	movw	r30, r16
    2d12:	80 83       	st	Z, r24
    2d14:	91 83       	std	Z+1, r25	; 0x01
    2d16:	a2 83       	std	Z+2, r26	; 0x02
    2d18:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2d1a:	fe 01       	movw	r30, r28
    2d1c:	ff 96       	adiw	r30, 0x3f	; 63
    2d1e:	60 81       	ld	r22, Z
    2d20:	71 81       	ldd	r23, Z+1	; 0x01
    2d22:	82 81       	ldd	r24, Z+2	; 0x02
    2d24:	93 81       	ldd	r25, Z+3	; 0x03
    2d26:	20 e0       	ldi	r18, 0x00	; 0
    2d28:	30 e0       	ldi	r19, 0x00	; 0
    2d2a:	40 e8       	ldi	r20, 0x80	; 128
    2d2c:	5f e3       	ldi	r21, 0x3F	; 63
    2d2e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d32:	88 23       	and	r24, r24
    2d34:	2c f4       	brge	.+10     	; 0x2d40 <LCD_displayCharacter+0x40e>
		__ticks = 1;
    2d36:	81 e0       	ldi	r24, 0x01	; 1
    2d38:	90 e0       	ldi	r25, 0x00	; 0
    2d3a:	9e af       	std	Y+62, r25	; 0x3e
    2d3c:	8d af       	std	Y+61, r24	; 0x3d
    2d3e:	46 c0       	rjmp	.+140    	; 0x2dcc <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    2d40:	fe 01       	movw	r30, r28
    2d42:	ff 96       	adiw	r30, 0x3f	; 63
    2d44:	60 81       	ld	r22, Z
    2d46:	71 81       	ldd	r23, Z+1	; 0x01
    2d48:	82 81       	ldd	r24, Z+2	; 0x02
    2d4a:	93 81       	ldd	r25, Z+3	; 0x03
    2d4c:	20 e0       	ldi	r18, 0x00	; 0
    2d4e:	3f ef       	ldi	r19, 0xFF	; 255
    2d50:	4f e7       	ldi	r20, 0x7F	; 127
    2d52:	57 e4       	ldi	r21, 0x47	; 71
    2d54:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d58:	18 16       	cp	r1, r24
    2d5a:	64 f5       	brge	.+88     	; 0x2db4 <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d5c:	fe 01       	movw	r30, r28
    2d5e:	ed 5b       	subi	r30, 0xBD	; 189
    2d60:	ff 4f       	sbci	r31, 0xFF	; 255
    2d62:	60 81       	ld	r22, Z
    2d64:	71 81       	ldd	r23, Z+1	; 0x01
    2d66:	82 81       	ldd	r24, Z+2	; 0x02
    2d68:	93 81       	ldd	r25, Z+3	; 0x03
    2d6a:	20 e0       	ldi	r18, 0x00	; 0
    2d6c:	30 e0       	ldi	r19, 0x00	; 0
    2d6e:	40 e2       	ldi	r20, 0x20	; 32
    2d70:	51 e4       	ldi	r21, 0x41	; 65
    2d72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d76:	dc 01       	movw	r26, r24
    2d78:	cb 01       	movw	r24, r22
    2d7a:	bc 01       	movw	r22, r24
    2d7c:	cd 01       	movw	r24, r26
    2d7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d82:	dc 01       	movw	r26, r24
    2d84:	cb 01       	movw	r24, r22
    2d86:	9e af       	std	Y+62, r25	; 0x3e
    2d88:	8d af       	std	Y+61, r24	; 0x3d
    2d8a:	0f c0       	rjmp	.+30     	; 0x2daa <LCD_displayCharacter+0x478>
    2d8c:	88 ec       	ldi	r24, 0xC8	; 200
    2d8e:	90 e0       	ldi	r25, 0x00	; 0
    2d90:	9c af       	std	Y+60, r25	; 0x3c
    2d92:	8b af       	std	Y+59, r24	; 0x3b
    2d94:	8b ad       	ldd	r24, Y+59	; 0x3b
    2d96:	9c ad       	ldd	r25, Y+60	; 0x3c
    2d98:	01 97       	sbiw	r24, 0x01	; 1
    2d9a:	f1 f7       	brne	.-4      	; 0x2d98 <LCD_displayCharacter+0x466>
    2d9c:	9c af       	std	Y+60, r25	; 0x3c
    2d9e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2da0:	8d ad       	ldd	r24, Y+61	; 0x3d
    2da2:	9e ad       	ldd	r25, Y+62	; 0x3e
    2da4:	01 97       	sbiw	r24, 0x01	; 1
    2da6:	9e af       	std	Y+62, r25	; 0x3e
    2da8:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2daa:	8d ad       	ldd	r24, Y+61	; 0x3d
    2dac:	9e ad       	ldd	r25, Y+62	; 0x3e
    2dae:	00 97       	sbiw	r24, 0x00	; 0
    2db0:	69 f7       	brne	.-38     	; 0x2d8c <LCD_displayCharacter+0x45a>
    2db2:	16 c0       	rjmp	.+44     	; 0x2de0 <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2db4:	fe 01       	movw	r30, r28
    2db6:	ff 96       	adiw	r30, 0x3f	; 63
    2db8:	60 81       	ld	r22, Z
    2dba:	71 81       	ldd	r23, Z+1	; 0x01
    2dbc:	82 81       	ldd	r24, Z+2	; 0x02
    2dbe:	93 81       	ldd	r25, Z+3	; 0x03
    2dc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dc4:	dc 01       	movw	r26, r24
    2dc6:	cb 01       	movw	r24, r22
    2dc8:	9e af       	std	Y+62, r25	; 0x3e
    2dca:	8d af       	std	Y+61, r24	; 0x3d
    2dcc:	8d ad       	ldd	r24, Y+61	; 0x3d
    2dce:	9e ad       	ldd	r25, Y+62	; 0x3e
    2dd0:	9a af       	std	Y+58, r25	; 0x3a
    2dd2:	89 af       	std	Y+57, r24	; 0x39
    2dd4:	89 ad       	ldd	r24, Y+57	; 0x39
    2dd6:	9a ad       	ldd	r25, Y+58	; 0x3a
    2dd8:	01 97       	sbiw	r24, 0x01	; 1
    2dda:	f1 f7       	brne	.-4      	; 0x2dd8 <LCD_displayCharacter+0x4a6>
    2ddc:	9a af       	std	Y+58, r25	; 0x3a
    2dde:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2de0:	80 e0       	ldi	r24, 0x00	; 0
    2de2:	61 e0       	ldi	r22, 0x01	; 1
    2de4:	40 e0       	ldi	r20, 0x00	; 0
    2de6:	0e 94 85 0b 	call	0x170a	; 0x170a <GPIO_writePin>
    2dea:	80 e0       	ldi	r24, 0x00	; 0
    2dec:	90 e0       	ldi	r25, 0x00	; 0
    2dee:	a0 e8       	ldi	r26, 0x80	; 128
    2df0:	bf e3       	ldi	r27, 0x3F	; 63
    2df2:	8d ab       	std	Y+53, r24	; 0x35
    2df4:	9e ab       	std	Y+54, r25	; 0x36
    2df6:	af ab       	std	Y+55, r26	; 0x37
    2df8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dfa:	6d a9       	ldd	r22, Y+53	; 0x35
    2dfc:	7e a9       	ldd	r23, Y+54	; 0x36
    2dfe:	8f a9       	ldd	r24, Y+55	; 0x37
    2e00:	98 ad       	ldd	r25, Y+56	; 0x38
    2e02:	20 e0       	ldi	r18, 0x00	; 0
    2e04:	30 e0       	ldi	r19, 0x00	; 0
    2e06:	4a ef       	ldi	r20, 0xFA	; 250
    2e08:	54 e4       	ldi	r21, 0x44	; 68
    2e0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e0e:	dc 01       	movw	r26, r24
    2e10:	cb 01       	movw	r24, r22
    2e12:	89 ab       	std	Y+49, r24	; 0x31
    2e14:	9a ab       	std	Y+50, r25	; 0x32
    2e16:	ab ab       	std	Y+51, r26	; 0x33
    2e18:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2e1a:	69 a9       	ldd	r22, Y+49	; 0x31
    2e1c:	7a a9       	ldd	r23, Y+50	; 0x32
    2e1e:	8b a9       	ldd	r24, Y+51	; 0x33
    2e20:	9c a9       	ldd	r25, Y+52	; 0x34
    2e22:	20 e0       	ldi	r18, 0x00	; 0
    2e24:	30 e0       	ldi	r19, 0x00	; 0
    2e26:	40 e8       	ldi	r20, 0x80	; 128
    2e28:	5f e3       	ldi	r21, 0x3F	; 63
    2e2a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e2e:	88 23       	and	r24, r24
    2e30:	2c f4       	brge	.+10     	; 0x2e3c <LCD_displayCharacter+0x50a>
		__ticks = 1;
    2e32:	81 e0       	ldi	r24, 0x01	; 1
    2e34:	90 e0       	ldi	r25, 0x00	; 0
    2e36:	98 ab       	std	Y+48, r25	; 0x30
    2e38:	8f a7       	std	Y+47, r24	; 0x2f
    2e3a:	3f c0       	rjmp	.+126    	; 0x2eba <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    2e3c:	69 a9       	ldd	r22, Y+49	; 0x31
    2e3e:	7a a9       	ldd	r23, Y+50	; 0x32
    2e40:	8b a9       	ldd	r24, Y+51	; 0x33
    2e42:	9c a9       	ldd	r25, Y+52	; 0x34
    2e44:	20 e0       	ldi	r18, 0x00	; 0
    2e46:	3f ef       	ldi	r19, 0xFF	; 255
    2e48:	4f e7       	ldi	r20, 0x7F	; 127
    2e4a:	57 e4       	ldi	r21, 0x47	; 71
    2e4c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e50:	18 16       	cp	r1, r24
    2e52:	4c f5       	brge	.+82     	; 0x2ea6 <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e54:	6d a9       	ldd	r22, Y+53	; 0x35
    2e56:	7e a9       	ldd	r23, Y+54	; 0x36
    2e58:	8f a9       	ldd	r24, Y+55	; 0x37
    2e5a:	98 ad       	ldd	r25, Y+56	; 0x38
    2e5c:	20 e0       	ldi	r18, 0x00	; 0
    2e5e:	30 e0       	ldi	r19, 0x00	; 0
    2e60:	40 e2       	ldi	r20, 0x20	; 32
    2e62:	51 e4       	ldi	r21, 0x41	; 65
    2e64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e68:	dc 01       	movw	r26, r24
    2e6a:	cb 01       	movw	r24, r22
    2e6c:	bc 01       	movw	r22, r24
    2e6e:	cd 01       	movw	r24, r26
    2e70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e74:	dc 01       	movw	r26, r24
    2e76:	cb 01       	movw	r24, r22
    2e78:	98 ab       	std	Y+48, r25	; 0x30
    2e7a:	8f a7       	std	Y+47, r24	; 0x2f
    2e7c:	0f c0       	rjmp	.+30     	; 0x2e9c <LCD_displayCharacter+0x56a>
    2e7e:	88 ec       	ldi	r24, 0xC8	; 200
    2e80:	90 e0       	ldi	r25, 0x00	; 0
    2e82:	9e a7       	std	Y+46, r25	; 0x2e
    2e84:	8d a7       	std	Y+45, r24	; 0x2d
    2e86:	8d a5       	ldd	r24, Y+45	; 0x2d
    2e88:	9e a5       	ldd	r25, Y+46	; 0x2e
    2e8a:	01 97       	sbiw	r24, 0x01	; 1
    2e8c:	f1 f7       	brne	.-4      	; 0x2e8a <LCD_displayCharacter+0x558>
    2e8e:	9e a7       	std	Y+46, r25	; 0x2e
    2e90:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e92:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e94:	98 a9       	ldd	r25, Y+48	; 0x30
    2e96:	01 97       	sbiw	r24, 0x01	; 1
    2e98:	98 ab       	std	Y+48, r25	; 0x30
    2e9a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e9c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e9e:	98 a9       	ldd	r25, Y+48	; 0x30
    2ea0:	00 97       	sbiw	r24, 0x00	; 0
    2ea2:	69 f7       	brne	.-38     	; 0x2e7e <LCD_displayCharacter+0x54c>
    2ea4:	14 c0       	rjmp	.+40     	; 0x2ece <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ea6:	69 a9       	ldd	r22, Y+49	; 0x31
    2ea8:	7a a9       	ldd	r23, Y+50	; 0x32
    2eaa:	8b a9       	ldd	r24, Y+51	; 0x33
    2eac:	9c a9       	ldd	r25, Y+52	; 0x34
    2eae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eb2:	dc 01       	movw	r26, r24
    2eb4:	cb 01       	movw	r24, r22
    2eb6:	98 ab       	std	Y+48, r25	; 0x30
    2eb8:	8f a7       	std	Y+47, r24	; 0x2f
    2eba:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ebc:	98 a9       	ldd	r25, Y+48	; 0x30
    2ebe:	9c a7       	std	Y+44, r25	; 0x2c
    2ec0:	8b a7       	std	Y+43, r24	; 0x2b
    2ec2:	8b a5       	ldd	r24, Y+43	; 0x2b
    2ec4:	9c a5       	ldd	r25, Y+44	; 0x2c
    2ec6:	01 97       	sbiw	r24, 0x01	; 1
    2ec8:	f1 f7       	brne	.-4      	; 0x2ec6 <LCD_displayCharacter+0x594>
    2eca:	9c a7       	std	Y+44, r25	; 0x2c
    2ecc:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2ece:	80 e0       	ldi	r24, 0x00	; 0
    2ed0:	61 e0       	ldi	r22, 0x01	; 1
    2ed2:	41 e0       	ldi	r20, 0x01	; 1
    2ed4:	0e 94 85 0b 	call	0x170a	; 0x170a <GPIO_writePin>
    2ed8:	80 e0       	ldi	r24, 0x00	; 0
    2eda:	90 e0       	ldi	r25, 0x00	; 0
    2edc:	a0 e8       	ldi	r26, 0x80	; 128
    2ede:	bf e3       	ldi	r27, 0x3F	; 63
    2ee0:	8f a3       	std	Y+39, r24	; 0x27
    2ee2:	98 a7       	std	Y+40, r25	; 0x28
    2ee4:	a9 a7       	std	Y+41, r26	; 0x29
    2ee6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ee8:	6f a1       	ldd	r22, Y+39	; 0x27
    2eea:	78 a5       	ldd	r23, Y+40	; 0x28
    2eec:	89 a5       	ldd	r24, Y+41	; 0x29
    2eee:	9a a5       	ldd	r25, Y+42	; 0x2a
    2ef0:	20 e0       	ldi	r18, 0x00	; 0
    2ef2:	30 e0       	ldi	r19, 0x00	; 0
    2ef4:	4a ef       	ldi	r20, 0xFA	; 250
    2ef6:	54 e4       	ldi	r21, 0x44	; 68
    2ef8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2efc:	dc 01       	movw	r26, r24
    2efe:	cb 01       	movw	r24, r22
    2f00:	8b a3       	std	Y+35, r24	; 0x23
    2f02:	9c a3       	std	Y+36, r25	; 0x24
    2f04:	ad a3       	std	Y+37, r26	; 0x25
    2f06:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2f08:	6b a1       	ldd	r22, Y+35	; 0x23
    2f0a:	7c a1       	ldd	r23, Y+36	; 0x24
    2f0c:	8d a1       	ldd	r24, Y+37	; 0x25
    2f0e:	9e a1       	ldd	r25, Y+38	; 0x26
    2f10:	20 e0       	ldi	r18, 0x00	; 0
    2f12:	30 e0       	ldi	r19, 0x00	; 0
    2f14:	40 e8       	ldi	r20, 0x80	; 128
    2f16:	5f e3       	ldi	r21, 0x3F	; 63
    2f18:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f1c:	88 23       	and	r24, r24
    2f1e:	2c f4       	brge	.+10     	; 0x2f2a <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    2f20:	81 e0       	ldi	r24, 0x01	; 1
    2f22:	90 e0       	ldi	r25, 0x00	; 0
    2f24:	9a a3       	std	Y+34, r25	; 0x22
    2f26:	89 a3       	std	Y+33, r24	; 0x21
    2f28:	3f c0       	rjmp	.+126    	; 0x2fa8 <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    2f2a:	6b a1       	ldd	r22, Y+35	; 0x23
    2f2c:	7c a1       	ldd	r23, Y+36	; 0x24
    2f2e:	8d a1       	ldd	r24, Y+37	; 0x25
    2f30:	9e a1       	ldd	r25, Y+38	; 0x26
    2f32:	20 e0       	ldi	r18, 0x00	; 0
    2f34:	3f ef       	ldi	r19, 0xFF	; 255
    2f36:	4f e7       	ldi	r20, 0x7F	; 127
    2f38:	57 e4       	ldi	r21, 0x47	; 71
    2f3a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f3e:	18 16       	cp	r1, r24
    2f40:	4c f5       	brge	.+82     	; 0x2f94 <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f42:	6f a1       	ldd	r22, Y+39	; 0x27
    2f44:	78 a5       	ldd	r23, Y+40	; 0x28
    2f46:	89 a5       	ldd	r24, Y+41	; 0x29
    2f48:	9a a5       	ldd	r25, Y+42	; 0x2a
    2f4a:	20 e0       	ldi	r18, 0x00	; 0
    2f4c:	30 e0       	ldi	r19, 0x00	; 0
    2f4e:	40 e2       	ldi	r20, 0x20	; 32
    2f50:	51 e4       	ldi	r21, 0x41	; 65
    2f52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f56:	dc 01       	movw	r26, r24
    2f58:	cb 01       	movw	r24, r22
    2f5a:	bc 01       	movw	r22, r24
    2f5c:	cd 01       	movw	r24, r26
    2f5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f62:	dc 01       	movw	r26, r24
    2f64:	cb 01       	movw	r24, r22
    2f66:	9a a3       	std	Y+34, r25	; 0x22
    2f68:	89 a3       	std	Y+33, r24	; 0x21
    2f6a:	0f c0       	rjmp	.+30     	; 0x2f8a <LCD_displayCharacter+0x658>
    2f6c:	88 ec       	ldi	r24, 0xC8	; 200
    2f6e:	90 e0       	ldi	r25, 0x00	; 0
    2f70:	98 a3       	std	Y+32, r25	; 0x20
    2f72:	8f 8f       	std	Y+31, r24	; 0x1f
    2f74:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2f76:	98 a1       	ldd	r25, Y+32	; 0x20
    2f78:	01 97       	sbiw	r24, 0x01	; 1
    2f7a:	f1 f7       	brne	.-4      	; 0x2f78 <LCD_displayCharacter+0x646>
    2f7c:	98 a3       	std	Y+32, r25	; 0x20
    2f7e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f80:	89 a1       	ldd	r24, Y+33	; 0x21
    2f82:	9a a1       	ldd	r25, Y+34	; 0x22
    2f84:	01 97       	sbiw	r24, 0x01	; 1
    2f86:	9a a3       	std	Y+34, r25	; 0x22
    2f88:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f8a:	89 a1       	ldd	r24, Y+33	; 0x21
    2f8c:	9a a1       	ldd	r25, Y+34	; 0x22
    2f8e:	00 97       	sbiw	r24, 0x00	; 0
    2f90:	69 f7       	brne	.-38     	; 0x2f6c <LCD_displayCharacter+0x63a>
    2f92:	14 c0       	rjmp	.+40     	; 0x2fbc <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f94:	6b a1       	ldd	r22, Y+35	; 0x23
    2f96:	7c a1       	ldd	r23, Y+36	; 0x24
    2f98:	8d a1       	ldd	r24, Y+37	; 0x25
    2f9a:	9e a1       	ldd	r25, Y+38	; 0x26
    2f9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fa0:	dc 01       	movw	r26, r24
    2fa2:	cb 01       	movw	r24, r22
    2fa4:	9a a3       	std	Y+34, r25	; 0x22
    2fa6:	89 a3       	std	Y+33, r24	; 0x21
    2fa8:	89 a1       	ldd	r24, Y+33	; 0x21
    2faa:	9a a1       	ldd	r25, Y+34	; 0x22
    2fac:	9e 8f       	std	Y+30, r25	; 0x1e
    2fae:	8d 8f       	std	Y+29, r24	; 0x1d
    2fb0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2fb2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2fb4:	01 97       	sbiw	r24, 0x01	; 1
    2fb6:	f1 f7       	brne	.-4      	; 0x2fb4 <LCD_displayCharacter+0x682>
    2fb8:	9e 8f       	std	Y+30, r25	; 0x1e
    2fba:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
    2fbc:	fe 01       	movw	r30, r28
    2fbe:	ed 59       	subi	r30, 0x9D	; 157
    2fc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2fc2:	80 81       	ld	r24, Z
    2fc4:	98 2f       	mov	r25, r24
    2fc6:	91 70       	andi	r25, 0x01	; 1
    2fc8:	80 e0       	ldi	r24, 0x00	; 0
    2fca:	62 e0       	ldi	r22, 0x02	; 2
    2fcc:	49 2f       	mov	r20, r25
    2fce:	0e 94 85 0b 	call	0x170a	; 0x170a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
    2fd2:	fe 01       	movw	r30, r28
    2fd4:	ed 59       	subi	r30, 0x9D	; 157
    2fd6:	ff 4f       	sbci	r31, 0xFF	; 255
    2fd8:	80 81       	ld	r24, Z
    2fda:	88 2f       	mov	r24, r24
    2fdc:	90 e0       	ldi	r25, 0x00	; 0
    2fde:	82 70       	andi	r24, 0x02	; 2
    2fe0:	90 70       	andi	r25, 0x00	; 0
    2fe2:	95 95       	asr	r25
    2fe4:	87 95       	ror	r24
    2fe6:	98 2f       	mov	r25, r24
    2fe8:	80 e0       	ldi	r24, 0x00	; 0
    2fea:	63 e0       	ldi	r22, 0x03	; 3
    2fec:	49 2f       	mov	r20, r25
    2fee:	0e 94 85 0b 	call	0x170a	; 0x170a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
    2ff2:	fe 01       	movw	r30, r28
    2ff4:	ed 59       	subi	r30, 0x9D	; 157
    2ff6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ff8:	80 81       	ld	r24, Z
    2ffa:	88 2f       	mov	r24, r24
    2ffc:	90 e0       	ldi	r25, 0x00	; 0
    2ffe:	84 70       	andi	r24, 0x04	; 4
    3000:	90 70       	andi	r25, 0x00	; 0
    3002:	95 95       	asr	r25
    3004:	87 95       	ror	r24
    3006:	95 95       	asr	r25
    3008:	87 95       	ror	r24
    300a:	98 2f       	mov	r25, r24
    300c:	80 e0       	ldi	r24, 0x00	; 0
    300e:	64 e0       	ldi	r22, 0x04	; 4
    3010:	49 2f       	mov	r20, r25
    3012:	0e 94 85 0b 	call	0x170a	; 0x170a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
    3016:	fe 01       	movw	r30, r28
    3018:	ed 59       	subi	r30, 0x9D	; 157
    301a:	ff 4f       	sbci	r31, 0xFF	; 255
    301c:	80 81       	ld	r24, Z
    301e:	88 2f       	mov	r24, r24
    3020:	90 e0       	ldi	r25, 0x00	; 0
    3022:	88 70       	andi	r24, 0x08	; 8
    3024:	90 70       	andi	r25, 0x00	; 0
    3026:	95 95       	asr	r25
    3028:	87 95       	ror	r24
    302a:	95 95       	asr	r25
    302c:	87 95       	ror	r24
    302e:	95 95       	asr	r25
    3030:	87 95       	ror	r24
    3032:	98 2f       	mov	r25, r24
    3034:	80 e0       	ldi	r24, 0x00	; 0
    3036:	65 e0       	ldi	r22, 0x05	; 5
    3038:	49 2f       	mov	r20, r25
    303a:	0e 94 85 0b 	call	0x170a	; 0x170a <GPIO_writePin>
    303e:	80 e0       	ldi	r24, 0x00	; 0
    3040:	90 e0       	ldi	r25, 0x00	; 0
    3042:	a0 e8       	ldi	r26, 0x80	; 128
    3044:	bf e3       	ldi	r27, 0x3F	; 63
    3046:	89 8f       	std	Y+25, r24	; 0x19
    3048:	9a 8f       	std	Y+26, r25	; 0x1a
    304a:	ab 8f       	std	Y+27, r26	; 0x1b
    304c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    304e:	69 8d       	ldd	r22, Y+25	; 0x19
    3050:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3052:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3054:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3056:	20 e0       	ldi	r18, 0x00	; 0
    3058:	30 e0       	ldi	r19, 0x00	; 0
    305a:	4a ef       	ldi	r20, 0xFA	; 250
    305c:	54 e4       	ldi	r21, 0x44	; 68
    305e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3062:	dc 01       	movw	r26, r24
    3064:	cb 01       	movw	r24, r22
    3066:	8d 8b       	std	Y+21, r24	; 0x15
    3068:	9e 8b       	std	Y+22, r25	; 0x16
    306a:	af 8b       	std	Y+23, r26	; 0x17
    306c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    306e:	6d 89       	ldd	r22, Y+21	; 0x15
    3070:	7e 89       	ldd	r23, Y+22	; 0x16
    3072:	8f 89       	ldd	r24, Y+23	; 0x17
    3074:	98 8d       	ldd	r25, Y+24	; 0x18
    3076:	20 e0       	ldi	r18, 0x00	; 0
    3078:	30 e0       	ldi	r19, 0x00	; 0
    307a:	40 e8       	ldi	r20, 0x80	; 128
    307c:	5f e3       	ldi	r21, 0x3F	; 63
    307e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3082:	88 23       	and	r24, r24
    3084:	2c f4       	brge	.+10     	; 0x3090 <LCD_displayCharacter+0x75e>
		__ticks = 1;
    3086:	81 e0       	ldi	r24, 0x01	; 1
    3088:	90 e0       	ldi	r25, 0x00	; 0
    308a:	9c 8b       	std	Y+20, r25	; 0x14
    308c:	8b 8b       	std	Y+19, r24	; 0x13
    308e:	3f c0       	rjmp	.+126    	; 0x310e <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    3090:	6d 89       	ldd	r22, Y+21	; 0x15
    3092:	7e 89       	ldd	r23, Y+22	; 0x16
    3094:	8f 89       	ldd	r24, Y+23	; 0x17
    3096:	98 8d       	ldd	r25, Y+24	; 0x18
    3098:	20 e0       	ldi	r18, 0x00	; 0
    309a:	3f ef       	ldi	r19, 0xFF	; 255
    309c:	4f e7       	ldi	r20, 0x7F	; 127
    309e:	57 e4       	ldi	r21, 0x47	; 71
    30a0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    30a4:	18 16       	cp	r1, r24
    30a6:	4c f5       	brge	.+82     	; 0x30fa <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30a8:	69 8d       	ldd	r22, Y+25	; 0x19
    30aa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    30ac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    30ae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    30b0:	20 e0       	ldi	r18, 0x00	; 0
    30b2:	30 e0       	ldi	r19, 0x00	; 0
    30b4:	40 e2       	ldi	r20, 0x20	; 32
    30b6:	51 e4       	ldi	r21, 0x41	; 65
    30b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30bc:	dc 01       	movw	r26, r24
    30be:	cb 01       	movw	r24, r22
    30c0:	bc 01       	movw	r22, r24
    30c2:	cd 01       	movw	r24, r26
    30c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30c8:	dc 01       	movw	r26, r24
    30ca:	cb 01       	movw	r24, r22
    30cc:	9c 8b       	std	Y+20, r25	; 0x14
    30ce:	8b 8b       	std	Y+19, r24	; 0x13
    30d0:	0f c0       	rjmp	.+30     	; 0x30f0 <LCD_displayCharacter+0x7be>
    30d2:	88 ec       	ldi	r24, 0xC8	; 200
    30d4:	90 e0       	ldi	r25, 0x00	; 0
    30d6:	9a 8b       	std	Y+18, r25	; 0x12
    30d8:	89 8b       	std	Y+17, r24	; 0x11
    30da:	89 89       	ldd	r24, Y+17	; 0x11
    30dc:	9a 89       	ldd	r25, Y+18	; 0x12
    30de:	01 97       	sbiw	r24, 0x01	; 1
    30e0:	f1 f7       	brne	.-4      	; 0x30de <LCD_displayCharacter+0x7ac>
    30e2:	9a 8b       	std	Y+18, r25	; 0x12
    30e4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30e6:	8b 89       	ldd	r24, Y+19	; 0x13
    30e8:	9c 89       	ldd	r25, Y+20	; 0x14
    30ea:	01 97       	sbiw	r24, 0x01	; 1
    30ec:	9c 8b       	std	Y+20, r25	; 0x14
    30ee:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30f0:	8b 89       	ldd	r24, Y+19	; 0x13
    30f2:	9c 89       	ldd	r25, Y+20	; 0x14
    30f4:	00 97       	sbiw	r24, 0x00	; 0
    30f6:	69 f7       	brne	.-38     	; 0x30d2 <LCD_displayCharacter+0x7a0>
    30f8:	14 c0       	rjmp	.+40     	; 0x3122 <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30fa:	6d 89       	ldd	r22, Y+21	; 0x15
    30fc:	7e 89       	ldd	r23, Y+22	; 0x16
    30fe:	8f 89       	ldd	r24, Y+23	; 0x17
    3100:	98 8d       	ldd	r25, Y+24	; 0x18
    3102:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3106:	dc 01       	movw	r26, r24
    3108:	cb 01       	movw	r24, r22
    310a:	9c 8b       	std	Y+20, r25	; 0x14
    310c:	8b 8b       	std	Y+19, r24	; 0x13
    310e:	8b 89       	ldd	r24, Y+19	; 0x13
    3110:	9c 89       	ldd	r25, Y+20	; 0x14
    3112:	98 8b       	std	Y+16, r25	; 0x10
    3114:	8f 87       	std	Y+15, r24	; 0x0f
    3116:	8f 85       	ldd	r24, Y+15	; 0x0f
    3118:	98 89       	ldd	r25, Y+16	; 0x10
    311a:	01 97       	sbiw	r24, 0x01	; 1
    311c:	f1 f7       	brne	.-4      	; 0x311a <LCD_displayCharacter+0x7e8>
    311e:	98 8b       	std	Y+16, r25	; 0x10
    3120:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    3122:	80 e0       	ldi	r24, 0x00	; 0
    3124:	61 e0       	ldi	r22, 0x01	; 1
    3126:	40 e0       	ldi	r20, 0x00	; 0
    3128:	0e 94 85 0b 	call	0x170a	; 0x170a <GPIO_writePin>
    312c:	80 e0       	ldi	r24, 0x00	; 0
    312e:	90 e0       	ldi	r25, 0x00	; 0
    3130:	a0 e8       	ldi	r26, 0x80	; 128
    3132:	bf e3       	ldi	r27, 0x3F	; 63
    3134:	8b 87       	std	Y+11, r24	; 0x0b
    3136:	9c 87       	std	Y+12, r25	; 0x0c
    3138:	ad 87       	std	Y+13, r26	; 0x0d
    313a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    313c:	6b 85       	ldd	r22, Y+11	; 0x0b
    313e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3140:	8d 85       	ldd	r24, Y+13	; 0x0d
    3142:	9e 85       	ldd	r25, Y+14	; 0x0e
    3144:	20 e0       	ldi	r18, 0x00	; 0
    3146:	30 e0       	ldi	r19, 0x00	; 0
    3148:	4a ef       	ldi	r20, 0xFA	; 250
    314a:	54 e4       	ldi	r21, 0x44	; 68
    314c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3150:	dc 01       	movw	r26, r24
    3152:	cb 01       	movw	r24, r22
    3154:	8f 83       	std	Y+7, r24	; 0x07
    3156:	98 87       	std	Y+8, r25	; 0x08
    3158:	a9 87       	std	Y+9, r26	; 0x09
    315a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    315c:	6f 81       	ldd	r22, Y+7	; 0x07
    315e:	78 85       	ldd	r23, Y+8	; 0x08
    3160:	89 85       	ldd	r24, Y+9	; 0x09
    3162:	9a 85       	ldd	r25, Y+10	; 0x0a
    3164:	20 e0       	ldi	r18, 0x00	; 0
    3166:	30 e0       	ldi	r19, 0x00	; 0
    3168:	40 e8       	ldi	r20, 0x80	; 128
    316a:	5f e3       	ldi	r21, 0x3F	; 63
    316c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3170:	88 23       	and	r24, r24
    3172:	2c f4       	brge	.+10     	; 0x317e <LCD_displayCharacter+0x84c>
		__ticks = 1;
    3174:	81 e0       	ldi	r24, 0x01	; 1
    3176:	90 e0       	ldi	r25, 0x00	; 0
    3178:	9e 83       	std	Y+6, r25	; 0x06
    317a:	8d 83       	std	Y+5, r24	; 0x05
    317c:	3f c0       	rjmp	.+126    	; 0x31fc <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    317e:	6f 81       	ldd	r22, Y+7	; 0x07
    3180:	78 85       	ldd	r23, Y+8	; 0x08
    3182:	89 85       	ldd	r24, Y+9	; 0x09
    3184:	9a 85       	ldd	r25, Y+10	; 0x0a
    3186:	20 e0       	ldi	r18, 0x00	; 0
    3188:	3f ef       	ldi	r19, 0xFF	; 255
    318a:	4f e7       	ldi	r20, 0x7F	; 127
    318c:	57 e4       	ldi	r21, 0x47	; 71
    318e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3192:	18 16       	cp	r1, r24
    3194:	4c f5       	brge	.+82     	; 0x31e8 <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3196:	6b 85       	ldd	r22, Y+11	; 0x0b
    3198:	7c 85       	ldd	r23, Y+12	; 0x0c
    319a:	8d 85       	ldd	r24, Y+13	; 0x0d
    319c:	9e 85       	ldd	r25, Y+14	; 0x0e
    319e:	20 e0       	ldi	r18, 0x00	; 0
    31a0:	30 e0       	ldi	r19, 0x00	; 0
    31a2:	40 e2       	ldi	r20, 0x20	; 32
    31a4:	51 e4       	ldi	r21, 0x41	; 65
    31a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31aa:	dc 01       	movw	r26, r24
    31ac:	cb 01       	movw	r24, r22
    31ae:	bc 01       	movw	r22, r24
    31b0:	cd 01       	movw	r24, r26
    31b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31b6:	dc 01       	movw	r26, r24
    31b8:	cb 01       	movw	r24, r22
    31ba:	9e 83       	std	Y+6, r25	; 0x06
    31bc:	8d 83       	std	Y+5, r24	; 0x05
    31be:	0f c0       	rjmp	.+30     	; 0x31de <LCD_displayCharacter+0x8ac>
    31c0:	88 ec       	ldi	r24, 0xC8	; 200
    31c2:	90 e0       	ldi	r25, 0x00	; 0
    31c4:	9c 83       	std	Y+4, r25	; 0x04
    31c6:	8b 83       	std	Y+3, r24	; 0x03
    31c8:	8b 81       	ldd	r24, Y+3	; 0x03
    31ca:	9c 81       	ldd	r25, Y+4	; 0x04
    31cc:	01 97       	sbiw	r24, 0x01	; 1
    31ce:	f1 f7       	brne	.-4      	; 0x31cc <LCD_displayCharacter+0x89a>
    31d0:	9c 83       	std	Y+4, r25	; 0x04
    31d2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31d4:	8d 81       	ldd	r24, Y+5	; 0x05
    31d6:	9e 81       	ldd	r25, Y+6	; 0x06
    31d8:	01 97       	sbiw	r24, 0x01	; 1
    31da:	9e 83       	std	Y+6, r25	; 0x06
    31dc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31de:	8d 81       	ldd	r24, Y+5	; 0x05
    31e0:	9e 81       	ldd	r25, Y+6	; 0x06
    31e2:	00 97       	sbiw	r24, 0x00	; 0
    31e4:	69 f7       	brne	.-38     	; 0x31c0 <LCD_displayCharacter+0x88e>
    31e6:	14 c0       	rjmp	.+40     	; 0x3210 <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31e8:	6f 81       	ldd	r22, Y+7	; 0x07
    31ea:	78 85       	ldd	r23, Y+8	; 0x08
    31ec:	89 85       	ldd	r24, Y+9	; 0x09
    31ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    31f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31f4:	dc 01       	movw	r26, r24
    31f6:	cb 01       	movw	r24, r22
    31f8:	9e 83       	std	Y+6, r25	; 0x06
    31fa:	8d 83       	std	Y+5, r24	; 0x05
    31fc:	8d 81       	ldd	r24, Y+5	; 0x05
    31fe:	9e 81       	ldd	r25, Y+6	; 0x06
    3200:	9a 83       	std	Y+2, r25	; 0x02
    3202:	89 83       	std	Y+1, r24	; 0x01
    3204:	89 81       	ldd	r24, Y+1	; 0x01
    3206:	9a 81       	ldd	r25, Y+2	; 0x02
    3208:	01 97       	sbiw	r24, 0x01	; 1
    320a:	f1 f7       	brne	.-4      	; 0x3208 <LCD_displayCharacter+0x8d6>
    320c:	9a 83       	std	Y+2, r25	; 0x02
    320e:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    3210:	cd 59       	subi	r28, 0x9D	; 157
    3212:	df 4f       	sbci	r29, 0xFF	; 255
    3214:	0f b6       	in	r0, 0x3f	; 63
    3216:	f8 94       	cli
    3218:	de bf       	out	0x3e, r29	; 62
    321a:	0f be       	out	0x3f, r0	; 63
    321c:	cd bf       	out	0x3d, r28	; 61
    321e:	cf 91       	pop	r28
    3220:	df 91       	pop	r29
    3222:	1f 91       	pop	r17
    3224:	0f 91       	pop	r16
    3226:	08 95       	ret

00003228 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    3228:	df 93       	push	r29
    322a:	cf 93       	push	r28
    322c:	00 d0       	rcall	.+0      	; 0x322e <LCD_displayString+0x6>
    322e:	0f 92       	push	r0
    3230:	cd b7       	in	r28, 0x3d	; 61
    3232:	de b7       	in	r29, 0x3e	; 62
    3234:	9b 83       	std	Y+3, r25	; 0x03
    3236:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3238:	19 82       	std	Y+1, r1	; 0x01
    323a:	0e c0       	rjmp	.+28     	; 0x3258 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    323c:	89 81       	ldd	r24, Y+1	; 0x01
    323e:	28 2f       	mov	r18, r24
    3240:	30 e0       	ldi	r19, 0x00	; 0
    3242:	8a 81       	ldd	r24, Y+2	; 0x02
    3244:	9b 81       	ldd	r25, Y+3	; 0x03
    3246:	fc 01       	movw	r30, r24
    3248:	e2 0f       	add	r30, r18
    324a:	f3 1f       	adc	r31, r19
    324c:	80 81       	ld	r24, Z
    324e:	0e 94 99 14 	call	0x2932	; 0x2932 <LCD_displayCharacter>
		i++;
    3252:	89 81       	ldd	r24, Y+1	; 0x01
    3254:	8f 5f       	subi	r24, 0xFF	; 255
    3256:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    3258:	89 81       	ldd	r24, Y+1	; 0x01
    325a:	28 2f       	mov	r18, r24
    325c:	30 e0       	ldi	r19, 0x00	; 0
    325e:	8a 81       	ldd	r24, Y+2	; 0x02
    3260:	9b 81       	ldd	r25, Y+3	; 0x03
    3262:	fc 01       	movw	r30, r24
    3264:	e2 0f       	add	r30, r18
    3266:	f3 1f       	adc	r31, r19
    3268:	80 81       	ld	r24, Z
    326a:	88 23       	and	r24, r24
    326c:	39 f7       	brne	.-50     	; 0x323c <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    326e:	0f 90       	pop	r0
    3270:	0f 90       	pop	r0
    3272:	0f 90       	pop	r0
    3274:	cf 91       	pop	r28
    3276:	df 91       	pop	r29
    3278:	08 95       	ret

0000327a <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    327a:	df 93       	push	r29
    327c:	cf 93       	push	r28
    327e:	00 d0       	rcall	.+0      	; 0x3280 <LCD_moveCursor+0x6>
    3280:	00 d0       	rcall	.+0      	; 0x3282 <LCD_moveCursor+0x8>
    3282:	0f 92       	push	r0
    3284:	cd b7       	in	r28, 0x3d	; 61
    3286:	de b7       	in	r29, 0x3e	; 62
    3288:	8a 83       	std	Y+2, r24	; 0x02
    328a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    328c:	8a 81       	ldd	r24, Y+2	; 0x02
    328e:	28 2f       	mov	r18, r24
    3290:	30 e0       	ldi	r19, 0x00	; 0
    3292:	3d 83       	std	Y+5, r19	; 0x05
    3294:	2c 83       	std	Y+4, r18	; 0x04
    3296:	8c 81       	ldd	r24, Y+4	; 0x04
    3298:	9d 81       	ldd	r25, Y+5	; 0x05
    329a:	81 30       	cpi	r24, 0x01	; 1
    329c:	91 05       	cpc	r25, r1
    329e:	c1 f0       	breq	.+48     	; 0x32d0 <LCD_moveCursor+0x56>
    32a0:	2c 81       	ldd	r18, Y+4	; 0x04
    32a2:	3d 81       	ldd	r19, Y+5	; 0x05
    32a4:	22 30       	cpi	r18, 0x02	; 2
    32a6:	31 05       	cpc	r19, r1
    32a8:	2c f4       	brge	.+10     	; 0x32b4 <LCD_moveCursor+0x3a>
    32aa:	8c 81       	ldd	r24, Y+4	; 0x04
    32ac:	9d 81       	ldd	r25, Y+5	; 0x05
    32ae:	00 97       	sbiw	r24, 0x00	; 0
    32b0:	61 f0       	breq	.+24     	; 0x32ca <LCD_moveCursor+0x50>
    32b2:	19 c0       	rjmp	.+50     	; 0x32e6 <LCD_moveCursor+0x6c>
    32b4:	2c 81       	ldd	r18, Y+4	; 0x04
    32b6:	3d 81       	ldd	r19, Y+5	; 0x05
    32b8:	22 30       	cpi	r18, 0x02	; 2
    32ba:	31 05       	cpc	r19, r1
    32bc:	69 f0       	breq	.+26     	; 0x32d8 <LCD_moveCursor+0x5e>
    32be:	8c 81       	ldd	r24, Y+4	; 0x04
    32c0:	9d 81       	ldd	r25, Y+5	; 0x05
    32c2:	83 30       	cpi	r24, 0x03	; 3
    32c4:	91 05       	cpc	r25, r1
    32c6:	61 f0       	breq	.+24     	; 0x32e0 <LCD_moveCursor+0x66>
    32c8:	0e c0       	rjmp	.+28     	; 0x32e6 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    32ca:	8b 81       	ldd	r24, Y+3	; 0x03
    32cc:	89 83       	std	Y+1, r24	; 0x01
    32ce:	0b c0       	rjmp	.+22     	; 0x32e6 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    32d0:	8b 81       	ldd	r24, Y+3	; 0x03
    32d2:	80 5c       	subi	r24, 0xC0	; 192
    32d4:	89 83       	std	Y+1, r24	; 0x01
    32d6:	07 c0       	rjmp	.+14     	; 0x32e6 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    32d8:	8b 81       	ldd	r24, Y+3	; 0x03
    32da:	80 5f       	subi	r24, 0xF0	; 240
    32dc:	89 83       	std	Y+1, r24	; 0x01
    32de:	03 c0       	rjmp	.+6      	; 0x32e6 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    32e0:	8b 81       	ldd	r24, Y+3	; 0x03
    32e2:	80 5b       	subi	r24, 0xB0	; 176
    32e4:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    32e6:	89 81       	ldd	r24, Y+1	; 0x01
    32e8:	80 68       	ori	r24, 0x80	; 128
    32ea:	0e 94 1e 10 	call	0x203c	; 0x203c <LCD_sendCommand>
}
    32ee:	0f 90       	pop	r0
    32f0:	0f 90       	pop	r0
    32f2:	0f 90       	pop	r0
    32f4:	0f 90       	pop	r0
    32f6:	0f 90       	pop	r0
    32f8:	cf 91       	pop	r28
    32fa:	df 91       	pop	r29
    32fc:	08 95       	ret

000032fe <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    32fe:	df 93       	push	r29
    3300:	cf 93       	push	r28
    3302:	00 d0       	rcall	.+0      	; 0x3304 <LCD_displayStringRowColumn+0x6>
    3304:	00 d0       	rcall	.+0      	; 0x3306 <LCD_displayStringRowColumn+0x8>
    3306:	cd b7       	in	r28, 0x3d	; 61
    3308:	de b7       	in	r29, 0x3e	; 62
    330a:	89 83       	std	Y+1, r24	; 0x01
    330c:	6a 83       	std	Y+2, r22	; 0x02
    330e:	5c 83       	std	Y+4, r21	; 0x04
    3310:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    3312:	89 81       	ldd	r24, Y+1	; 0x01
    3314:	6a 81       	ldd	r22, Y+2	; 0x02
    3316:	0e 94 3d 19 	call	0x327a	; 0x327a <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    331a:	8b 81       	ldd	r24, Y+3	; 0x03
    331c:	9c 81       	ldd	r25, Y+4	; 0x04
    331e:	0e 94 14 19 	call	0x3228	; 0x3228 <LCD_displayString>
}
    3322:	0f 90       	pop	r0
    3324:	0f 90       	pop	r0
    3326:	0f 90       	pop	r0
    3328:	0f 90       	pop	r0
    332a:	cf 91       	pop	r28
    332c:	df 91       	pop	r29
    332e:	08 95       	ret

00003330 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    3330:	df 93       	push	r29
    3332:	cf 93       	push	r28
    3334:	cd b7       	in	r28, 0x3d	; 61
    3336:	de b7       	in	r29, 0x3e	; 62
    3338:	62 97       	sbiw	r28, 0x12	; 18
    333a:	0f b6       	in	r0, 0x3f	; 63
    333c:	f8 94       	cli
    333e:	de bf       	out	0x3e, r29	; 62
    3340:	0f be       	out	0x3f, r0	; 63
    3342:	cd bf       	out	0x3d, r28	; 61
    3344:	9a 8b       	std	Y+18, r25	; 0x12
    3346:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    3348:	89 89       	ldd	r24, Y+17	; 0x11
    334a:	9a 89       	ldd	r25, Y+18	; 0x12
    334c:	9e 01       	movw	r18, r28
    334e:	2f 5f       	subi	r18, 0xFF	; 255
    3350:	3f 4f       	sbci	r19, 0xFF	; 255
    3352:	b9 01       	movw	r22, r18
    3354:	4a e0       	ldi	r20, 0x0A	; 10
    3356:	50 e0       	ldi	r21, 0x00	; 0
    3358:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <itoa>
   LCD_displayString(buff); /* Display the string */
    335c:	ce 01       	movw	r24, r28
    335e:	01 96       	adiw	r24, 0x01	; 1
    3360:	0e 94 14 19 	call	0x3228	; 0x3228 <LCD_displayString>
}
    3364:	62 96       	adiw	r28, 0x12	; 18
    3366:	0f b6       	in	r0, 0x3f	; 63
    3368:	f8 94       	cli
    336a:	de bf       	out	0x3e, r29	; 62
    336c:	0f be       	out	0x3f, r0	; 63
    336e:	cd bf       	out	0x3d, r28	; 61
    3370:	cf 91       	pop	r28
    3372:	df 91       	pop	r29
    3374:	08 95       	ret

00003376 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    3376:	df 93       	push	r29
    3378:	cf 93       	push	r28
    337a:	cd b7       	in	r28, 0x3d	; 61
    337c:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    337e:	81 e0       	ldi	r24, 0x01	; 1
    3380:	0e 94 1e 10 	call	0x203c	; 0x203c <LCD_sendCommand>
}
    3384:	cf 91       	pop	r28
    3386:	df 91       	pop	r29
    3388:	08 95       	ret

0000338a <__vector_7>:

/* Global variables to hold the address of the call back function in the application */
static volatile void (*g_callBackPtr)(void) = NULL_PTR;

ISR(TIMER1_COMPA_vect)
{
    338a:	1f 92       	push	r1
    338c:	0f 92       	push	r0
    338e:	0f b6       	in	r0, 0x3f	; 63
    3390:	0f 92       	push	r0
    3392:	11 24       	eor	r1, r1
    3394:	2f 93       	push	r18
    3396:	3f 93       	push	r19
    3398:	4f 93       	push	r20
    339a:	5f 93       	push	r21
    339c:	6f 93       	push	r22
    339e:	7f 93       	push	r23
    33a0:	8f 93       	push	r24
    33a2:	9f 93       	push	r25
    33a4:	af 93       	push	r26
    33a6:	bf 93       	push	r27
    33a8:	ef 93       	push	r30
    33aa:	ff 93       	push	r31
    33ac:	df 93       	push	r29
    33ae:	cf 93       	push	r28
    33b0:	cd b7       	in	r28, 0x3d	; 61
    33b2:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    33b4:	80 91 03 01 	lds	r24, 0x0103
    33b8:	90 91 04 01 	lds	r25, 0x0104
    33bc:	00 97       	sbiw	r24, 0x00	; 0
    33be:	29 f0       	breq	.+10     	; 0x33ca <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    33c0:	e0 91 03 01 	lds	r30, 0x0103
    33c4:	f0 91 04 01 	lds	r31, 0x0104
    33c8:	09 95       	icall
	}
}
    33ca:	cf 91       	pop	r28
    33cc:	df 91       	pop	r29
    33ce:	ff 91       	pop	r31
    33d0:	ef 91       	pop	r30
    33d2:	bf 91       	pop	r27
    33d4:	af 91       	pop	r26
    33d6:	9f 91       	pop	r25
    33d8:	8f 91       	pop	r24
    33da:	7f 91       	pop	r23
    33dc:	6f 91       	pop	r22
    33de:	5f 91       	pop	r21
    33e0:	4f 91       	pop	r20
    33e2:	3f 91       	pop	r19
    33e4:	2f 91       	pop	r18
    33e6:	0f 90       	pop	r0
    33e8:	0f be       	out	0x3f, r0	; 63
    33ea:	0f 90       	pop	r0
    33ec:	1f 90       	pop	r1
    33ee:	18 95       	reti

000033f0 <__vector_9>:

ISR(TIMER1_OVF_vect)
{
    33f0:	1f 92       	push	r1
    33f2:	0f 92       	push	r0
    33f4:	0f b6       	in	r0, 0x3f	; 63
    33f6:	0f 92       	push	r0
    33f8:	11 24       	eor	r1, r1
    33fa:	2f 93       	push	r18
    33fc:	3f 93       	push	r19
    33fe:	4f 93       	push	r20
    3400:	5f 93       	push	r21
    3402:	6f 93       	push	r22
    3404:	7f 93       	push	r23
    3406:	8f 93       	push	r24
    3408:	9f 93       	push	r25
    340a:	af 93       	push	r26
    340c:	bf 93       	push	r27
    340e:	ef 93       	push	r30
    3410:	ff 93       	push	r31
    3412:	df 93       	push	r29
    3414:	cf 93       	push	r28
    3416:	cd b7       	in	r28, 0x3d	; 61
    3418:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    341a:	80 91 03 01 	lds	r24, 0x0103
    341e:	90 91 04 01 	lds	r25, 0x0104
    3422:	00 97       	sbiw	r24, 0x00	; 0
    3424:	29 f0       	breq	.+10     	; 0x3430 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    3426:	e0 91 03 01 	lds	r30, 0x0103
    342a:	f0 91 04 01 	lds	r31, 0x0104
    342e:	09 95       	icall
	}
}
    3430:	cf 91       	pop	r28
    3432:	df 91       	pop	r29
    3434:	ff 91       	pop	r31
    3436:	ef 91       	pop	r30
    3438:	bf 91       	pop	r27
    343a:	af 91       	pop	r26
    343c:	9f 91       	pop	r25
    343e:	8f 91       	pop	r24
    3440:	7f 91       	pop	r23
    3442:	6f 91       	pop	r22
    3444:	5f 91       	pop	r21
    3446:	4f 91       	pop	r20
    3448:	3f 91       	pop	r19
    344a:	2f 91       	pop	r18
    344c:	0f 90       	pop	r0
    344e:	0f be       	out	0x3f, r0	; 63
    3450:	0f 90       	pop	r0
    3452:	1f 90       	pop	r1
    3454:	18 95       	reti

00003456 <Timer1_init>:

void Timer1_init(const Timer1_ConfigType * Config_Ptr){
    3456:	df 93       	push	r29
    3458:	cf 93       	push	r28
    345a:	00 d0       	rcall	.+0      	; 0x345c <Timer1_init+0x6>
    345c:	cd b7       	in	r28, 0x3d	; 61
    345e:	de b7       	in	r29, 0x3e	; 62
    3460:	9a 83       	std	Y+2, r25	; 0x02
    3462:	89 83       	std	Y+1, r24	; 0x01

	TCNT1 = Config_Ptr -> initial_value;
    3464:	ac e4       	ldi	r26, 0x4C	; 76
    3466:	b0 e0       	ldi	r27, 0x00	; 0
    3468:	e9 81       	ldd	r30, Y+1	; 0x01
    346a:	fa 81       	ldd	r31, Y+2	; 0x02
    346c:	80 81       	ld	r24, Z
    346e:	91 81       	ldd	r25, Z+1	; 0x01
    3470:	11 96       	adiw	r26, 0x01	; 1
    3472:	9c 93       	st	X, r25
    3474:	8e 93       	st	-X, r24

	if((Config_Ptr -> mode) == NORMAL){
    3476:	e9 81       	ldd	r30, Y+1	; 0x01
    3478:	fa 81       	ldd	r31, Y+2	; 0x02
    347a:	85 81       	ldd	r24, Z+5	; 0x05
    347c:	88 23       	and	r24, r24
    347e:	d9 f4       	brne	.+54     	; 0x34b6 <Timer1_init+0x60>
		TCCR1A |= (1<<FOC1A) |(1<<FOC1B);
    3480:	af e4       	ldi	r26, 0x4F	; 79
    3482:	b0 e0       	ldi	r27, 0x00	; 0
    3484:	ef e4       	ldi	r30, 0x4F	; 79
    3486:	f0 e0       	ldi	r31, 0x00	; 0
    3488:	80 81       	ld	r24, Z
    348a:	8c 60       	ori	r24, 0x0C	; 12
    348c:	8c 93       	st	X, r24
		TCCR1B = (TCCR1B & 0xF8) | ((Config_Ptr -> prescaler));
    348e:	ae e4       	ldi	r26, 0x4E	; 78
    3490:	b0 e0       	ldi	r27, 0x00	; 0
    3492:	ee e4       	ldi	r30, 0x4E	; 78
    3494:	f0 e0       	ldi	r31, 0x00	; 0
    3496:	80 81       	ld	r24, Z
    3498:	98 2f       	mov	r25, r24
    349a:	98 7f       	andi	r25, 0xF8	; 248
    349c:	e9 81       	ldd	r30, Y+1	; 0x01
    349e:	fa 81       	ldd	r31, Y+2	; 0x02
    34a0:	84 81       	ldd	r24, Z+4	; 0x04
    34a2:	89 2b       	or	r24, r25
    34a4:	8c 93       	st	X, r24
		TIMSK |= (1<<TOIE1);
    34a6:	a9 e5       	ldi	r26, 0x59	; 89
    34a8:	b0 e0       	ldi	r27, 0x00	; 0
    34aa:	e9 e5       	ldi	r30, 0x59	; 89
    34ac:	f0 e0       	ldi	r31, 0x00	; 0
    34ae:	80 81       	ld	r24, Z
    34b0:	84 60       	ori	r24, 0x04	; 4
    34b2:	8c 93       	st	X, r24
    34b4:	3a c0       	rjmp	.+116    	; 0x352a <Timer1_init+0xd4>
	}
	else if((Config_Ptr -> mode) == CTC){
    34b6:	e9 81       	ldd	r30, Y+1	; 0x01
    34b8:	fa 81       	ldd	r31, Y+2	; 0x02
    34ba:	85 81       	ldd	r24, Z+5	; 0x05
    34bc:	84 30       	cpi	r24, 0x04	; 4
    34be:	a9 f5       	brne	.+106    	; 0x352a <Timer1_init+0xd4>
		TCCR1A |= (1<<FOC1A) |(1<<FOC1B);
    34c0:	af e4       	ldi	r26, 0x4F	; 79
    34c2:	b0 e0       	ldi	r27, 0x00	; 0
    34c4:	ef e4       	ldi	r30, 0x4F	; 79
    34c6:	f0 e0       	ldi	r31, 0x00	; 0
    34c8:	80 81       	ld	r24, Z
    34ca:	8c 60       	ori	r24, 0x0C	; 12
    34cc:	8c 93       	st	X, r24
		TCCR1B = (TCCR1B & 0xE7) | (((Config_Ptr -> mode)&0xFC)<<1);
    34ce:	ae e4       	ldi	r26, 0x4E	; 78
    34d0:	b0 e0       	ldi	r27, 0x00	; 0
    34d2:	ee e4       	ldi	r30, 0x4E	; 78
    34d4:	f0 e0       	ldi	r31, 0x00	; 0
    34d6:	80 81       	ld	r24, Z
    34d8:	28 2f       	mov	r18, r24
    34da:	27 7e       	andi	r18, 0xE7	; 231
    34dc:	e9 81       	ldd	r30, Y+1	; 0x01
    34de:	fa 81       	ldd	r31, Y+2	; 0x02
    34e0:	85 81       	ldd	r24, Z+5	; 0x05
    34e2:	88 2f       	mov	r24, r24
    34e4:	90 e0       	ldi	r25, 0x00	; 0
    34e6:	8c 7f       	andi	r24, 0xFC	; 252
    34e8:	90 70       	andi	r25, 0x00	; 0
    34ea:	88 0f       	add	r24, r24
    34ec:	99 1f       	adc	r25, r25
    34ee:	82 2b       	or	r24, r18
    34f0:	8c 93       	st	X, r24
		TCCR1B = (TCCR1B & 0xF8) | ((Config_Ptr -> prescaler));
    34f2:	ae e4       	ldi	r26, 0x4E	; 78
    34f4:	b0 e0       	ldi	r27, 0x00	; 0
    34f6:	ee e4       	ldi	r30, 0x4E	; 78
    34f8:	f0 e0       	ldi	r31, 0x00	; 0
    34fa:	80 81       	ld	r24, Z
    34fc:	98 2f       	mov	r25, r24
    34fe:	98 7f       	andi	r25, 0xF8	; 248
    3500:	e9 81       	ldd	r30, Y+1	; 0x01
    3502:	fa 81       	ldd	r31, Y+2	; 0x02
    3504:	84 81       	ldd	r24, Z+4	; 0x04
    3506:	89 2b       	or	r24, r25
    3508:	8c 93       	st	X, r24
		OCR1A = Config_Ptr -> compare_value;
    350a:	aa e4       	ldi	r26, 0x4A	; 74
    350c:	b0 e0       	ldi	r27, 0x00	; 0
    350e:	e9 81       	ldd	r30, Y+1	; 0x01
    3510:	fa 81       	ldd	r31, Y+2	; 0x02
    3512:	82 81       	ldd	r24, Z+2	; 0x02
    3514:	93 81       	ldd	r25, Z+3	; 0x03
    3516:	11 96       	adiw	r26, 0x01	; 1
    3518:	9c 93       	st	X, r25
    351a:	8e 93       	st	-X, r24
		TIMSK |= (1<<OCIE1A);
    351c:	a9 e5       	ldi	r26, 0x59	; 89
    351e:	b0 e0       	ldi	r27, 0x00	; 0
    3520:	e9 e5       	ldi	r30, 0x59	; 89
    3522:	f0 e0       	ldi	r31, 0x00	; 0
    3524:	80 81       	ld	r24, Z
    3526:	80 61       	ori	r24, 0x10	; 16
    3528:	8c 93       	st	X, r24
	}

}
    352a:	0f 90       	pop	r0
    352c:	0f 90       	pop	r0
    352e:	cf 91       	pop	r28
    3530:	df 91       	pop	r29
    3532:	08 95       	ret

00003534 <Timer1_deInit>:

void Timer1_deInit(void){
    3534:	df 93       	push	r29
    3536:	cf 93       	push	r28
    3538:	cd b7       	in	r28, 0x3d	; 61
    353a:	de b7       	in	r29, 0x3e	; 62
	TCNT1=0;
    353c:	ec e4       	ldi	r30, 0x4C	; 76
    353e:	f0 e0       	ldi	r31, 0x00	; 0
    3540:	11 82       	std	Z+1, r1	; 0x01
    3542:	10 82       	st	Z, r1
	OCR1A=0;
    3544:	ea e4       	ldi	r30, 0x4A	; 74
    3546:	f0 e0       	ldi	r31, 0x00	; 0
    3548:	11 82       	std	Z+1, r1	; 0x01
    354a:	10 82       	st	Z, r1
	TCCR1A=0;
    354c:	ef e4       	ldi	r30, 0x4F	; 79
    354e:	f0 e0       	ldi	r31, 0x00	; 0
    3550:	10 82       	st	Z, r1
	TCCR1B=0;
    3552:	ee e4       	ldi	r30, 0x4E	; 78
    3554:	f0 e0       	ldi	r31, 0x00	; 0
    3556:	10 82       	st	Z, r1
	TIMSK &= ~(1<<TOIE1) & ~(1<<OCIE1A);
    3558:	a9 e5       	ldi	r26, 0x59	; 89
    355a:	b0 e0       	ldi	r27, 0x00	; 0
    355c:	e9 e5       	ldi	r30, 0x59	; 89
    355e:	f0 e0       	ldi	r31, 0x00	; 0
    3560:	80 81       	ld	r24, Z
    3562:	8b 7e       	andi	r24, 0xEB	; 235
    3564:	8c 93       	st	X, r24
}
    3566:	cf 91       	pop	r28
    3568:	df 91       	pop	r29
    356a:	08 95       	ret

0000356c <Timer1_setCallBack>:

void Timer1_setCallBack(void(*a_ptr)(void)){
    356c:	df 93       	push	r29
    356e:	cf 93       	push	r28
    3570:	00 d0       	rcall	.+0      	; 0x3572 <Timer1_setCallBack+0x6>
    3572:	cd b7       	in	r28, 0x3d	; 61
    3574:	de b7       	in	r29, 0x3e	; 62
    3576:	9a 83       	std	Y+2, r25	; 0x02
    3578:	89 83       	std	Y+1, r24	; 0x01

	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    357a:	89 81       	ldd	r24, Y+1	; 0x01
    357c:	9a 81       	ldd	r25, Y+2	; 0x02
    357e:	90 93 04 01 	sts	0x0104, r25
    3582:	80 93 03 01 	sts	0x0103, r24

}
    3586:	0f 90       	pop	r0
    3588:	0f 90       	pop	r0
    358a:	cf 91       	pop	r28
    358c:	df 91       	pop	r29
    358e:	08 95       	ret

00003590 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    3590:	df 93       	push	r29
    3592:	cf 93       	push	r28
    3594:	00 d0       	rcall	.+0      	; 0x3596 <UART_init+0x6>
    3596:	00 d0       	rcall	.+0      	; 0x3598 <UART_init+0x8>
    3598:	cd b7       	in	r28, 0x3d	; 61
    359a:	de b7       	in	r29, 0x3e	; 62
    359c:	9c 83       	std	Y+4, r25	; 0x04
    359e:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    35a0:	1a 82       	std	Y+2, r1	; 0x02
    35a2:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    35a4:	eb e2       	ldi	r30, 0x2B	; 43
    35a6:	f0 e0       	ldi	r31, 0x00	; 0
    35a8:	82 e0       	ldi	r24, 0x02	; 2
    35aa:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = DYNAMIC CONFIG
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    35ac:	ea e2       	ldi	r30, 0x2A	; 42
    35ae:	f0 e0       	ldi	r31, 0x00	; 0
    35b0:	88 e1       	ldi	r24, 0x18	; 24
    35b2:	80 83       	st	Z, r24
	UCSRB = (UCSRB & 0xFE) | (((Config_Ptr -> bit_data)&0x04)<<UCSZ2);
    35b4:	aa e2       	ldi	r26, 0x2A	; 42
    35b6:	b0 e0       	ldi	r27, 0x00	; 0
    35b8:	ea e2       	ldi	r30, 0x2A	; 42
    35ba:	f0 e0       	ldi	r31, 0x00	; 0
    35bc:	80 81       	ld	r24, Z
    35be:	28 2f       	mov	r18, r24
    35c0:	2e 7f       	andi	r18, 0xFE	; 254
    35c2:	eb 81       	ldd	r30, Y+3	; 0x03
    35c4:	fc 81       	ldd	r31, Y+4	; 0x04
    35c6:	81 81       	ldd	r24, Z+1	; 0x01
    35c8:	88 2f       	mov	r24, r24
    35ca:	90 e0       	ldi	r25, 0x00	; 0
    35cc:	84 70       	andi	r24, 0x04	; 4
    35ce:	90 70       	andi	r25, 0x00	; 0
    35d0:	88 0f       	add	r24, r24
    35d2:	99 1f       	adc	r25, r25
    35d4:	88 0f       	add	r24, r24
    35d6:	99 1f       	adc	r25, r25
    35d8:	82 2b       	or	r24, r18
    35da:	8c 93       	st	X, r24
	 MODE
	 PARITY
	 CHARACTER SIZE
	 STOP BIT
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL);
    35dc:	e0 e4       	ldi	r30, 0x40	; 64
    35de:	f0 e0       	ldi	r31, 0x00	; 0
    35e0:	80 e8       	ldi	r24, 0x80	; 128
    35e2:	80 83       	st	Z, r24
	UCSRC = (UCSRC & 0xBF) | ((Config_Ptr -> mode)<<UMSEL);
    35e4:	a0 e4       	ldi	r26, 0x40	; 64
    35e6:	b0 e0       	ldi	r27, 0x00	; 0
    35e8:	e0 e4       	ldi	r30, 0x40	; 64
    35ea:	f0 e0       	ldi	r31, 0x00	; 0
    35ec:	80 81       	ld	r24, Z
    35ee:	28 2f       	mov	r18, r24
    35f0:	2f 7b       	andi	r18, 0xBF	; 191
    35f2:	eb 81       	ldd	r30, Y+3	; 0x03
    35f4:	fc 81       	ldd	r31, Y+4	; 0x04
    35f6:	80 81       	ld	r24, Z
    35f8:	88 2f       	mov	r24, r24
    35fa:	90 e0       	ldi	r25, 0x00	; 0
    35fc:	00 24       	eor	r0, r0
    35fe:	96 95       	lsr	r25
    3600:	87 95       	ror	r24
    3602:	07 94       	ror	r0
    3604:	96 95       	lsr	r25
    3606:	87 95       	ror	r24
    3608:	07 94       	ror	r0
    360a:	98 2f       	mov	r25, r24
    360c:	80 2d       	mov	r24, r0
    360e:	82 2b       	or	r24, r18
    3610:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xCF) | ((Config_Ptr -> parity)<<UPM0);
    3612:	a0 e4       	ldi	r26, 0x40	; 64
    3614:	b0 e0       	ldi	r27, 0x00	; 0
    3616:	e0 e4       	ldi	r30, 0x40	; 64
    3618:	f0 e0       	ldi	r31, 0x00	; 0
    361a:	80 81       	ld	r24, Z
    361c:	28 2f       	mov	r18, r24
    361e:	2f 7c       	andi	r18, 0xCF	; 207
    3620:	eb 81       	ldd	r30, Y+3	; 0x03
    3622:	fc 81       	ldd	r31, Y+4	; 0x04
    3624:	82 81       	ldd	r24, Z+2	; 0x02
    3626:	88 2f       	mov	r24, r24
    3628:	90 e0       	ldi	r25, 0x00	; 0
    362a:	82 95       	swap	r24
    362c:	92 95       	swap	r25
    362e:	90 7f       	andi	r25, 0xF0	; 240
    3630:	98 27       	eor	r25, r24
    3632:	80 7f       	andi	r24, 0xF0	; 240
    3634:	98 27       	eor	r25, r24
    3636:	82 2b       	or	r24, r18
    3638:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF9) | ((((Config_Ptr -> bit_data))&0x03)<<UCSZ0);
    363a:	a0 e4       	ldi	r26, 0x40	; 64
    363c:	b0 e0       	ldi	r27, 0x00	; 0
    363e:	e0 e4       	ldi	r30, 0x40	; 64
    3640:	f0 e0       	ldi	r31, 0x00	; 0
    3642:	80 81       	ld	r24, Z
    3644:	28 2f       	mov	r18, r24
    3646:	29 7f       	andi	r18, 0xF9	; 249
    3648:	eb 81       	ldd	r30, Y+3	; 0x03
    364a:	fc 81       	ldd	r31, Y+4	; 0x04
    364c:	81 81       	ldd	r24, Z+1	; 0x01
    364e:	88 2f       	mov	r24, r24
    3650:	90 e0       	ldi	r25, 0x00	; 0
    3652:	83 70       	andi	r24, 0x03	; 3
    3654:	90 70       	andi	r25, 0x00	; 0
    3656:	88 0f       	add	r24, r24
    3658:	99 1f       	adc	r25, r25
    365a:	82 2b       	or	r24, r18
    365c:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF7) | ((Config_Ptr -> stop_bit)<<USBS);
    365e:	a0 e4       	ldi	r26, 0x40	; 64
    3660:	b0 e0       	ldi	r27, 0x00	; 0
    3662:	e0 e4       	ldi	r30, 0x40	; 64
    3664:	f0 e0       	ldi	r31, 0x00	; 0
    3666:	80 81       	ld	r24, Z
    3668:	28 2f       	mov	r18, r24
    366a:	27 7f       	andi	r18, 0xF7	; 247
    366c:	eb 81       	ldd	r30, Y+3	; 0x03
    366e:	fc 81       	ldd	r31, Y+4	; 0x04
    3670:	83 81       	ldd	r24, Z+3	; 0x03
    3672:	88 2f       	mov	r24, r24
    3674:	90 e0       	ldi	r25, 0x00	; 0
    3676:	88 0f       	add	r24, r24
    3678:	99 1f       	adc	r25, r25
    367a:	88 0f       	add	r24, r24
    367c:	99 1f       	adc	r25, r25
    367e:	88 0f       	add	r24, r24
    3680:	99 1f       	adc	r25, r25
    3682:	82 2b       	or	r24, r18
    3684:	8c 93       	st	X, r24
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((Config_Ptr ->baud_rate) * 8UL))) - 1);
    3686:	eb 81       	ldd	r30, Y+3	; 0x03
    3688:	fc 81       	ldd	r31, Y+4	; 0x04
    368a:	84 81       	ldd	r24, Z+4	; 0x04
    368c:	95 81       	ldd	r25, Z+5	; 0x05
    368e:	a6 81       	ldd	r26, Z+6	; 0x06
    3690:	b7 81       	ldd	r27, Z+7	; 0x07
    3692:	88 0f       	add	r24, r24
    3694:	99 1f       	adc	r25, r25
    3696:	aa 1f       	adc	r26, r26
    3698:	bb 1f       	adc	r27, r27
    369a:	88 0f       	add	r24, r24
    369c:	99 1f       	adc	r25, r25
    369e:	aa 1f       	adc	r26, r26
    36a0:	bb 1f       	adc	r27, r27
    36a2:	88 0f       	add	r24, r24
    36a4:	99 1f       	adc	r25, r25
    36a6:	aa 1f       	adc	r26, r26
    36a8:	bb 1f       	adc	r27, r27
    36aa:	9c 01       	movw	r18, r24
    36ac:	ad 01       	movw	r20, r26
    36ae:	80 e0       	ldi	r24, 0x00	; 0
    36b0:	92 e1       	ldi	r25, 0x12	; 18
    36b2:	aa e7       	ldi	r26, 0x7A	; 122
    36b4:	b0 e0       	ldi	r27, 0x00	; 0
    36b6:	bc 01       	movw	r22, r24
    36b8:	cd 01       	movw	r24, r26
    36ba:	0e 94 08 1c 	call	0x3810	; 0x3810 <__udivmodsi4>
    36be:	da 01       	movw	r26, r20
    36c0:	c9 01       	movw	r24, r18
    36c2:	01 97       	sbiw	r24, 0x01	; 1
    36c4:	9a 83       	std	Y+2, r25	; 0x02
    36c6:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    36c8:	e0 e4       	ldi	r30, 0x40	; 64
    36ca:	f0 e0       	ldi	r31, 0x00	; 0
    36cc:	89 81       	ldd	r24, Y+1	; 0x01
    36ce:	9a 81       	ldd	r25, Y+2	; 0x02
    36d0:	89 2f       	mov	r24, r25
    36d2:	99 27       	eor	r25, r25
    36d4:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    36d6:	e9 e2       	ldi	r30, 0x29	; 41
    36d8:	f0 e0       	ldi	r31, 0x00	; 0
    36da:	89 81       	ldd	r24, Y+1	; 0x01
    36dc:	80 83       	st	Z, r24
}
    36de:	0f 90       	pop	r0
    36e0:	0f 90       	pop	r0
    36e2:	0f 90       	pop	r0
    36e4:	0f 90       	pop	r0
    36e6:	cf 91       	pop	r28
    36e8:	df 91       	pop	r29
    36ea:	08 95       	ret

000036ec <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    36ec:	df 93       	push	r29
    36ee:	cf 93       	push	r28
    36f0:	0f 92       	push	r0
    36f2:	cd b7       	in	r28, 0x3d	; 61
    36f4:	de b7       	in	r29, 0x3e	; 62
    36f6:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    36f8:	eb e2       	ldi	r30, 0x2B	; 43
    36fa:	f0 e0       	ldi	r31, 0x00	; 0
    36fc:	80 81       	ld	r24, Z
    36fe:	88 2f       	mov	r24, r24
    3700:	90 e0       	ldi	r25, 0x00	; 0
    3702:	80 72       	andi	r24, 0x20	; 32
    3704:	90 70       	andi	r25, 0x00	; 0
    3706:	00 97       	sbiw	r24, 0x00	; 0
    3708:	b9 f3       	breq	.-18     	; 0x36f8 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    370a:	ec e2       	ldi	r30, 0x2C	; 44
    370c:	f0 e0       	ldi	r31, 0x00	; 0
    370e:	89 81       	ldd	r24, Y+1	; 0x01
    3710:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    3712:	0f 90       	pop	r0
    3714:	cf 91       	pop	r28
    3716:	df 91       	pop	r29
    3718:	08 95       	ret

0000371a <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    371a:	df 93       	push	r29
    371c:	cf 93       	push	r28
    371e:	cd b7       	in	r28, 0x3d	; 61
    3720:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    3722:	eb e2       	ldi	r30, 0x2B	; 43
    3724:	f0 e0       	ldi	r31, 0x00	; 0
    3726:	80 81       	ld	r24, Z
    3728:	88 23       	and	r24, r24
    372a:	dc f7       	brge	.-10     	; 0x3722 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    372c:	ec e2       	ldi	r30, 0x2C	; 44
    372e:	f0 e0       	ldi	r31, 0x00	; 0
    3730:	80 81       	ld	r24, Z
}
    3732:	cf 91       	pop	r28
    3734:	df 91       	pop	r29
    3736:	08 95       	ret

00003738 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    3738:	df 93       	push	r29
    373a:	cf 93       	push	r28
    373c:	00 d0       	rcall	.+0      	; 0x373e <UART_sendString+0x6>
    373e:	0f 92       	push	r0
    3740:	cd b7       	in	r28, 0x3d	; 61
    3742:	de b7       	in	r29, 0x3e	; 62
    3744:	9b 83       	std	Y+3, r25	; 0x03
    3746:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3748:	19 82       	std	Y+1, r1	; 0x01
    374a:	0e c0       	rjmp	.+28     	; 0x3768 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    374c:	89 81       	ldd	r24, Y+1	; 0x01
    374e:	28 2f       	mov	r18, r24
    3750:	30 e0       	ldi	r19, 0x00	; 0
    3752:	8a 81       	ldd	r24, Y+2	; 0x02
    3754:	9b 81       	ldd	r25, Y+3	; 0x03
    3756:	fc 01       	movw	r30, r24
    3758:	e2 0f       	add	r30, r18
    375a:	f3 1f       	adc	r31, r19
    375c:	80 81       	ld	r24, Z
    375e:	0e 94 76 1b 	call	0x36ec	; 0x36ec <UART_sendByte>
		i++;
    3762:	89 81       	ldd	r24, Y+1	; 0x01
    3764:	8f 5f       	subi	r24, 0xFF	; 255
    3766:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    3768:	89 81       	ldd	r24, Y+1	; 0x01
    376a:	28 2f       	mov	r18, r24
    376c:	30 e0       	ldi	r19, 0x00	; 0
    376e:	8a 81       	ldd	r24, Y+2	; 0x02
    3770:	9b 81       	ldd	r25, Y+3	; 0x03
    3772:	fc 01       	movw	r30, r24
    3774:	e2 0f       	add	r30, r18
    3776:	f3 1f       	adc	r31, r19
    3778:	80 81       	ld	r24, Z
    377a:	88 23       	and	r24, r24
    377c:	39 f7       	brne	.-50     	; 0x374c <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    377e:	0f 90       	pop	r0
    3780:	0f 90       	pop	r0
    3782:	0f 90       	pop	r0
    3784:	cf 91       	pop	r28
    3786:	df 91       	pop	r29
    3788:	08 95       	ret

0000378a <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    378a:	0f 93       	push	r16
    378c:	1f 93       	push	r17
    378e:	df 93       	push	r29
    3790:	cf 93       	push	r28
    3792:	00 d0       	rcall	.+0      	; 0x3794 <UART_receiveString+0xa>
    3794:	0f 92       	push	r0
    3796:	cd b7       	in	r28, 0x3d	; 61
    3798:	de b7       	in	r29, 0x3e	; 62
    379a:	9b 83       	std	Y+3, r25	; 0x03
    379c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    379e:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    37a0:	89 81       	ldd	r24, Y+1	; 0x01
    37a2:	28 2f       	mov	r18, r24
    37a4:	30 e0       	ldi	r19, 0x00	; 0
    37a6:	8a 81       	ldd	r24, Y+2	; 0x02
    37a8:	9b 81       	ldd	r25, Y+3	; 0x03
    37aa:	8c 01       	movw	r16, r24
    37ac:	02 0f       	add	r16, r18
    37ae:	13 1f       	adc	r17, r19
    37b0:	0e 94 8d 1b 	call	0x371a	; 0x371a <UART_recieveByte>
    37b4:	f8 01       	movw	r30, r16
    37b6:	80 83       	st	Z, r24
    37b8:	0f c0       	rjmp	.+30     	; 0x37d8 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    37ba:	89 81       	ldd	r24, Y+1	; 0x01
    37bc:	8f 5f       	subi	r24, 0xFF	; 255
    37be:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    37c0:	89 81       	ldd	r24, Y+1	; 0x01
    37c2:	28 2f       	mov	r18, r24
    37c4:	30 e0       	ldi	r19, 0x00	; 0
    37c6:	8a 81       	ldd	r24, Y+2	; 0x02
    37c8:	9b 81       	ldd	r25, Y+3	; 0x03
    37ca:	8c 01       	movw	r16, r24
    37cc:	02 0f       	add	r16, r18
    37ce:	13 1f       	adc	r17, r19
    37d0:	0e 94 8d 1b 	call	0x371a	; 0x371a <UART_recieveByte>
    37d4:	f8 01       	movw	r30, r16
    37d6:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    37d8:	89 81       	ldd	r24, Y+1	; 0x01
    37da:	28 2f       	mov	r18, r24
    37dc:	30 e0       	ldi	r19, 0x00	; 0
    37de:	8a 81       	ldd	r24, Y+2	; 0x02
    37e0:	9b 81       	ldd	r25, Y+3	; 0x03
    37e2:	fc 01       	movw	r30, r24
    37e4:	e2 0f       	add	r30, r18
    37e6:	f3 1f       	adc	r31, r19
    37e8:	80 81       	ld	r24, Z
    37ea:	83 32       	cpi	r24, 0x23	; 35
    37ec:	31 f7       	brne	.-52     	; 0x37ba <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    37ee:	89 81       	ldd	r24, Y+1	; 0x01
    37f0:	28 2f       	mov	r18, r24
    37f2:	30 e0       	ldi	r19, 0x00	; 0
    37f4:	8a 81       	ldd	r24, Y+2	; 0x02
    37f6:	9b 81       	ldd	r25, Y+3	; 0x03
    37f8:	fc 01       	movw	r30, r24
    37fa:	e2 0f       	add	r30, r18
    37fc:	f3 1f       	adc	r31, r19
    37fe:	10 82       	st	Z, r1
}
    3800:	0f 90       	pop	r0
    3802:	0f 90       	pop	r0
    3804:	0f 90       	pop	r0
    3806:	cf 91       	pop	r28
    3808:	df 91       	pop	r29
    380a:	1f 91       	pop	r17
    380c:	0f 91       	pop	r16
    380e:	08 95       	ret

00003810 <__udivmodsi4>:
    3810:	a1 e2       	ldi	r26, 0x21	; 33
    3812:	1a 2e       	mov	r1, r26
    3814:	aa 1b       	sub	r26, r26
    3816:	bb 1b       	sub	r27, r27
    3818:	fd 01       	movw	r30, r26
    381a:	0d c0       	rjmp	.+26     	; 0x3836 <__udivmodsi4_ep>

0000381c <__udivmodsi4_loop>:
    381c:	aa 1f       	adc	r26, r26
    381e:	bb 1f       	adc	r27, r27
    3820:	ee 1f       	adc	r30, r30
    3822:	ff 1f       	adc	r31, r31
    3824:	a2 17       	cp	r26, r18
    3826:	b3 07       	cpc	r27, r19
    3828:	e4 07       	cpc	r30, r20
    382a:	f5 07       	cpc	r31, r21
    382c:	20 f0       	brcs	.+8      	; 0x3836 <__udivmodsi4_ep>
    382e:	a2 1b       	sub	r26, r18
    3830:	b3 0b       	sbc	r27, r19
    3832:	e4 0b       	sbc	r30, r20
    3834:	f5 0b       	sbc	r31, r21

00003836 <__udivmodsi4_ep>:
    3836:	66 1f       	adc	r22, r22
    3838:	77 1f       	adc	r23, r23
    383a:	88 1f       	adc	r24, r24
    383c:	99 1f       	adc	r25, r25
    383e:	1a 94       	dec	r1
    3840:	69 f7       	brne	.-38     	; 0x381c <__udivmodsi4_loop>
    3842:	60 95       	com	r22
    3844:	70 95       	com	r23
    3846:	80 95       	com	r24
    3848:	90 95       	com	r25
    384a:	9b 01       	movw	r18, r22
    384c:	ac 01       	movw	r20, r24
    384e:	bd 01       	movw	r22, r26
    3850:	cf 01       	movw	r24, r30
    3852:	08 95       	ret

00003854 <__prologue_saves__>:
    3854:	2f 92       	push	r2
    3856:	3f 92       	push	r3
    3858:	4f 92       	push	r4
    385a:	5f 92       	push	r5
    385c:	6f 92       	push	r6
    385e:	7f 92       	push	r7
    3860:	8f 92       	push	r8
    3862:	9f 92       	push	r9
    3864:	af 92       	push	r10
    3866:	bf 92       	push	r11
    3868:	cf 92       	push	r12
    386a:	df 92       	push	r13
    386c:	ef 92       	push	r14
    386e:	ff 92       	push	r15
    3870:	0f 93       	push	r16
    3872:	1f 93       	push	r17
    3874:	cf 93       	push	r28
    3876:	df 93       	push	r29
    3878:	cd b7       	in	r28, 0x3d	; 61
    387a:	de b7       	in	r29, 0x3e	; 62
    387c:	ca 1b       	sub	r28, r26
    387e:	db 0b       	sbc	r29, r27
    3880:	0f b6       	in	r0, 0x3f	; 63
    3882:	f8 94       	cli
    3884:	de bf       	out	0x3e, r29	; 62
    3886:	0f be       	out	0x3f, r0	; 63
    3888:	cd bf       	out	0x3d, r28	; 61
    388a:	09 94       	ijmp

0000388c <__epilogue_restores__>:
    388c:	2a 88       	ldd	r2, Y+18	; 0x12
    388e:	39 88       	ldd	r3, Y+17	; 0x11
    3890:	48 88       	ldd	r4, Y+16	; 0x10
    3892:	5f 84       	ldd	r5, Y+15	; 0x0f
    3894:	6e 84       	ldd	r6, Y+14	; 0x0e
    3896:	7d 84       	ldd	r7, Y+13	; 0x0d
    3898:	8c 84       	ldd	r8, Y+12	; 0x0c
    389a:	9b 84       	ldd	r9, Y+11	; 0x0b
    389c:	aa 84       	ldd	r10, Y+10	; 0x0a
    389e:	b9 84       	ldd	r11, Y+9	; 0x09
    38a0:	c8 84       	ldd	r12, Y+8	; 0x08
    38a2:	df 80       	ldd	r13, Y+7	; 0x07
    38a4:	ee 80       	ldd	r14, Y+6	; 0x06
    38a6:	fd 80       	ldd	r15, Y+5	; 0x05
    38a8:	0c 81       	ldd	r16, Y+4	; 0x04
    38aa:	1b 81       	ldd	r17, Y+3	; 0x03
    38ac:	aa 81       	ldd	r26, Y+2	; 0x02
    38ae:	b9 81       	ldd	r27, Y+1	; 0x01
    38b0:	ce 0f       	add	r28, r30
    38b2:	d1 1d       	adc	r29, r1
    38b4:	0f b6       	in	r0, 0x3f	; 63
    38b6:	f8 94       	cli
    38b8:	de bf       	out	0x3e, r29	; 62
    38ba:	0f be       	out	0x3f, r0	; 63
    38bc:	cd bf       	out	0x3d, r28	; 61
    38be:	ed 01       	movw	r28, r26
    38c0:	08 95       	ret

000038c2 <itoa>:
    38c2:	fb 01       	movw	r30, r22
    38c4:	9f 01       	movw	r18, r30
    38c6:	e8 94       	clt
    38c8:	42 30       	cpi	r20, 0x02	; 2
    38ca:	c4 f0       	brlt	.+48     	; 0x38fc <itoa+0x3a>
    38cc:	45 32       	cpi	r20, 0x25	; 37
    38ce:	b4 f4       	brge	.+44     	; 0x38fc <itoa+0x3a>
    38d0:	4a 30       	cpi	r20, 0x0A	; 10
    38d2:	29 f4       	brne	.+10     	; 0x38de <itoa+0x1c>
    38d4:	97 fb       	bst	r25, 7
    38d6:	1e f4       	brtc	.+6      	; 0x38de <itoa+0x1c>
    38d8:	90 95       	com	r25
    38da:	81 95       	neg	r24
    38dc:	9f 4f       	sbci	r25, 0xFF	; 255
    38de:	64 2f       	mov	r22, r20
    38e0:	77 27       	eor	r23, r23
    38e2:	0e 94 92 1c 	call	0x3924	; 0x3924 <__udivmodhi4>
    38e6:	80 5d       	subi	r24, 0xD0	; 208
    38e8:	8a 33       	cpi	r24, 0x3A	; 58
    38ea:	0c f0       	brlt	.+2      	; 0x38ee <itoa+0x2c>
    38ec:	89 5d       	subi	r24, 0xD9	; 217
    38ee:	81 93       	st	Z+, r24
    38f0:	cb 01       	movw	r24, r22
    38f2:	00 97       	sbiw	r24, 0x00	; 0
    38f4:	a1 f7       	brne	.-24     	; 0x38de <itoa+0x1c>
    38f6:	16 f4       	brtc	.+4      	; 0x38fc <itoa+0x3a>
    38f8:	5d e2       	ldi	r21, 0x2D	; 45
    38fa:	51 93       	st	Z+, r21
    38fc:	10 82       	st	Z, r1
    38fe:	c9 01       	movw	r24, r18
    3900:	0c 94 82 1c 	jmp	0x3904	; 0x3904 <strrev>

00003904 <strrev>:
    3904:	dc 01       	movw	r26, r24
    3906:	fc 01       	movw	r30, r24
    3908:	67 2f       	mov	r22, r23
    390a:	71 91       	ld	r23, Z+
    390c:	77 23       	and	r23, r23
    390e:	e1 f7       	brne	.-8      	; 0x3908 <strrev+0x4>
    3910:	32 97       	sbiw	r30, 0x02	; 2
    3912:	04 c0       	rjmp	.+8      	; 0x391c <strrev+0x18>
    3914:	7c 91       	ld	r23, X
    3916:	6d 93       	st	X+, r22
    3918:	70 83       	st	Z, r23
    391a:	62 91       	ld	r22, -Z
    391c:	ae 17       	cp	r26, r30
    391e:	bf 07       	cpc	r27, r31
    3920:	c8 f3       	brcs	.-14     	; 0x3914 <strrev+0x10>
    3922:	08 95       	ret

00003924 <__udivmodhi4>:
    3924:	aa 1b       	sub	r26, r26
    3926:	bb 1b       	sub	r27, r27
    3928:	51 e1       	ldi	r21, 0x11	; 17
    392a:	07 c0       	rjmp	.+14     	; 0x393a <__udivmodhi4_ep>

0000392c <__udivmodhi4_loop>:
    392c:	aa 1f       	adc	r26, r26
    392e:	bb 1f       	adc	r27, r27
    3930:	a6 17       	cp	r26, r22
    3932:	b7 07       	cpc	r27, r23
    3934:	10 f0       	brcs	.+4      	; 0x393a <__udivmodhi4_ep>
    3936:	a6 1b       	sub	r26, r22
    3938:	b7 0b       	sbc	r27, r23

0000393a <__udivmodhi4_ep>:
    393a:	88 1f       	adc	r24, r24
    393c:	99 1f       	adc	r25, r25
    393e:	5a 95       	dec	r21
    3940:	a9 f7       	brne	.-22     	; 0x392c <__udivmodhi4_loop>
    3942:	80 95       	com	r24
    3944:	90 95       	com	r25
    3946:	bc 01       	movw	r22, r24
    3948:	cd 01       	movw	r24, r26
    394a:	08 95       	ret

0000394c <_exit>:
    394c:	f8 94       	cli

0000394e <__stop_program>:
    394e:	ff cf       	rjmp	.-2      	; 0x394e <__stop_program>
